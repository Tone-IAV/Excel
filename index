<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width,initial-scale=1"/>
  <title>Plataforma Gamificada — Curso de Excel</title>

  <!-- Tailwind via CDN -->
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      theme: { extend: {
        colors: { primary:'#007BFF', accent:'#00C9A7' },
        boxShadow: { soft:'0 10px 30px rgba(0,0,0,.08)' },
        borderRadius: { '2xl':'1.25rem' }
      }},
      darkMode: 'class'
    }
  </script>
  <style>
    .card { border-radius:1rem; box-shadow:0 10px 30px rgba(0,0,0,.08); background:#fff; padding:1rem; }
    .dark .card { background:#0f172a; }
    .btn { display:inline-flex; align-items:center; gap:.5rem; padding:.5rem .9rem; border-radius:.7rem; border:1px solid transparent; font-weight:600; }
    .btn-primary { background:#007BFF; color:#fff; }
    .btn-ghost { background:transparent; color:#334155; }
    .dark .btn-ghost { color:#e2e8f0; }
    .input { width:100%; padding:.55rem .75rem; border-radius:.7rem; border:1px solid #e5e7eb; }
    .dark .input { background:#0f172a; color:#e5e7eb; border-color:#475569; }
    .pill { font-size:.75rem; padding:.2rem .6rem; border-radius:9999px; background:#f1f5f9; color:#475569; }
    .dark .pill { background:#334155; color:#e2e8f0; }
    .hidden-admin { opacity:.6; font-size:.8rem; }
    .feedback { font-size:.85rem; padding:.5rem .75rem; border-radius:.75rem; border:1px solid transparent; }
    .feedback-error { background:#fee2e2; color:#b91c1c; border-color:#fecaca; }
    .feedback-success { background:#dcfce7; color:#166534; border-color:#bbf7d0; }
    .dark .feedback-error { background:rgba(239,68,68,.15); color:#fecaca; border-color:rgba(248,113,113,.4); }
    .dark .feedback-success { background:rgba(34,197,94,.18); color:#bbf7d0; border-color:rgba(134,239,172,.4); }
    .error-text { font-size:.75rem; color:#dc2626; min-height:1rem; }
    .dark .error-text { color:#fca5a5; }
    .hint { font-size:.7rem; color:#64748b; }
    .dark .hint { color:#94a3b8; }
    .btn[disabled] { opacity:.6; cursor:not-allowed; }
    .aspect-video { position:relative; padding-top:56.25%; }
    .aspect-video > iframe { position:absolute; inset:0; width:100%; height:100%; border:0; }
    .history-tab { padding:.35rem .75rem; border-radius:9999px; border:1px solid rgba(148,163,184,.4); background:#f8fafc; color:#475569; font-size:.75rem; font-weight:600; transition:background-color .2s ease,color .2s ease,border-color .2s ease; }
    .history-tab:hover { background:#e2e8f0; }
    .history-tab-active { background:#007BFF; color:#fff; border-color:#007BFF; }
    .dark .history-tab { background:rgba(15,23,42,.9); color:#e2e8f0; border-color:rgba(148,163,184,.35); }
    .dark .history-tab:hover { background:rgba(148,163,184,.2); }
    .dark .history-tab-active { background:#2563eb; border-color:#2563eb; color:#fff; }
    .input-sm { font-size:.85rem; padding:.35rem .6rem; }
    .history-empty { font-size:.85rem; color:#64748b; background:#f8fafc; padding:1rem; border-radius:1rem; border:1px dashed rgba(148,163,184,.4); text-align:center; }
    .dark .history-empty { color:#cbd5f5; background:rgba(15,23,42,.6); border-color:rgba(148,163,184,.25); }
  </style>
</head>
<body class="bg-slate-50 dark:bg-slate-900 text-slate-900 dark:text-slate-100 min-h-screen">

  <div id="toastContainer" class="fixed top-4 right-4 z-50 flex w-full max-w-sm flex-col gap-3"></div>

<header class="sticky top-0 z-20 bg-white/70 dark:bg-slate-900/70 backdrop-blur border-b border-slate-200 dark:border-slate-700">
  <div class="max-w-5xl mx-auto px-4 py-3 flex items-center gap-3">
    <h1 class="text-lg font-bold">Plataforma — Curso de Excel</h1>
    <div class="ml-auto flex items-center gap-2">
      <span id="userInfo" class="pill">Visitante</span>
      <button id="btnLogout" class="btn btn-ghost hidden">Sair</button>
    </div>
  </div>
</header>

<main class="max-w-5xl mx-auto px-4 py-6 space-y-6">
  <!-- AUTH -->
  <section id="authSection" class="grid md:grid-cols-2 gap-4">
    <div class="card" id="signupCard">
      <h2 class="text-xl font-semibold mb-2">Criar conta</h2>
      <div id="signupMsg" class="feedback hidden"></div>
      <div class="grid gap-3">
        <div class="space-y-1">
          <input id="rName" class="input" placeholder="Nome completo" />
          <p id="rNameError" class="error-text"></p>
        </div>
        <div class="space-y-1">
          <input id="rEmail" class="input" placeholder="E-mail" title="Utilize um endereço válido (ex.: nome@empresa.com)." />
          <p class="hint">Utilize um endereço válido (ex.: nome@empresa.com).</p>
          <p id="rEmailError" class="error-text"></p>
        </div>
        <div class="space-y-1">
          <input id="rPass" type="password" class="input" placeholder="Senha" title="Mínimo de 8 caracteres com letras maiúsculas, minúsculas, números e símbolos." />
          <p class="hint">Mínimo de 8 caracteres com letras maiúsculas, minúsculas, números e símbolos.</p>
          <p id="rPassError" class="error-text"></p>
        </div>
        <div class="hidden-admin space-y-1">
          <label class="text-xs block">Código de segurança (somente para Administrador)</label>
          <input id="rAdminCode" class="input" placeholder="(opcional)" />
          <p id="rAdminCodeError" class="error-text"></p>
        </div>
        <button id="btnSignup" class="btn btn-primary" disabled>Criar conta</button>
        <p class="text-xs text-slate-500">Obs.: Administrador só é criado com código válido.</p>
      </div>
    </div>

    <div class="card">
      <h2 class="text-xl font-semibold mb-2">Entrar</h2>
      <div id="loginMsg" class="feedback hidden"></div>
      <div class="grid gap-2">
        <input id="lEmail" class="input" placeholder="E-mail" />
        <input id="lPass" type="password" class="input" placeholder="Senha" />
        <button id="btnLogin" class="btn btn-ghost">Entrar</button>
      </div>
    </div>
  </section>

  <!-- DASHBOARD -->
  <section id="dashSection" class="hidden">
    <div class="grid md:grid-cols-3 gap-4">
      <div class="card md:col-span-2">
        <h3 class="text-lg font-semibold mb-2">Sua evolução</h3>
        <div class="grid sm:grid-cols-3 gap-3">
          <div class="rounded-2xl p-4 bg-primary/10">
            <div class="text-xs">XP total</div><div id="xpBox" class="text-3xl font-bold">0</div>
          </div>
          <div class="rounded-2xl p-4 bg-emerald-100">
            <div class="text-xs">Módulos concluídos</div><div id="doneBox" class="text-3xl font-bold">0</div>
          </div>
          <div class="rounded-2xl p-4 bg-amber-100">
            <div class="text-xs">Nível</div><div id="lvlBox" class="text-3xl font-bold">1</div>
          </div>
        </div>
        <div class="mt-4">
          <div class="flex items-center justify-between text-sm mb-1">
            <span>Progresso nos 24 módulos</span><span id="pctBox">0%</span>
          </div>
          <div class="h-3 rounded-full bg-slate-200 overflow-hidden">
            <div id="barBox" class="h-3 bg-primary" style="width:0%"></div>
          </div>
        </div>
      </div>

      <div class="card">
        <h3 class="text-lg font-semibold mb-2">Check-in diário</h3>
        <p class="text-sm text-slate-500 mb-2">Ganhe +XP 1x ao dia.</p>
        <button id="btnCheckin" class="btn btn-primary">Confirmar presença</button>
        <div id="checkinMsg" class="text-xs text-emerald-600 mt-2"></div>
      </div>
    </div>

    <div class="card" id="historyCard">
      <div class="flex flex-wrap items-center gap-3 mb-3">
        <h3 class="text-lg font-semibold">Histórico de XP</h3>
        <div id="historyStreakWrap" class="flex flex-wrap items-center gap-2 text-xs hidden">
          <span id="historyStreakCurrent" class="pill"></span>
          <span id="historyStreakBest" class="pill"></span>
        </div>
      </div>
      <div class="flex flex-wrap items-center gap-3 mb-4">
        <div class="inline-flex gap-2 bg-slate-100 dark:bg-slate-800/60 p-1 rounded-full">
          <button type="button" class="history-tab history-tab-active" data-history-tab="checkins">Check-ins</button>
          <button type="button" class="history-tab" data-history-tab="activities">Atividades</button>
        </div>
        <div class="ml-auto flex flex-wrap items-center gap-2 text-xs">
          <label for="historyPeriodFilter" class="uppercase tracking-wide text-slate-500 dark:text-slate-400">Período</label>
          <select id="historyPeriodFilter" class="input input-sm">
            <option value="7">7 dias</option>
            <option value="30" selected>30 dias</option>
            <option value="90">90 dias</option>
            <option value="365">1 ano</option>
            <option value="all">Todo o período</option>
          </select>
        </div>
        <div id="historyModuleFilterWrap" class="flex flex-wrap items-center gap-2 text-xs hidden">
          <label for="historyModuleFilter" class="uppercase tracking-wide text-slate-500 dark:text-slate-400">Módulo</label>
          <select id="historyModuleFilter" class="input input-sm">
            <option value="all" selected>Todos os módulos</option>
          </select>
        </div>
      </div>
      <div id="historyList" class="grid gap-2 text-sm"></div>
    </div>

    <div class="card">
      <h3 class="text-lg font-semibold mb-2">Enviar atividade (exemplo)</h3>
      <div class="grid md:grid-cols-4 gap-2 items-end">
        <div>
          <label class="text-xs">Módulo</label>
          <input id="aModule" class="input" type="number" min="1" max="24" value="1"/>
        </div>
        <div>
          <label class="text-xs">% de acerto</label>
          <input id="aScore" class="input" type="number" min="0" max="100" value="80"/>
        </div>
        <div>
          <label class="text-xs">XP máximo do módulo</label>
          <input id="aMaxXP" class="input" type="number" min="0" value="40"/>
        </div>
        <button id="btnSubmitActivity" class="btn btn-ghost">Enviar resultado</button>
      </div>
      <div id="activityMsg" class="text-xs mt-2"></div>
    </div>

    <div class="grid md:grid-cols-2 gap-4">
      <div class="card">
        <h3 class="text-lg font-semibold mb-2">Ranking</h3>
        <div id="rankWrap" class="space-y-2 text-sm"></div>
      </div>
      <div class="card">
        <h3 class="text-lg font-semibold mb-2">Excel & PowerPoint (links)</h3>
        <div class="grid gap-2">
          <input id="excelLink" class="input" placeholder="Cole link compartilhado do Excel (OneDrive/SharePoint/Drive)"/>
          <input id="pptLink" class="input" placeholder="Cole link compartilhado do PowerPoint"/>
          <div class="flex gap-2">
            <button id="btnSaveEmbeds" class="btn btn-primary">Salvar</button>
            <button id="btnLoadEmbeds" class="btn btn-ghost">Atualizar</button>
          </div>
        </div>
        <div class="grid md:grid-cols-2 gap-3 mt-3">
          <div>
            <div class="text-xs mb-1">Excel</div>
            <div class="aspect-video bg-slate-200 rounded">
              <iframe id="excelFrame"></iframe>
            </div>
          </div>
          <div>
            <div class="text-xs mb-1">PowerPoint</div>
            <div class="aspect-video bg-slate-200 rounded">
              <iframe id="pptFrame"></iframe>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Admin -->
    <div id="adminPanel" class="card hidden">
      <h3 class="text-lg font-semibold mb-2">Painel do Administrador</h3>
      <p class="text-sm text-slate-500 mb-2">Ranking consolidado (apenas alunos). Use para premiações.</p>
      <div id="adminRank" class="space-y-2 text-sm"></div>
    </div>
  </section>
</main>

<script>
  // Estado simples no front
  let currentUser = null;
  const STORAGE_KEY = 'excelPlatformSession';

  function persistSession(token, user) {
    if (!token || !user || !user.id) return;
    const payload = {
      token,
      userId: user.id,
      name: user.name,
      isAdmin: !!user.isAdmin,
    };
    try {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(payload));
    } catch (err) {
      console.warn('Não foi possível salvar sessão local:', err);
    }
  }

  function clearStoredSession() {
    try {
      localStorage.removeItem(STORAGE_KEY);
    } catch (err) {
      console.warn('Não foi possível limpar sessão local:', err);
    }
  }

  function getStoredSession() {
    try {
      const raw = localStorage.getItem(STORAGE_KEY);
      if (!raw) return null;
      const parsed = JSON.parse(raw);
      if (!parsed || typeof parsed !== 'object') return null;
      if (!parsed.token) return null;
      return parsed;
    } catch (err) {
      console.warn('Não foi possível ler sessão local:', err);
      return null;
    }
  }

  // Helpers
  const $ = s => document.querySelector(s);
  const normalizeEmbed = url => {
    if (!url) return '';
    if (url.includes('onedrive') || url.includes('sharepoint')) {
      if (url.includes('embed')) return url;
      return 'https://view.officeapps.live.com/op/embed.aspx?src=' + encodeURIComponent(url);
    }
    if (url.includes('drive.google.com')) {
      return url.replace('/view?usp=sharing','/preview');
    }
    return url;
  };

  const toastContainer = $('#toastContainer');
  const toastVariants = {
    success: {
      toast: 'bg-emerald-600 text-white focus-visible:ring-emerald-200',
      close: 'bg-white/20 text-white hover:bg-white/30 focus-visible:ring-white'
    },
    error: {
      toast: 'bg-rose-600 text-white focus-visible:ring-rose-200',
      close: 'bg-white/20 text-white hover:bg-white/30 focus-visible:ring-white'
    },
    warning: {
      toast: 'bg-amber-500 text-slate-900 focus-visible:ring-amber-200',
      close: 'bg-black/10 text-slate-900 hover:bg-black/20 focus-visible:ring-amber-700'
    }
  };

  function showToast({ message, type = 'success', duration = 4000 } = {}) {
    const text = (message ?? '').toString().trim();
    if (!toastContainer || !text) return;

    const variant = toastVariants[type] ? type : 'success';
    const activeElement = document.activeElement;
    const returnFocusTo = activeElement instanceof HTMLElement
      && activeElement !== document.body
      && !toastContainer.contains(activeElement)
      ? activeElement
      : null;
    const toast = document.createElement('div');
    toast.setAttribute('role', variant === 'error' ? 'alert' : 'status');
    toast.setAttribute('aria-live', variant === 'error' ? 'assertive' : 'polite');
    toast.setAttribute('aria-atomic', 'true');
    toast.setAttribute('tabindex', '-1');
    toast.className = [
      'pointer-events-auto',
      'flex items-start gap-3 rounded-xl px-4 py-3 text-sm shadow-lg ring-1 ring-slate-900/10 transition duration-200 ease-out',
      'focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2',
      'dark:ring-white/10',
      'dark:focus-visible:ring-offset-slate-900',
      toastVariants[variant].toast
    ].join(' ');
    toast.classList.add('opacity-0');

    const textWrapper = document.createElement('div');
    textWrapper.className = 'flex-1 leading-snug';
    textWrapper.textContent = text;
    toast.appendChild(textWrapper);

    const closeBtn = document.createElement('button');
    closeBtn.type = 'button';
    closeBtn.setAttribute('aria-label', 'Fechar notificação');
    closeBtn.className = [
      'flex h-7 w-7 flex-none items-center justify-center rounded-full text-base transition focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2',
      toastVariants[variant].close
    ].join(' ');
    closeBtn.innerHTML = '<span aria-hidden="true">&times;</span>';
    toast.appendChild(closeBtn);

    toastContainer.appendChild(toast);

    const removeToast = () => {
      if (!toast.isConnected) return;
      if (hideTimer) {
        window.clearTimeout(hideTimer);
        hideTimer = null;
      }
      let fallbackTimer = null;
      const handleTransitionEnd = () => {
        toast.removeEventListener('transitionend', handleTransitionEnd);
        if (fallbackTimer) {
          window.clearTimeout(fallbackTimer);
          fallbackTimer = null;
        }
        if (toast.parentElement) toast.parentElement.removeChild(toast);
        if (returnFocusTo && returnFocusTo.isConnected) {
          try {
            returnFocusTo.focus({ preventScroll: true });
          } catch (err) {
            returnFocusTo.focus();
          }
        }
      };
      const wasVisible = toast.classList.contains('opacity-100');
      toast.classList.remove('opacity-100');
      toast.classList.add('opacity-0');
      if (!wasVisible) {
        handleTransitionEnd();
        return;
      }
      fallbackTimer = window.setTimeout(handleTransitionEnd, 250);
      toast.addEventListener('transitionend', handleTransitionEnd);
    };

    let hideTimer = null;
    const durationMs = Number(duration);
    if (!Number.isNaN(durationMs) && durationMs > 0) {
      hideTimer = window.setTimeout(() => removeToast(), durationMs);
    }

    closeBtn.addEventListener('click', () => {
      if (hideTimer) window.clearTimeout(hideTimer);
      removeToast();
    });

    toast.addEventListener('keydown', event => {
      if (event.key === 'Escape' || event.key === 'Esc') {
        event.preventDefault();
        if (hideTimer) window.clearTimeout(hideTimer);
        removeToast();
      }
    });

    requestAnimationFrame(() => {
      toast.classList.remove('opacity-0');
      toast.classList.add('opacity-100');
      try {
        toast.focus({ preventScroll: true });
      } catch (err) {
        toast.focus();
      }
    });
  }

  const historyTabs = Array.from(document.querySelectorAll('[data-history-tab]'));
  const historyListEl = $('#historyList');
  const historyPeriodSelect = $('#historyPeriodFilter');
  const historyModuleSelect = $('#historyModuleFilter');
  const historyModuleWrap = $('#historyModuleFilterWrap');
  const historyStreakWrap = $('#historyStreakWrap');
  const historyStreakCurrent = $('#historyStreakCurrent');
  const historyStreakBest = $('#historyStreakBest');
  const MS_PER_DAY = 24 * 60 * 60 * 1000;

  const historyState = {
    checkins: [],
    activities: [],
    streak: { current: 0, best: 0 },
    loading: { checkins: false, activities: false },
    errors: { checkins: '', activities: '' }
  };
  let activeHistoryTab = 'checkins';

  historyTabs.forEach(button => {
    button.addEventListener('click', () => {
      const tab = button.getAttribute('data-history-tab') || 'checkins';
      if (tab === activeHistoryTab) return;
      activeHistoryTab = tab;
      historyTabs.forEach(btn => {
        const btnTab = btn.getAttribute('data-history-tab');
        btn.classList.toggle('history-tab-active', btnTab === activeHistoryTab);
      });
      renderHistory();
    });
  });

  if (historyPeriodSelect) {
    historyPeriodSelect.addEventListener('change', () => renderHistory());
  }

  if (historyModuleSelect) {
    historyModuleSelect.addEventListener('change', () => renderHistory());
  }

  function resetHistorySection() {
    historyState.checkins = [];
    historyState.activities = [];
    historyState.streak = { current: 0, best: 0 };
    historyState.loading.checkins = false;
    historyState.loading.activities = false;
    historyState.errors.checkins = '';
    historyState.errors.activities = '';
    activeHistoryTab = 'checkins';
    if (historyPeriodSelect) historyPeriodSelect.value = '30';
    if (historyModuleSelect) historyModuleSelect.value = 'all';
    historyTabs.forEach(btn => {
      const tab = btn.getAttribute('data-history-tab');
      btn.classList.toggle('history-tab-active', tab === activeHistoryTab);
    });
    updateHistoryModuleFilterOptions();
    renderHistory();
  }

  function renderHistory() {
    if (!historyListEl) return;
    if (!currentUser) {
      historyListEl.innerHTML = '<p class="history-empty">Faça login para acompanhar seu histórico.</p>';
      if (historyModuleWrap) historyModuleWrap.classList.add('hidden');
      if (historyStreakWrap) historyStreakWrap.classList.add('hidden');
      return;
    }

    if (historyModuleWrap) {
      historyModuleWrap.classList.toggle('hidden', activeHistoryTab !== 'activities');
    }

    const stateKey = activeHistoryTab === 'activities' ? 'activities' : 'checkins';
    const isLoading = historyState.loading[stateKey];
    const errorMessage = historyState.errors[stateKey];
    const periodValue = historyPeriodSelect ? historyPeriodSelect.value : 'all';
    const moduleValue = historyModuleSelect ? historyModuleSelect.value : 'all';

    if (activeHistoryTab !== 'activities' && historyModuleWrap) {
      historyModuleWrap.classList.add('hidden');
    } else if (activeHistoryTab === 'activities') {
      updateHistoryModuleFilterOptions();
    }

    historyListEl.innerHTML = '';

    if (isLoading) {
      const loadingText = activeHistoryTab === 'activities' ? 'Carregando atividades...' : 'Carregando check-ins...';
      historyListEl.innerHTML = `<p class="history-empty">${loadingText}</p>`;
      renderStreakInfo();
      return;
    }

    if (errorMessage) {
      historyListEl.innerHTML = `<p class="history-empty text-rose-600 dark:text-rose-300">${errorMessage}</p>`;
      renderStreakInfo();
      return;
    }

    let items = (historyState[stateKey] || []).slice();

    if (periodValue !== 'all') {
      const days = Number(periodValue);
      if (!Number.isNaN(days) && days > 0) {
        const now = Date.now();
        items = items.filter(item => {
          const ts = getItemTimestamp(item);
          if (!Number.isFinite(ts)) return false;
          const diffDays = Math.floor((now - ts) / MS_PER_DAY);
          return diffDays < days;
        });
      }
    }

    if (activeHistoryTab === 'activities' && moduleValue !== 'all') {
      items = items.filter(item => String(item.moduleId || '') === moduleValue);
    }

    items.sort((a, b) => {
      const aTime = getItemTimestamp(a);
      const bTime = getItemTimestamp(b);
      return (Number.isFinite(bTime) ? bTime : -Infinity) - (Number.isFinite(aTime) ? aTime : -Infinity);
    });

    if (!items.length) {
      const emptyText = activeHistoryTab === 'activities'
        ? 'Nenhuma atividade registrada para os filtros selecionados.'
        : 'Ainda não há check-ins no período selecionado. Registre sua presença para começar um streak!';
      historyListEl.innerHTML = `<p class="history-empty">${emptyText}</p>`;
      renderStreakInfo();
      return;
    }

    items.forEach(item => {
      historyListEl.appendChild(
        activeHistoryTab === 'activities' ? renderActivityItem(item) : renderCheckinItem(item)
      );
    });

    renderStreakInfo();
  }

  function renderStreakInfo() {
    if (!historyStreakWrap) return;
    if (activeHistoryTab !== 'checkins' || historyState.loading.checkins || historyState.errors.checkins || !currentUser) {
      historyStreakWrap.classList.add('hidden');
      return;
    }
    if (!historyState.checkins.length) {
      historyStreakWrap.classList.add('hidden');
      return;
    }

    const { current, best } = historyState.streak;
    historyStreakWrap.classList.remove('hidden');

    if (historyStreakCurrent) {
      historyStreakCurrent.textContent = current > 0
        ? `🔥 Streak atual: ${current} dia${current > 1 ? 's' : ''}`
        : 'Sem streak ativo';
      historyStreakCurrent.classList.toggle('bg-emerald-100', current >= 3);
      historyStreakCurrent.classList.toggle('text-emerald-700', current >= 3);
      historyStreakCurrent.classList.toggle('dark:bg-emerald-500/10', current >= 3);
      historyStreakCurrent.classList.toggle('dark:text-emerald-300', current >= 3);
    }

    if (historyStreakBest) {
      historyStreakBest.textContent = best > 0
        ? `Recorde: ${best} dia${best > 1 ? 's' : ''}`
        : '';
      historyStreakBest.classList.toggle('hidden', best <= 0);
    }
  }

  function getItemTimestamp(item) {
    if (!item) return NaN;
    if (typeof item.timestamp === 'number' && !Number.isNaN(item.timestamp)) return item.timestamp;
    const parsed = parseDateValue(item.date || item.day);
    return parsed ? parsed.getTime() : NaN;
  }

  function parseDateValue(value) {
    if (!value) return null;
    if (value instanceof Date) return value;
    const str = String(value).trim();
    if (!str) return null;
    const normalized = str.length === 10 ? `${str}T00:00:00Z` : str;
    const date = new Date(normalized);
    return Number.isNaN(date.getTime()) ? null : date;
  }

  function formatHistoryDate(item) {
    const ts = getItemTimestamp(item);
    if (!Number.isFinite(ts)) {
      const day = item && item.day ? String(item.day) : '';
      return day ? day.split('-').reverse().join('/') : 'Data indisponível';
    }
    try {
      return new Intl.DateTimeFormat('pt-BR', { day: '2-digit', month: 'short', year: 'numeric' }).format(new Date(ts));
    } catch (err) {
      return new Date(ts).toLocaleDateString('pt-BR');
    }
  }

  function renderCheckinItem(item) {
    const element = document.createElement('div');
    element.className = 'flex flex-wrap items-center justify-between gap-3 rounded-xl border border-slate-200 dark:border-slate-700/70 bg-white dark:bg-slate-900/60 px-4 py-3';
    const xpValue = Number(item?.xp || 0);
    element.innerHTML = `
      <div class="flex-1">
        <div class="font-semibold">${formatHistoryDate(item)}</div>
        <div class="text-xs text-slate-500 dark:text-slate-400">Check-in diário</div>
      </div>
      <div class="text-sm font-semibold text-emerald-600 dark:text-emerald-400">+${xpValue} XP</div>
    `;
    return element;
  }

  function renderActivityItem(item) {
    const element = document.createElement('div');
    element.className = 'flex flex-wrap items-center justify-between gap-3 rounded-xl border border-slate-200 dark:border-slate-700/70 bg-white dark:bg-slate-900/60 px-4 py-3';
    const moduleLabel = Number.isFinite(item?.moduleId) && item.moduleId > 0 ? `Módulo ${item.moduleId}` : 'Atividade';
    const xpValue = Number(item?.earnedXP || 0);
    const scoreValue = Number(item?.scorePct || 0);
    const progressValue = Number(item?.progressPct || 0);
    element.innerHTML = `
      <div class="flex-1">
        <div class="font-semibold">${moduleLabel}</div>
        <div class="text-xs text-slate-500 dark:text-slate-400">${formatHistoryDate(item)}</div>
      </div>
      <div class="flex flex-col items-end gap-1 text-xs text-slate-500 dark:text-slate-400">
        <span class="text-sm font-semibold text-primary dark:text-blue-400">+${xpValue} XP</span>
        <span>Nota: ${scoreValue}%</span>
        <span>Evolução: ${progressValue}% do curso</span>
      </div>
    `;
    return element;
  }

  function updateHistoryModuleFilterOptions() {
    if (!historyModuleSelect) return;
    const previousValue = historyModuleSelect.value;
    historyModuleSelect.innerHTML = '';

    const optionAll = document.createElement('option');
    optionAll.value = 'all';
    optionAll.textContent = 'Todos os módulos';
    historyModuleSelect.appendChild(optionAll);

    const modules = Array.from(new Set(historyState.activities
      .map(item => Number(item?.moduleId || 0))
      .filter(id => Number.isFinite(id) && id > 0)))
      .sort((a, b) => a - b);

    modules.forEach(id => {
      const opt = document.createElement('option');
      opt.value = String(id);
      opt.textContent = `Módulo ${id}`;
      historyModuleSelect.appendChild(opt);
    });

    if (modules.includes(Number(previousValue))) {
      historyModuleSelect.value = previousValue;
    } else {
      historyModuleSelect.value = 'all';
    }

    if (historyModuleWrap) {
      historyModuleWrap.classList.toggle('hidden', activeHistoryTab !== 'activities' || modules.length === 0);
    }
  }

  function computeCheckinStreak(items) {
    if (!Array.isArray(items) || !items.length) return { current: 0, best: 0 };
    const timestamps = Array.from(new Set(items
      .map(entry => getItemTimestamp(entry))
      .filter(ts => Number.isFinite(ts)))).sort((a, b) => a - b);
    if (!timestamps.length) return { current: 0, best: 0 };

    let best = 1;
    let streak = 1;
    for (let i = 1; i < timestamps.length; i++) {
      const diffDays = Math.round((timestamps[i] - timestamps[i - 1]) / MS_PER_DAY);
      if (diffDays === 0) {
        continue;
      } else if (diffDays === 1) {
        streak += 1;
      } else {
        if (streak > best) best = streak;
        streak = 1;
      }
    }
    if (streak > best) best = streak;

    const desc = timestamps.slice().sort((a, b) => b - a);
    let current = 0;
    let previous = null;
    for (let i = 0; i < desc.length; i++) {
      const ts = desc[i];
      if (i === 0) {
        current = 1;
        previous = ts;
        continue;
      }
      const diffDays = Math.round((previous - ts) / MS_PER_DAY);
      if (diffDays === 0) {
        continue;
      }
      if (diffDays === 1) {
        current += 1;
        previous = ts;
      } else {
        break;
      }
    }

    return { current, best };
  }

  function normalizeCheckinHistory(data) {
    if (!Array.isArray(data)) return [];
    return data.map(item => {
      const day = item?.day ? String(item.day) : '';
      const date = item?.date ? String(item.date) : '';
      const parsed = parseDateValue(date || day);
      const timestamp = parsed ? parsed.getTime() : (typeof item?.timestamp === 'number' && !Number.isNaN(item.timestamp) ? item.timestamp : null);
      return {
        day,
        date,
        xp: Number(item?.xp || 0),
        timestamp: Number.isFinite(timestamp) ? timestamp : null
      };
    });
  }

  function normalizeActivityHistory(data) {
    if (!Array.isArray(data)) return [];
    return data.map(item => {
      const day = item?.day ? String(item.day) : '';
      const date = item?.date ? String(item.date) : '';
      const parsed = parseDateValue(date || day);
      const timestampCandidate = typeof item?.timestamp === 'number' && !Number.isNaN(item.timestamp)
        ? item.timestamp
        : (parsed ? parsed.getTime() : null);
      return {
        moduleId: Number(item?.moduleId || item?.module || 0),
        earnedXP: Number(item?.earnedXP || item?.xp || 0),
        scorePct: Math.round(Number(item?.scorePct || item?.score || 0)),
        progressPct: Math.max(0, Math.min(100, Math.round(Number(item?.progressPct || item?.progress || 0)))),
        day,
        date,
        timestamp: Number.isFinite(timestampCandidate) ? timestampCandidate : null
      };
    });
  }

  function loadHistoryForCurrentUser() {
    if (!currentUser || !currentUser.id) return;

    const expectedUserId = currentUser.id;
    historyState.loading.checkins = true;
    historyState.errors.checkins = '';
    historyState.loading.activities = true;
    historyState.errors.activities = '';
    renderHistory();

    google.script.run
      .withFailureHandler(err => {
        if (!currentUser || currentUser.id !== expectedUserId) return;
        historyState.loading.checkins = false;
        historyState.errors.checkins = err?.message || 'Não foi possível carregar o histórico de check-ins.';
        historyState.checkins = [];
        historyState.streak = { current: 0, best: 0 };
        renderHistory();
      })
      .withSuccessHandler(data => {
        if (!currentUser || currentUser.id !== expectedUserId) return;
        historyState.loading.checkins = false;
        historyState.checkins = normalizeCheckinHistory(data);
        historyState.streak = computeCheckinStreak(historyState.checkins);
        historyState.errors.checkins = '';
        renderHistory();
      })
      .getCheckinHistory(currentUser.id);

    google.script.run
      .withFailureHandler(err => {
        if (!currentUser || currentUser.id !== expectedUserId) return;
        historyState.loading.activities = false;
        historyState.errors.activities = err?.message || 'Não foi possível carregar o histórico de atividades.';
        historyState.activities = [];
        updateHistoryModuleFilterOptions();
        renderHistory();
      })
      .withSuccessHandler(data => {
        if (!currentUser || currentUser.id !== expectedUserId) return;
        historyState.loading.activities = false;
        historyState.activities = normalizeActivityHistory(data);
        historyState.errors.activities = '';
        updateHistoryModuleFilterOptions();
        renderHistory();
      })
      .getActivityHistory(currentUser.id);
  }

  const signupMessageEl = $('#signupMsg');
  const loginMessageEl  = $('#loginMsg');

  function renderCardMessage(el, type, message) {
    if (!el) return;
    const text = (message || '').toString();
    el.textContent = text;
    el.classList.remove('feedback-error', 'feedback-success');
    if (!text) {
      el.classList.add('hidden');
      return;
    }
    el.classList.remove('hidden');
    el.classList.add(type === 'success' ? 'feedback-success' : 'feedback-error');
  }

  function clearCardMessage(el) {
    renderCardMessage(el, '', '');
  }

  const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  const requiredSignupKeys = ['name','email','password'];
  const signupFields = {
    name: {
      input: $('#rName'),
      error: $('#rNameError'),
      touched: false,
      customError: null,
      validator: value => {
        if (!value) return { valid:false, message:'Informe o nome completo.' };
        if (value.length < 3) return { valid:false, message:'O nome deve ter pelo menos 3 caracteres.' };
        return { valid:true, message:'' };
      }
    },
    email: {
      input: $('#rEmail'),
      error: $('#rEmailError'),
      touched: false,
      customError: null,
      validator: value => {
        if (!value) return { valid:false, message:'Informe o e-mail.' };
        if (!emailPattern.test(value)) return { valid:false, message:'Formato de e-mail inválido.' };
        return { valid:true, message:'' };
      }
    },
    password: {
      input: $('#rPass'),
      error: $('#rPassError'),
      touched: false,
      customError: null,
      validator: value => {
        const missing = [];
        if (value.length < 8) missing.push('no mínimo 8 caracteres');
        if (!/[A-Z]/.test(value)) missing.push('uma letra maiúscula');
        if (!/[a-z]/.test(value)) missing.push('uma letra minúscula');
        if (!/\d/.test(value)) missing.push('um número');
        if (!/[^A-Za-z0-9]/.test(value)) missing.push('um símbolo');
        if (missing.length) {
          const last = missing.pop();
          const message = missing.length ? `A senha deve conter ${missing.join(', ')} e ${last}.` : `A senha deve conter ${last}.`;
          return { valid:false, message };
        }
        return { valid:true, message:'' };
      }
    },
    adminCode: {
      input: $('#rAdminCode'),
      error: $('#rAdminCodeError'),
      touched: false,
      customError: null,
      validator: () => ({ valid:true, message:'' })
    }
  };

  const btnSignup = $('#btnSignup');
  const loginEmailInput = $('#lEmail');
  const loginPasswordInput = $('#lPass');
  const btnLogin = $('#btnLogin');
  let isSignupSubmitting = false;

  function evaluateField(key, opts = {}) {
    const field = signupFields[key];
    if (!field || !field.input) return true;
    const rawValue = field.input.value || '';
    const value = rawValue.trim();
    const shouldShow = opts.force || field.touched || rawValue.length > 0;

    if (field.customError) {
      if (field.error) field.error.textContent = shouldShow ? field.customError : '';
      return false;
    }

    const result = field.validator(value, rawValue);
    if (field.error) field.error.textContent = shouldShow ? result.message : '';
    return !!result.valid;
  }

  function updateSignupButton() {
    const allValid = requiredSignupKeys.every(key => evaluateField(key));
    if (btnSignup) btnSignup.disabled = !allValid || isSignupSubmitting;
  }

  Object.entries(signupFields).forEach(([key, field]) => {
    if (!field.input) return;
    field.input.addEventListener('input', () => {
      field.customError = null;
      clearCardMessage(signupMessageEl);
      evaluateField(key);
      updateSignupButton();
    });
    field.input.addEventListener('blur', () => {
      field.touched = true;
      evaluateField(key, { force: true });
      updateSignupButton();
    });
  });

  updateSignupButton();

  [loginEmailInput, loginPasswordInput].forEach(input => {
    if (!input) return;
    input.addEventListener('input', () => clearCardMessage(loginMessageEl));
  });

  // UI switches
  function updateUI() {
    if (!currentUser) {
      $('#authSection').classList.remove('hidden');
      $('#dashSection').classList.add('hidden');
      $('#userInfo').textContent = 'Visitante';
      $('#btnLogout').classList.add('hidden');
      resetHistorySection();
      return;
    }
    $('#authSection').classList.add('hidden');
    $('#dashSection').classList.remove('hidden');
    $('#btnLogout').classList.remove('hidden');
    $('#userInfo').textContent = currentUser.name + (currentUser.isAdmin ? ' (Admin)' : '');
    loadHistoryForCurrentUser();
    // estado
    google.script.run.withSuccessHandler(s=>{
      $('#xpBox').textContent  = s.xp;
      $('#lvlBox').textContent = s.level;
      $('#doneBox').textContent = s.concluidos;
      const pct = Math.round((s.concluidos/24)*100);
      $('#pctBox').textContent = pct + '%';
      $('#barBox').style.width = pct + '%';
    }).getUserState({ userId: currentUser.id });

    // ranking
    refreshRanking();
    // admin panel
    $('#adminPanel').classList.toggle('hidden', !currentUser.isAdmin);
  }

  function refreshRanking() {
    google.script.run.withSuccessHandler(list=>{
      const wrap = $('#rankWrap');
      wrap.innerHTML = '';
      list.forEach(r=>{
        const div = document.createElement('div');
        div.innerHTML = `<b>${r.pos}º</b> — ${r.name} • XP ${r.xp} • Nível ${r.level}`;
        wrap.appendChild(div);
      });
      if (currentUser?.isAdmin) {
        const adm = $('#adminRank');
        adm.innerHTML = wrap.innerHTML;
      }
    }).getRanking();
  }

  // AUTH
  if (btnSignup) {
    btnSignup.addEventListener('click', () => {
      clearCardMessage(signupMessageEl);
      Object.values(signupFields).forEach(field => { field.touched = true; });
      const isValid = requiredSignupKeys.every(key => evaluateField(key, { force: true }));
      updateSignupButton();
      if (!isValid) {
        renderCardMessage(signupMessageEl, 'error', 'Revise os campos destacados.');
        return;
      }

      const payload = {
        name: signupFields.name.input.value.trim(),
        email: signupFields.email.input.value.trim(),
        password: signupFields.password.input.value,
        adminCode: signupFields.adminCode.input.value.trim()
      };

      isSignupSubmitting = true;
      updateSignupButton();

      google.script.run
        .withFailureHandler(err => {
          isSignupSubmitting = false;
          renderCardMessage(signupMessageEl, 'error', err.message || err);
          updateSignupButton();
        })
        .withSuccessHandler(res => {
          isSignupSubmitting = false;

          if (res && res.ok && res.user && res.token) {
            clearCardMessage(signupMessageEl);
            currentUser = res.user;
            persistSession(res.token, res.user);
            updateUI();
            updateSignupButton();
            return;
          }

          if (res && res.errors) {
            Object.entries(res.errors).forEach(([fieldKey, message]) => {
              const field = signupFields[fieldKey];
              if (field) {
                field.touched = true;
                field.customError = message;
                evaluateField(fieldKey, { force: true });
              }
            });
          }

          let messageText = 'Revise os campos destacados.';
          if (res && res.message) {
            messageText = res.message;
          } else if (!res || !res.errors || Object.keys(res.errors).length === 0) {
            messageText = 'Não foi possível criar a conta. Tente novamente.';
          }
          renderCardMessage(signupMessageEl, 'error', messageText);
          updateSignupButton();
        })
        .registerUser(payload);
    });
  }

  if (btnLogin) {
    btnLogin.addEventListener('click', () => {
      clearCardMessage(loginMessageEl);
      const email = loginEmailInput ? loginEmailInput.value.trim() : '';
      const password = loginPasswordInput ? loginPasswordInput.value.trim() : '';
      if (!email || !password) {
        renderCardMessage(loginMessageEl, 'error', 'Informe e-mail e senha.');
        return;
      }

      google.script.run
        .withFailureHandler(err => {
          renderCardMessage(loginMessageEl, 'error', err.message || err);
        })
        .withSuccessHandler(res => {
          const user = res && res.user;
          const token = res && res.token;
          if (user && user.id && token) {
            clearCardMessage(loginMessageEl);
            currentUser = user;
            persistSession(token, user);
            updateUI();
          } else {
            renderCardMessage(loginMessageEl, 'error', 'Não foi possível entrar. Tente novamente.');
          }
        })
        .loginUser({ email, password });
    });
  }

  $('#btnLogout').onclick = () => {
    const finish = () => {
      clearStoredSession();
      currentUser = null;
      updateUI();
    };
    const stored = getStoredSession();
    const token = stored && stored.token;
    if (!token) {
      finish();
      return;
    }
    google.script.run
      .withFailureHandler(() => finish())
      .withSuccessHandler(() => finish())
      .logout(token);
  };

  // Check-in
  $('#btnCheckin').onclick = ()=>{
    if (!currentUser) return showToast({ message: 'Faça login primeiro.', type: 'warning' });
    google.script.run
      .withFailureHandler(err=> showToast({ message: err?.message || err, type: 'error' }))
      .withSuccessHandler(res=>{
        $('#checkinMsg').textContent = res.ok
          ? `Presença registrada (+${res.xpGanho} XP). Total: ${res.totalXP} XP.`
          : res.msg;
        updateUI();
        setTimeout(()=> $('#checkinMsg').textContent='', 3000);
      })
      .checkin({ userId: currentUser.id });
  };

  // Submit activity (exemplo)
  $('#btnSubmitActivity').onclick = ()=>{
    if (!currentUser) return showToast({ message: 'Faça login primeiro.', type: 'warning' });
    const payload = {
      userId: currentUser.id,
      moduleId: Number($('#aModule').value||1),
      scorePct: Number($('#aScore').value||0),
      maxXP: Number($('#aMaxXP').value||0)
    };
    google.script.run
      .withFailureHandler(err=> showToast({ message: err?.message || err, type: 'error' }))
      .withSuccessHandler(res=>{
        $('#activityMsg').textContent = `Enviado! Você ganhou +${res.deltaXP} XP. Total: ${res.totalXP} XP (Nível ${res.level}).`;
        updateUI();
        setTimeout(()=> $('#activityMsg').textContent='', 4000);
      })
      .submitActivity(payload);
  };

  // Embeds
  $('#btnSaveEmbeds').onclick = ()=>{
    const excel = $('#excelLink').value.trim();
    const ppt   = $('#pptLink').value.trim();
    google.script.run
      .withFailureHandler(err=> showToast({ message: err?.message || err, type: 'error' }))
      .withSuccessHandler(()=> loadEmbeds())
      .saveEmbeds({ excel, ppt });
  };
  $('#btnLoadEmbeds').onclick = ()=> loadEmbeds();
  function loadEmbeds() {
    google.script.run.withSuccessHandler(e=>{
      $('#excelFrame').src = normalizeEmbed(e.excel||'');
      $('#pptFrame').src   = normalizeEmbed(e.ppt||'');
    }).getEmbeds();
  }

  // Boot
  (function init(){
    loadEmbeds();
    const stored = getStoredSession();
    const authSection = $('#authSection');
    if (authSection) authSection.classList.add('hidden');

    if (stored && stored.token) {
      google.script.run
        .withFailureHandler(() => {
          clearStoredSession();
          updateUI();
        })
        .withSuccessHandler(user => {
          if (user && user.id) {
            currentUser = user;
            persistSession(stored.token, user);
          } else {
            clearStoredSession();
          }
          updateUI();
        })
        .resumeSession(stored.token);
    } else {
      updateUI();
    }
  })();
</script>
</body>
</html>
