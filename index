<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width,initial-scale=1"/>
  <title>Plataforma Gamificada — Curso de Excel</title>
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet" />

  <!-- Tailwind via CDN -->
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            primary: '#217346',
            accent: '#71B340',
            ink: '#0b3d2e'
          },
          boxShadow: { soft:'0 10px 30px rgba(0,0,0,.08)' },
          borderRadius: { '2xl':'1.25rem' },
          fontFamily: {
            sans: ['Inter','Segoe UI','system-ui','-apple-system','BlinkMacSystemFont','Roboto','sans-serif']
          }
        }
      },
      darkMode: 'class'
    }
  </script>
  <script>
    window.__INITIAL_ROUTE__ = '<?= initialRoute ?>';
  </script>
  <style>
    body { font-family:'Inter','Segoe UI','system-ui','-apple-system','BlinkMacSystemFont','Roboto','sans-serif'; }
    .card { --card-bg:#fff; --card-border:transparent; --card-shadow:0 10px 30px rgba(0,0,0,.08); border-radius:0.75rem; padding:1.25rem; background:var(--card-bg); border:1px solid var(--card-border); box-shadow:var(--card-shadow); }
    .dark .card { --card-bg:#0f172a; --card-border:rgba(71,85,105,.45); --card-shadow:0 10px 30px rgba(15,23,42,.45); }
    .card-flat { --card-bg:rgba(248,250,252,.95); --card-border:rgba(148,163,184,.35); --card-shadow:none; border-radius:0.75rem; }
    .dark .card-flat { --card-bg:rgba(15,23,42,.85); --card-border:rgba(148,163,184,.25); }
    .card-transparent { --card-bg:rgba(255,255,255,.65); --card-border:rgba(148,163,184,.25); --card-shadow:none; backdrop-filter:blur(12px); -webkit-backdrop-filter:blur(12px); border-radius:0.75rem; }
    .dark .card-transparent { --card-bg:rgba(15,23,42,.6); --card-border:rgba(148,163,184,.3); }
    .btn { display:inline-flex; align-items:center; gap:.5rem; padding:.5rem .9rem; border-radius:.7rem; border:1px solid transparent; font-weight:600; transition:background-color .2s ease,color .2s ease,box-shadow .2s ease,border-color .2s ease; }
    .btn-primary { background:#217346; color:#fff; box-shadow:0 10px 24px rgba(33,115,70,.2); }
    .btn-primary:hover { background:#1b603b; box-shadow:0 12px 28px rgba(33,115,70,.25); }
    .btn-ghost { background:transparent; color:#1f2937; }
    .btn-ghost:hover { color:#14532d; }
    .dark .btn-ghost { color:#e2e8f0; }
    .input { width:100%; padding:.55rem .75rem; border-radius:.7rem; border:1px solid #e5e7eb; }
    .dark .input { background:#0f172a; color:#e5e7eb; border-color:#475569; }
    .pill { font-size:.75rem; padding:.2rem .6rem; border-radius:9999px; background:#f1f5f9; color:#475569; }
    .dark .pill { background:#334155; color:#e2e8f0; }
    .hidden-admin { opacity:.6; font-size:.8rem; }
    .feedback { font-size:.85rem; padding:.5rem .75rem; border-radius:.75rem; border:1px solid transparent; }
    .feedback-error { background:#fee2e2; color:#b91c1c; border-color:#fecaca; }
    .feedback-success { background:#dcfce7; color:#166534; border-color:#bbf7d0; }
    .dark .feedback-error { background:rgba(239,68,68,.15); color:#fecaca; border-color:rgba(248,113,113,.4); }
    .dark .feedback-success { background:rgba(34,197,94,.18); color:#bbf7d0; border-color:rgba(134,239,172,.4); }
    .error-text { font-size:.75rem; color:#dc2626; min-height:1rem; }
    .dark .error-text { color:#fca5a5; }
    .hint { font-size:.7rem; color:#64748b; }
    .dark .hint { color:#94a3b8; }
    .btn[disabled] { opacity:.6; cursor:not-allowed; }
    .aspect-video { position:relative; padding-top:56.25%; }
    .aspect-video > iframe { position:absolute; inset:0; width:100%; height:100%; border:0; }
    .history-tab { padding:.35rem .75rem; border-radius:9999px; border:1px solid rgba(148,163,184,.4); background:#f8fafc; color:#475569; font-size:.75rem; font-weight:600; transition:background-color .2s ease,color .2s ease,border-color .2s ease; }
    .history-tab:hover { background:#e2e8f0; }
    .history-tab-active { background:#217346; color:#fff; border-color:#217346; }
    .dark .history-tab { background:rgba(15,23,42,.9); color:#e2e8f0; border-color:rgba(148,163,184,.35); }
    .dark .history-tab:hover { background:rgba(148,163,184,.2); }
    .dark .history-tab-active { background:#2563eb; border-color:#2563eb; color:#fff; }
    .input-sm { font-size:.85rem; padding:.35rem .6rem; }
    .history-empty { font-size:.85rem; color:#64748b; background:#f8fafc; padding:1rem; border-radius:1rem; border:1px dashed rgba(148,163,184,.4); text-align:center; }
    .dark .history-empty { color:#cbd5f5; background:rgba(15,23,42,.6); border-color:rgba(148,163,184,.25); }
    .level-highlight { transition:transform .3s ease, box-shadow .3s ease; }
    .level-highlight:hover { transform:translateY(-2px); box-shadow:0 18px 32px rgba(249,115,22,.15); }
    .level-label { color:#92400e; letter-spacing:.08em; }
    .dark .level-label { color:#fde68a; }
    .milestone-badge { display:inline-flex; align-items:center; gap:.35rem; padding:.2rem .6rem; border-radius:9999px; font-size:.65rem; font-weight:700; background:rgba(251,191,36,.3); color:#78350f; text-transform:uppercase; letter-spacing:.08em; box-shadow:0 2px 8px rgba(249,115,22,.25); }
    .dark .milestone-badge { background:rgba(251,191,36,.2); color:#fde68a; box-shadow:0 2px 8px rgba(251,191,36,.25); }
    .milestone-celebrate { background:linear-gradient(135deg,#fcd34d 0%,#f97316 100%); color:#fff; box-shadow:0 22px 45px rgba(249,115,22,.35); }
    .milestone-celebrate #lvlBox { color:#fff; }
    .milestone-celebrate .level-label { color:#fff; }
    .milestone-celebrate .milestone-badge { background:rgba(255,255,255,.35); color:#7c2d12; box-shadow:0 6px 18px rgba(249,115,22,.35); }
    .dark .milestone-celebrate { background:linear-gradient(135deg,#92400e 0%,#f59e0b 100%); box-shadow:0 22px 45px rgba(234,179,8,.35); }
    .dark .milestone-celebrate .milestone-badge { background:rgba(255,255,255,.85); color:#7c2d12; }
    .milestone-chip { display:inline-flex; align-items:center; gap:.35rem; padding:.35rem .75rem; border-radius:9999px; font-weight:600; font-size:.75rem; background:rgba(226,232,240,.85); color:#1f2937; box-shadow:0 3px 12px rgba(15,23,42,.1); }
    .milestone-chip span { display:inline-flex; align-items:center; }
    .milestone-chip-achieved { background:rgba(134,239,172,.45); color:#047857; box-shadow:0 6px 16px rgba(16,185,129,.3); }
    .milestone-chip-next { background:rgba(253,224,71,.55); color:#92400e; box-shadow:0 6px 16px rgba(251,191,36,.35); }
    .dark .milestone-chip { background:rgba(30,41,59,.65); color:#e2e8f0; box-shadow:0 3px 12px rgba(15,23,42,.25); }
    .dark .milestone-chip-achieved { background:rgba(34,197,94,.3); color:#bbf7d0; }
    .dark .milestone-chip-next { background:rgba(250,204,21,.25); color:#fde68a; }
    #nextLevelBar { transition:width .45s ease; }
    .achievements-scroll { display:flex; gap:1rem; overflow-x:auto; padding-bottom:.5rem; scroll-snap-type:x mandatory; }
    .achievements-scroll::-webkit-scrollbar { height:6px; }
    .achievement-card { min-width:200px; scroll-snap-align:start; border-radius:1rem; padding:1rem; border:1px solid rgba(148,163,184,.25); background:rgba(248,250,252,.95); box-shadow:0 6px 16px rgba(15,23,42,.08); transition:transform .25s ease, box-shadow .25s ease; }
    .achievement-card:hover { transform:translateY(-2px); box-shadow:0 14px 32px rgba(15,23,42,.15); }
    .achievement-card-unlocked { background:linear-gradient(135deg,rgba(34,197,94,.18),rgba(16,185,129,.25)); border-color:rgba(34,197,94,.3); color:#064e3b; }
    .achievement-card-unlocked .achievement-xp { background:rgba(255,255,255,.4); color:#047857; }
    .achievement-card-locked { background:linear-gradient(135deg,rgba(148,163,184,.18),rgba(226,232,240,.45)); color:#1f2937; }
    .achievement-card-ready { border-color:rgba(251,191,36,.65); box-shadow:0 18px 38px rgba(251,191,36,.25); }
    .achievement-card-ready .achievement-progress-bar { background:linear-gradient(135deg,#fbbf24,#f97316); }
    .dark .achievement-card { background:rgba(15,23,42,.85); border-color:rgba(51,65,85,.6); box-shadow:0 8px 24px rgba(15,23,42,.4); color:#e2e8f0; }
    .dark .achievement-card-unlocked { background:linear-gradient(135deg,rgba(16,185,129,.35),rgba(5,150,105,.45)); border-color:rgba(16,185,129,.5); color:#d1fae5; }
    .dark .achievement-card-unlocked .achievement-xp { background:rgba(15,23,42,.35); color:#6ee7b7; }
    .dark .achievement-card-locked { background:linear-gradient(135deg,rgba(30,41,59,.7),rgba(51,65,85,.7)); color:#e2e8f0; }
    .achievement-icon { font-size:1.75rem; line-height:1; }
    .achievement-xp { font-size:.7rem; font-weight:700; padding:.25rem .6rem; border-radius:9999px; background:rgba(255,255,255,.65); color:#1e293b; text-transform:uppercase; letter-spacing:.08em; }
    .achievements-grid { display:grid; gap:1rem; grid-template-columns:repeat(auto-fit,minmax(220px,1fr)); }
    .achievement-progress-track { height:6px; border-radius:9999px; background:rgba(148,163,184,.35); overflow:hidden; }
    .achievement-progress-bar { height:100%; border-radius:9999px; background:linear-gradient(135deg,#38bdf8,#2563eb); transition:width .35s ease; }
    .dark .achievement-progress-track { background:rgba(71,85,105,.55); }
    .dark .achievement-progress-bar { background:linear-gradient(135deg,#38bdf8,#1d4ed8); }
    .student-nav { display:flex; flex-wrap:wrap; gap:.5rem; }
    .student-nav-btn { display:inline-flex; align-items:center; gap:.4rem; padding:.45rem .95rem; border-radius:9999px; border:1px solid rgba(148,163,184,.45); background:rgba(248,250,252,.75); color:#1e293b; font-weight:600; font-size:.85rem; transition:background-color .2s ease, color .2s ease, border-color .2s ease, box-shadow .2s ease; }
    .student-nav-btn:hover { background:#e2e8f0; }
    .student-nav-btn-active { background:#217346; border-color:#217346; color:#fff; box-shadow:0 10px 24px rgba(33,115,70,.25); }
    .dark .student-nav-btn { background:rgba(15,23,42,.75); border-color:rgba(71,85,105,.6); color:#e2e8f0; }
    .dark .student-nav-btn:hover { background:rgba(51,65,85,.65); }
    .dark .student-nav-btn-active { background:#2563eb; border-color:#2563eb; box-shadow:0 12px 26px rgba(37,99,235,.35); }
    .mission-list { list-style:none; margin:0; padding:0; display:grid; gap:.75rem; }
    .mission-item { display:flex; gap:.85rem; align-items:flex-start; border:1px solid rgba(148,163,184,.35); border-radius:1rem; padding:.75rem .95rem; background:#fff; box-shadow:0 4px 12px rgba(15,23,42,.04); transition:border-color .2s ease, box-shadow .2s ease, background-color .2s ease; }
    .mission-item:hover { box-shadow:0 10px 24px rgba(15,23,42,.08); }
    .mission-item-complete { border-color:rgba(34,197,94,.45); background:rgba(236,253,245,.8); box-shadow:0 14px 30px rgba(16,185,129,.25); }
    .mission-icon { flex:none; display:inline-flex; align-items:center; justify-content:center; width:2.5rem; height:2.5rem; border-radius:9999px; background:rgba(148,163,184,.2); font-size:1.25rem; color:#0f172a; box-shadow:inset 0 0 0 1px rgba(148,163,184,.3); }
    .mission-item-complete .mission-icon { background:rgba(16,185,129,.15); color:#047857; box-shadow:inset 0 0 0 1px rgba(16,185,129,.3); }
    .mission-content { flex:1; display:flex; flex-direction:column; gap:.35rem; }
    .mission-title { font-weight:600; font-size:.95rem; color:#0f172a; }
    .mission-description { font-size:.85rem; color:#475569; line-height:1.4; }
    .mission-status { font-size:.75rem; font-weight:600; color:#0f172a; display:inline-flex; align-items:center; gap:.35rem; text-transform:uppercase; letter-spacing:.04em; }
    .mission-item-complete .mission-status { color:#047857; }
    .mission-action-btn { align-self:flex-start; font-size:.8rem; padding:.35rem .75rem; border-radius:.6rem; }
    .dark .mission-item { background:rgba(15,23,42,.75); border-color:rgba(71,85,105,.5); box-shadow:0 4px 16px rgba(15,23,42,.35); }
    .dark .mission-item:hover { box-shadow:0 12px 28px rgba(15,23,42,.45); }
    .dark .mission-item-complete { background:rgba(22,163,74,.22); border-color:rgba(34,197,94,.45); box-shadow:0 18px 34px rgba(34,197,94,.3); }
    .dark .mission-icon { background:rgba(30,41,59,.85); color:#e2e8f0; box-shadow:inset 0 0 0 1px rgba(71,85,105,.6); }
    .dark .mission-item-complete .mission-icon { background:rgba(34,197,94,.2); color:#bbf7d0; box-shadow:inset 0 0 0 1px rgba(34,197,94,.45); }
    .dark .mission-title { color:#e2e8f0; }
    .dark .mission-description { color:#cbd5f5; }
    .dark .mission-status { color:#cbd5f5; }
    .dark .mission-item-complete .mission-status { color:#6ee7b7; }
    .app-nav { display:flex; flex-wrap:wrap; gap:.5rem 1.5rem; font-size:.9rem; font-weight:600; }
    .app-nav-link { position:relative; padding:.35rem 0; color:#1f2937; transition:color .2s ease; }
    .app-nav-link::after { content:''; position:absolute; left:0; bottom:-.35rem; width:100%; height:3px; border-radius:999px; background:transparent; transition:background-color .2s ease, transform .2s ease; transform:scaleX(0); transform-origin:left; }
    .app-nav-link:hover { color:#14532d; }
    .app-nav-link-active { color:#14532d; }
    .app-nav-link-active::after { background:#217346; transform:scaleX(1); }
    .app-nav-link[aria-disabled="true"] { color:#94a3b8; cursor:not-allowed; }
    .app-nav-link[aria-disabled="true"]::after { background:transparent; }
    .app-nav-link[aria-disabled="true"]:hover { color:#94a3b8; }
    .attachment-item { display:flex; align-items:center; justify-content:space-between; gap:1rem; padding:.65rem .9rem; border-radius:1rem; background:#f8fafc; border:1px solid rgba(148,163,184,.35); }
    .dark .attachment-item { background:rgba(15,23,42,.65); border-color:rgba(71,85,105,.55); }
    .attachment-info { display:flex; align-items:center; gap:.75rem; min-width:0; }
    .attachment-icon { width:2.25rem; height:2.25rem; border-radius:9999px; display:inline-flex; align-items:center; justify-content:center; background:rgba(33,115,70,.12); color:#217346; font-size:1.1rem; }
    .dark .attachment-icon { background:rgba(56,189,248,.15); color:#38bdf8; }
    .attachment-text { display:flex; flex-direction:column; gap:.15rem; min-width:0; }
    .attachment-name { font-weight:600; color:#0f172a; white-space:nowrap; overflow:hidden; text-overflow:ellipsis; }
    .dark .attachment-name { color:#e2e8f0; }
    .attachment-meta { font-size:.75rem; color:#64748b; }
    .dark .attachment-meta { color:#cbd5f5; }
    .attachment-remove { color:#dc2626; font-size:.75rem; font-weight:600; }
    .attachment-remove:hover { color:#b91c1c; }
    .forum-toolbar-btn { display:inline-flex; align-items:center; gap:.45rem; padding:.45rem .9rem; border-radius:.9rem; border:1px solid rgba(148,163,184,.35); background:rgba(248,250,252,.9); color:#475569; font-size:.85rem; font-weight:600; transition:color .2s ease, border-color .2s ease, box-shadow .2s ease, background-color .2s ease; }
    .forum-toolbar-btn:hover { color:#217346; border-color:rgba(33,115,70,.45); box-shadow:0 6px 16px rgba(33,115,70,.18); }
    .forum-toolbar-btn span:first-child { font-size:1.05rem; }
    .dark .forum-toolbar-btn { background:rgba(15,23,42,.7); border-color:rgba(71,85,105,.55); color:#cbd5f5; }
    .dark .forum-toolbar-btn:hover { color:#6ee7b7; border-color:rgba(45,212,191,.45); box-shadow:0 8px 20px rgba(15,118,110,.35); }
    .forum-toolbar-btn[aria-pressed="true"] { background:#217346; color:#fff; border-color:#217346; box-shadow:0 12px 26px rgba(33,115,70,.25); }
    .dark .forum-toolbar-btn[aria-pressed="true"] { background:#2563eb; border-color:#2563eb; color:#fff; box-shadow:0 12px 26px rgba(37,99,235,.35); }
    .info-toggle { display:inline-flex; align-items:center; justify-content:center; width:2.4rem; height:2.4rem; border-radius:9999px; border:1px solid rgba(148,163,184,.45); background:rgba(248,250,252,.95); color:#334155; font-weight:700; font-size:1rem; transition:background-color .2s ease,color .2s ease,border-color .2s ease,box-shadow .2s ease; }
    .info-toggle:hover { border-color:#217346; color:#14532d; box-shadow:0 10px 24px rgba(33,115,70,.2); }
    .info-toggle[aria-expanded="true"] { background:#217346; color:#fff; border-color:#217346; box-shadow:0 12px 28px rgba(33,115,70,.3); }
    .dark .info-toggle { background:rgba(15,23,42,.75); border-color:rgba(71,85,105,.55); color:#cbd5f5; }
    .dark .info-toggle:hover { color:#6ee7b7; border-color:rgba(45,212,191,.45); box-shadow:0 10px 24px rgba(45,212,191,.25); }
    .dark .info-toggle[aria-expanded="true"] { background:#2563eb; border-color:#2563eb; box-shadow:0 12px 26px rgba(37,99,235,.35); color:#fff; }
    .reaction-button { display:inline-flex; align-items:center; gap:.35rem; padding:.3rem .7rem; border-radius:9999px; border:1px solid rgba(148,163,184,.4); background:rgba(248,250,252,.9); color:#475569; font-size:.75rem; font-weight:600; transition:background-color .2s ease,color .2s ease,border-color .2s ease,box-shadow .2s ease; }
    .reaction-button:hover { border-color:rgba(33,115,70,.45); color:#14532d; box-shadow:0 8px 20px rgba(33,115,70,.18); }
    .reaction-button span:first-child { font-size:1rem; }
    .reaction-button-active { background:#217346; border-color:#217346; color:#fff; box-shadow:0 12px 26px rgba(33,115,70,.25); }
    .dark .reaction-button { background:rgba(15,23,42,.7); border-color:rgba(71,85,105,.55); color:#cbd5f5; }
    .dark .reaction-button:hover { color:#6ee7b7; border-color:rgba(45,212,191,.45); box-shadow:0 8px 20px rgba(45,212,191,.28); }
    .dark .reaction-button-active { background:#2563eb; border-color:#2563eb; color:#fff; box-shadow:0 12px 26px rgba(37,99,235,.35); }
    .notification-item { display:flex; flex-direction:column; gap:.35rem; padding:.75rem 1rem; border-radius:1rem; border:1px solid rgba(148,163,184,.35); background:rgba(248,250,252,.95); transition:border-color .2s ease, box-shadow .2s ease; }
    .notification-item-unread { border-color:rgba(37,99,235,.45); box-shadow:0 12px 26px rgba(37,99,235,.18); }
    .dark .notification-item { background:rgba(15,23,42,.82); border-color:rgba(71,85,105,.55); }
    .dark .notification-item-unread { border-color:rgba(59,130,246,.55); box-shadow:0 12px 26px rgba(59,130,246,.28); }
    .mention-panel { position:absolute; top:100%; left:0; margin-top:.6rem; min-width:240px; background:#fff; border:1px solid rgba(148,163,184,.35); border-radius:1rem; padding:1rem; box-shadow:0 18px 34px rgba(15,23,42,.18); z-index:40; }
    .dark .mention-panel { background:rgba(15,23,42,.95); border-color:rgba(71,85,105,.65); box-shadow:0 18px 34px rgba(0,0,0,.5); }
    .mention-option { width:100%; display:flex; flex-direction:column; gap:.2rem; align-items:flex-start; padding:.55rem .8rem; border-radius:.85rem; border:1px solid transparent; background:rgba(248,250,252,.85); color:#1f2937; font-size:.85rem; font-weight:500; transition:border-color .2s ease, background-color .2s ease, color .2s ease; }
    .mention-option:hover { border-color:rgba(33,115,70,.45); background:rgba(222,247,236,.95); color:#14532d; }
    .dark .mention-option { background:rgba(30,41,59,.85); color:#e2e8f0; }
    .dark .mention-option:hover { border-color:rgba(56,189,248,.5); background:rgba(30,64,175,.4); color:#bae6fd; }
    .mention-option-label { font-weight:600; }
    .mention-option-meta { font-size:.75rem; color:#64748b; }
    .dark .mention-option-meta { color:#94a3b8; }
    .mention-chip { display:inline-flex; align-items:center; gap:.35rem; padding:.3rem .65rem; border-radius:9999px; background:rgba(33,115,70,.12); color:#14532d; font-size:.75rem; font-weight:600; }
    .mention-chip-remove { border:0; background:transparent; color:inherit; font-weight:700; line-height:1; padding:0; cursor:pointer; }
    .mention-chip-remove:hover { opacity:.75; }
    .mention-tag { color:#14532d; font-weight:600; }
    .dark .mention-chip { background:rgba(56,189,248,.2); color:#38bdf8; }
    .dark .mention-chip-remove { color:inherit; }
    .dark .mention-tag { color:#6ee7b7; }
    .mention-pill { display:inline-flex; align-items:center; padding:.25rem .6rem; border-radius:9999px; background:rgba(33,115,70,.1); color:#166534; font-weight:600; }
    .dark .mention-pill { background:rgba(56,189,248,.18); color:#bae6fd; }
    .podium-card { position:relative; border-radius:1.5rem; padding:1.5rem 1.25rem; background:linear-gradient(135deg,rgba(148,163,184,.1),rgba(226,232,240,.45)); text-align:center; box-shadow:0 14px 35px rgba(15,23,42,.12); }
    .podium-card-first { background:linear-gradient(135deg,#fbbf24,#f59e0b); color:#78350f; box-shadow:0 24px 45px rgba(251,191,36,.35); }
    .podium-card-second { background:linear-gradient(135deg,#e2e8f0,#cbd5f5); color:#1f2937; }
    .podium-card-third { background:linear-gradient(135deg,#fed7aa,#fdba74); color:#7c2d12; }
    .dark .podium-card { background:linear-gradient(135deg,rgba(30,41,59,.75),rgba(51,65,85,.75)); box-shadow:0 14px 35px rgba(15,23,42,.45); }
    .dark .podium-card-first { background:linear-gradient(135deg,#f59e0b,#b45309); color:#fff; }
    .dark .podium-card-second { background:linear-gradient(135deg,#475569,#334155); color:#e2e8f0; }
    .dark .podium-card-third { background:linear-gradient(135deg,#fbbf24,#f97316); color:#fff; }
    .podium-rank { font-size:.85rem; letter-spacing:.08em; text-transform:uppercase; font-weight:700; opacity:.85; }
    .podium-name { font-size:1.1rem; font-weight:700; margin-top:.35rem; }
    .podium-score { font-size:.85rem; color:rgba(15,23,42,.7); }
    .dark .podium-score { color:rgba(226,232,240,.8); }
    .leaderboard-row { display:grid; grid-template-columns:minmax(0,1fr) auto; gap:.75rem; padding:.65rem 1rem; }
    .leaderboard-row:nth-child(even) { background:rgba(148,163,184,.15); }
    .dark .leaderboard-row:nth-child(even) { background:rgba(30,41,59,.55); }
    .leaderboard-name { font-weight:600; color:#1f2937; }
    .dark .leaderboard-name { color:#e2e8f0; }
    .leaderboard-meta { font-size:.75rem; color:#64748b; }
    .dark .leaderboard-meta { color:#cbd5f5; }
    .privacy-chip { display:inline-flex; align-items:center; gap:.3rem; padding:.25rem .65rem; border-radius:9999px; font-size:.7rem; font-weight:600; background:rgba(59,130,246,.15); color:#1d4ed8; }
    .privacy-chip-private { background:rgba(234,179,8,.18); color:#92400e; }
    .dark .privacy-chip { background:rgba(37,99,235,.25); color:#bfdbfe; }
    .dark .privacy-chip-private { background:rgba(251,191,36,.2); color:#fde68a; }
  </style>
</head>
<body class="bg-slate-50 dark:bg-slate-900 text-slate-900 dark:text-slate-100 min-h-screen">

  <div id="toastContainer" class="fixed top-4 inset-x-4 sm:inset-x-6 lg:inset-x-auto lg:right-12 lg:left-auto z-50 flex w-full max-w-sm flex-col gap-3 mx-auto lg:mx-0"></div>
  <div id="actionLoader" class="fixed inset-0 z-40 hidden flex items-center justify-center bg-white/70 dark:bg-slate-900/70 backdrop-blur-sm">
    <div class="flex flex-col items-center gap-3">
      <div class="h-12 w-12 rounded-full border-4 border-primary/30 border-t-primary animate-spin"></div>
      <p id="actionLoaderLabel" class="text-sm font-semibold text-primary dark:text-emerald-200">Processando...</p>
    </div>
  </div>

<header class="sticky top-0 z-20 bg-white/80 dark:bg-slate-900/80 backdrop-blur border-b border-slate-200 dark:border-slate-700">
  <div class="w-full px-6 lg:px-12 py-4 space-y-4">
    <div class="flex flex-col gap-3 md:flex-row md:items-center">
      <div>
        <p class="text-xs font-semibold uppercase tracking-wide text-primary/70">Trilha intensiva de 24 encontros</p>
        <h1 class="text-2xl font-semibold text-primary">Excel do Zero ao Avançado</h1>
      </div>
      <div class="md:ml-auto flex items-center gap-2">
        <span id="userInfo" class="pill">Visitante</span>
        <button id="btnLogout" class="btn btn-ghost hidden">Sair</button>
      </div>
    </div>
    <nav aria-label="Navegação principal">
      <ul id="primaryNav" class="app-nav">
        <li><a href="/inicio" class="app-nav-link" data-app-route="inicio" data-requires-auth="true">Início</a></li>
        <li><a href="/forum" class="app-nav-link" data-app-route="forum" data-requires-auth="true">Fórum</a></li>
        <li><a href="/conquistas" class="app-nav-link" data-app-route="conquistas">Conquistas</a></li>
        <li><a href="/aulas" class="app-nav-link" data-app-route="aulas">Aulas &amp; Atividades</a></li>
        <li><a href="/admin" class="app-nav-link" data-app-route="admin" data-requires-auth="true" data-requires-admin="true">Admin</a></li>
        <li><a href="/sobre" class="app-nav-link" data-app-route="sobre">Sobre</a></li>
      </ul>
    </nav>
    <nav id="headerBreadcrumbs" class="hidden text-xs sm:text-sm text-slate-500 dark:text-slate-400" aria-label="Breadcrumb">
      <ol class="flex items-center gap-2">
        <li class="flex items-center gap-2">
          <span class="opacity-75">Início</span>
          <span aria-hidden="true" class="text-slate-300">/</span>
        </li>
        <li id="breadcrumbDashboard" class="flex items-center gap-2 font-semibold text-slate-700 dark:text-slate-100">
          Dashboard
        </li>
        <li id="breadcrumbSubPage" class="hidden items-center gap-2 font-semibold text-slate-700 dark:text-slate-100">
          <span aria-hidden="true" class="text-slate-300">/</span>
          <span id="breadcrumbSubPageLabel"></span>
        </li>
        <li id="breadcrumbAdmin" class="hidden flex items-center gap-2 font-semibold text-slate-700 dark:text-slate-100">
          <span aria-hidden="true" class="text-slate-300">/</span>
          Administração
        </li>
      </ol>
    </nav>
  </div>
</header>

<?!= include('dashboard'); ?>

<script>
  // Estado simples no front
  let currentUser = null;
  let currentSessionToken = null;
  let sessionExpiryNotified = false;
  let rememberPreference = false;
  let pendingConfirmation = null;
  let confirmationTimer = null;
  let currentAuthMode = 'login';
  let hasLoadedEmbeds = false;
  const STORAGE_KEY = 'excelPlatformSession';
  const SESSION_STORAGE_KEY = 'excelPlatformSessionTemp';
  const SESSION_EXPIRED_FALLBACK = 'Sessão expirada. Faça login novamente.';
  const COMMUNITY_ATTACHMENT_MAX_BYTES = 10 * 1024 * 1024;
  const USER_MATERIAL_MAX_BYTES = 20 * 1024 * 1024;
  const actionLoaderEl = document.getElementById('actionLoader');
  const actionLoaderLabelEl = document.getElementById('actionLoaderLabel');
  let actionLoaderDepth = 0;

  function startActionLoading(message) {
    actionLoaderDepth += 1;
    if (actionLoaderEl) {
      actionLoaderEl.classList.remove('hidden');
    }
    if (actionLoaderLabelEl) {
      actionLoaderLabelEl.textContent = message || actionLoaderLabelEl.textContent || 'Processando...';
    }
  }

  function stopActionLoading(force = false) {
    if (force) {
      actionLoaderDepth = 0;
    } else if (actionLoaderDepth > 0) {
      actionLoaderDepth -= 1;
    }
    if (actionLoaderDepth <= 0) {
      actionLoaderDepth = 0;
      if (actionLoaderEl) {
        actionLoaderEl.classList.add('hidden');
      }
    }
  }

  function createActionLoader(message) {
    startActionLoading(message);
    let active = true;
    return {
      finish() {
        if (!active) return;
        active = false;
        stopActionLoading();
      },
      update(text) {
        if (!active || !actionLoaderLabelEl || !text) return;
        actionLoaderLabelEl.textContent = text;
      }
    };
  }

  function persistSession(token, user, options = {}) {
    if (!token || !user || !user.id) return;
    currentSessionToken = token;
    sessionExpiryNotified = false;
    const remember = options && Object.prototype.hasOwnProperty.call(options, 'remember')
      ? !!options.remember
      : rememberPreference;
    rememberPreference = remember;
    const payload = {
      token,
      userId: user.id,
      name: user.name,
      isAdmin: !!user.isAdmin,
    };
    if (remember) {
      try {
        localStorage.setItem(STORAGE_KEY, JSON.stringify(payload));
      } catch (err) {
        console.warn('Não foi possível salvar sessão local:', err);
      }
      try {
        sessionStorage.removeItem(SESSION_STORAGE_KEY);
      } catch (err) {
        console.warn('Não foi possível limpar sessão temporária:', err);
      }
    } else {
      try {
        localStorage.removeItem(STORAGE_KEY);
      } catch (err) {
        console.warn('Não foi possível limpar sessão local:', err);
      }
      try {
        sessionStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify(payload));
      } catch (err) {
        console.warn('Não foi possível salvar sessão temporária:', err);
      }
    }
  }

  function clearStoredSession() {
    currentSessionToken = null;
    rememberPreference = false;
    hasLoadedEmbeds = false;
    if (typeof rememberMeCheckbox !== 'undefined' && rememberMeCheckbox) {
      rememberMeCheckbox.checked = false;
    }
    try {
      localStorage.removeItem(STORAGE_KEY);
    } catch (err) {
      console.warn('Não foi possível limpar sessão local:', err);
    }
    try {
      sessionStorage.removeItem(SESSION_STORAGE_KEY);
    } catch (err) {
      console.warn('Não foi possível limpar sessão temporária:', err);
    }
  }

  function getSessionToken() {
    if (currentSessionToken) return currentSessionToken;
    const stored = getStoredSession();
    if (stored && stored.token) {
      currentSessionToken = stored.token;
      return currentSessionToken;
    }
    return null;
  }

  function getStoredSession() {
    const parse = (raw, source) => {
      if (!raw) return null;
      try {
        const parsed = JSON.parse(raw);
        if (!parsed || typeof parsed !== 'object' || !parsed.token) {
          return null;
        }
        return parsed;
      } catch (err) {
        console.warn(`Não foi possível ler sessão ${source}:`, err);
        return null;
      }
    };
    let fromLocal = null;
    try {
      fromLocal = parse(localStorage.getItem(STORAGE_KEY), 'local');
    } catch (err) {
      console.warn('Não foi possível acessar armazenamento local:', err);
    }
    if (fromLocal) return fromLocal;
    try {
      return parse(sessionStorage.getItem(SESSION_STORAGE_KEY), 'temporária');
    } catch (err) {
      console.warn('Não foi possível acessar armazenamento de sessão:', err);
      return null;
    }
  }

  function extractErrorMessage(error) {
    if (!error) return '';
    if (typeof error === 'string') return error;
    if (error && typeof error === 'object' && typeof error.error === 'string') {
      return error.error;
    }
    if (error && typeof error === 'object' && error.error && typeof error.error.message === 'string') {
      return error.error.message;
    }
    if (typeof error.message === 'string') return error.message;
    if (typeof error.details === 'string') return error.details;
    return '';
  }

  function isSessionErrorMessage(message) {
    if (!message) return false;
    const normalized = message.toLowerCase();
    if (!normalized.includes('sessão')) return false;
    return normalized.includes('expirad') || normalized.includes('inválid') || normalized.includes('inval');
  }

  function expireSession(message) {
    const text = (message || '').toString().trim() || SESSION_EXPIRED_FALLBACK;
    const hadUser = !!currentUser;
    clearStoredSession();
    currentUser = null;
    if (hadUser) {
      if (!sessionExpiryNotified) {
        sessionExpiryNotified = true;
        showToast({ message: text, type: 'warning' });
      }
    } else {
      sessionExpiryNotified = false;
    }
    updateUI({ skipAchievements: true, skipCommunity: true, silentAchievements: true });
  }

  function handleSessionExpiredError(error, options = {}) {
    const message = extractErrorMessage(error);
    const isSessionError = isSessionErrorMessage(message)
      || (error && typeof error === 'object' && error.name === 'SessionError');
    if (!isSessionError) return false;
    const finalMessage = message || SESSION_EXPIRED_FALLBACK;
    if (typeof options.onHandled === 'function') {
      try {
        options.onHandled(finalMessage);
      } catch (callbackErr) {
        console.error(callbackErr);
      }
    }
    expireSession(finalMessage);
    return true;
  }

  // Helpers
  const $ = s => document.querySelector(s);
  const normalizeEmbed = url => {
    if (!url) return '';
    if (url.includes('onedrive') || url.includes('sharepoint')) {
      if (url.includes('embed')) return url;
      return 'https://view.officeapps.live.com/op/embed.aspx?src=' + encodeURIComponent(url);
    }
    if (url.includes('drive.google.com')) {
      return url.replace('/view?usp=sharing','/preview');
    }
    return url;
  };

  const adminOnlyElements = Array.from(document.querySelectorAll('[data-admin-only]'));
  function escapeHtml(text) {
    return (text || '').toString()
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#39;');
  }
  const excelLinkInput = $('#excelLink');
  const pptLinkInput = $('#pptLink');
  const excelFrameEl = $('#excelFrame');
  const pptFrameEl = $('#pptFrame');
  const btnSaveEmbeds = $('#btnSaveEmbeds');
  const btnLoadEmbeds = $('#btnLoadEmbeds');
  const resourcesInputEl = $('#resourcesInput');
  const eventsInputEl = $('#eventsInput');
  const resourcesListEl = $('#resourcesList');
  const resourcesEmptyEl = $('#resourcesEmpty');
  const eventsListEl = $('#eventsList');
  const eventsEmptyEl = $('#eventsEmpty');
  const adminExcelListEl = $('#adminExcelList');
  const adminExcelEmptyEl = $('#adminExcelEmpty');
  const adminPptListEl = $('#adminPptList');
  const adminPptEmptyEl = $('#adminPptEmpty');
  const userFolderLinkEl = $('#userFolderLink');
  const userFolderHintEl = $('#userFolderHint');
  const btnUploadExcel = $('#btnUploadExcel');
  const btnUploadPpt = $('#btnUploadPpt');
  const uploadExcelInput = $('#uploadExcelInput');
  const uploadPptInput = $('#uploadPptInput');
  const userExcelListEl = $('#userExcelList');
  const userExcelEmptyEl = $('#userExcelEmpty');
  const userPptListEl = $('#userPptList');
  const userPptEmptyEl = $('#userPptEmpty');
  const resourcesEmptyDefaultText = resourcesEmptyEl ? resourcesEmptyEl.textContent : '';
  const eventsEmptyDefaultText = eventsEmptyEl ? eventsEmptyEl.textContent : '';
  const adminExcelEmptyDefaultText = adminExcelEmptyEl ? adminExcelEmptyEl.textContent : '';
  const adminPptEmptyDefaultText = adminPptEmptyEl ? adminPptEmptyEl.textContent : '';
  const userExcelEmptyDefaultText = userExcelEmptyEl ? userExcelEmptyEl.textContent : '';
  const userPptEmptyDefaultText = userPptEmptyEl ? userPptEmptyEl.textContent : '';
  const userFolderHintDefaultText = userFolderHintEl ? userFolderHintEl.textContent : '';
  const MATERIAL_ACCEPT = {
    excel: {
      mime: [
        'application/vnd.ms-excel',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'application/vnd.ms-excel.sheet.macroEnabled.12',
        'text/csv',
        'application/vnd.oasis.opendocument.spreadsheet'
      ],
      extensions: ['.xls', '.xlsx', '.xlsm', '.csv', '.ods']
    },
    ppt: {
      mime: [
        'application/vnd.ms-powerpoint',
        'application/vnd.openxmlformats-officedocument.presentationml.presentation',
        'application/vnd.ms-powerpoint.slide.macroEnabled.12',
        'application/vnd.ms-powerpoint.presentation.macroEnabled.12',
        'application/vnd.ms-powerpoint.slideshow.macroEnabled.12',
        'application/vnd.openxmlformats-officedocument.presentationml.slideshow',
        'application/vnd.oasis.opendocument.presentation'
      ],
      extensions: ['.ppt', '.pptx', '.pps', '.ppsx', '.odp']
    }
  };
  const loginForm = $('#loginForm');
  const loginCardEl = $('#loginCard');
  const signupCardEl = $('#signupCard');
  const confirmCardEl = $('#confirmCard');
  const rememberMeCheckbox = $('#rememberMe');
  const toggleSignupBtn = $('#toggleSignup');
  const toggleLoginBtn = $('#toggleLogin');
  const confirmForm = $('#confirmForm');
  const confirmEmailInput = $('#confirmationEmail');
  const confirmCodeInput = $('#confirmationCode');
  const confirmMsgEl = $('#confirmMsg');
  const btnConfirmSignup = $('#btnConfirmSignup');
  const btnResendConfirmation = $('#btnResendConfirmation');
  const confirmBackToLoginBtn = $('#confirmBackToLogin');
  const confirmationCountdownEl = $('#confirmationCountdown');
  const communityFormWrap = $('#communityFormWrap');
  const communityGuestNotice = $('#communityGuestNotice');
  const communityTextarea = $('#communityMessage');
  const communityCounterEl = $('#communityCounter');
  const communityFeedbackEl = $('#communityFormFeedback');
  const communityPublishBtn = $('#btnCommunityPublish');
  const communityListEl = $('#communityWallList');
  const communityEmptyEl = $('#communityWallEmpty');
  const communityEmptyDefaultHtml = communityEmptyEl ? communityEmptyEl.innerHTML : '';
  const communityLimitBadge = $('#communityLimitBadge');
  const communityPrivacySelect = $('#communityPrivacySelect');
  const communityTargetsWrap = $('#communityTargetsWrap');
  const communityTargetsSelect = $('#communityTargets');
  const communityAttachmentInput = $('#communityAttachmentInput');
  const communityAttachmentList = $('#communityAttachmentList');
  const communityMentionChips = $('#communityMentionChips');
  const communityMentionToggle = $('#communityMentionToggle');
  const communityMentionPanel = $('#communityMentionPanel');
  const communityMentionSearch = $('#communityMentionSearch');
  const communityMentionList = $('#communityMentionList');
  const communityMentionEmpty = $('#communityMentionEmpty');
  const communityMentionWrap = $('#communityMentionWrap');
  const forumInfoToggle = $('#forumInfoToggle');
  const forumInfoPanel = $('#forumInfoPanel');
  const communityModeToggle = $('#communityModeToggle');
  const communityModeButtons = Array.from(document.querySelectorAll('[data-community-mode]'));
  const communityModeHint = $('#communityModeHint');
  const communityMessageForm = $('#communityMessageForm');
  const forumIdeaForm = $('#forumIdeaForm');
  const forumIdeaTitleInput = $('#forumIdeaTitle');
  const forumIdeaImpactSelect = $('#forumIdeaImpact');
  const forumIdeaSummaryInput = $('#forumIdeaSummary');
  const forumIdeaBenefitInput = $('#forumIdeaBenefit');
  const forumIdeaTagsInput = $('#forumIdeaTags');
  const forumIdeaVisibilitySelect = $('#forumIdeaVisibility');
  const forumIdeaTargetsSelect = $('#forumIdeaTargets');
  const forumIdeaFormFeedback = $('#forumIdeaFormFeedback');
  const btnSubmitIdea = $('#btnSubmitIdea');
  const forumPollForm = $('#forumPollForm');
  const forumPollQuestionInput = $('#forumPollQuestion');
  const forumPollDescriptionInput = $('#forumPollDescription');
  const forumPollOptionsWrap = $('#forumPollOptions');
  const btnAddPollOption = $('#btnAddPollOption');
  const forumPollAudienceSelect = $('#forumPollAudience');
  const forumPollClosingInput = $('#forumPollClosing');
  const forumPollAllowMultiple = $('#forumPollAllowMultiple');
  const forumPollAllowUpdate = $('#forumPollAllowUpdate');
  const forumPollVisibilitySelect = $('#forumPollVisibility');
  const forumPollTargetsSelect = $('#forumPollTargets');
  const forumPollFormFeedback = $('#forumPollFormFeedback');
  const btnSubmitPoll = $('#btnSubmitPoll');
  const forumQuestionForm = $('#forumQuestionForm');
  const forumQuestionSubjectInput = $('#forumQuestionSubject');
  const forumQuestionDetailsInput = $('#forumQuestionDetails');
  const forumQuestionScopeRadios = Array.from(document.querySelectorAll('input[name="forumQuestionScope"]'));
  const forumQuestionVisibilitySelect = $('#forumQuestionVisibility');
  const forumQuestionTargetsSelect = $('#forumQuestionTargets');
  const forumQuestionFormFeedback = $('#forumQuestionFormFeedback');
  const btnSubmitQuestion = $('#btnSubmitQuestion');
  const forumIdeaListEl = $('#forumIdeaList');
  const forumIdeaCountEl = $('#forumIdeaCount');
  const forumIdeaEmptyEl = $('#forumIdeaEmpty');
  const forumQuestionListEl = $('#forumQuestionList');
  const forumQuestionEmptyEl = $('#forumQuestionEmpty');
  const forumLatestListEl = $('#forumLatestList');
  const forumLatestBadgeEl = $('#forumLatestBadge');
  const forumLatestEmptyEl = $('#forumLatestEmpty');
  const forumNotificationListEl = $('#forumNotificationList');
  const forumNotificationBadgeEl = $('#forumNotificationBadge');
  const forumNotificationEmptyEl = $('#forumNotificationEmpty');
  const btnForumNotificationsRead = $('#btnForumNotificationsRead');
  const forumPollSummaryEl = $('#forumPollSummary');
  const achievementsAdminNoticeEl = $('#achievementsAdminNotice');
  const achievementsLeaderboardEl = $('#achievementsLeaderboard');
  const achievementsPodiumEl = $('#achievementsPodium');
  const achievementsLeaderboardTableEl = $('#achievementsLeaderboardTable');
  const achievementsRankingBadgeEl = $('#achievementsRankingBadge');
  const achievementsAdminNoticeDefaultText = achievementsAdminNoticeEl
    ? achievementsAdminNoticeEl.textContent
    : '';
  const primaryNavEl = $('#primaryNav');
  const appPageSections = Array.from(document.querySelectorAll('[data-app-page]'));
  const appNavLinks = Array.from(document.querySelectorAll('[data-app-route]'));
  const achievementsHeroStatsEl = $('#achievementsHeroStats');
  const aboutHighlightsEl = $('#aboutHighlights');
  const aboutModuleGridEl = $('#aboutModuleGrid');
  const learningTracksContainerEl = $('#learningTracksContainer');
  const learningAssessmentsEl = $('#learningAssessments');
  const forumPollListEl = $('#forumPollList');
  const adminBulletinViewEl = $('#adminBulletinView');
  const adminBulletinEditorEl = $('#adminBulletinEditor');
  const adminBulletinInputEl = $('#adminBulletinInput');
  const adminBulletinEmptyEl = $('#adminBulletinEmpty');
  const btnSaveBulletinEl = $('#btnSaveBulletin');
  const btnDiscardBulletinEl = $('#btnDiscardBulletin');
  const adminMissionListEl = $('#adminMissionList');
  const missionTitleInput = $('#missionTitle');
  const missionDescriptionInput = $('#missionDescription');
  const missionXPInput = $('#missionXP');
  const missionValidityInput = $('#missionValidity');
  const missionAudienceSelect = $('#missionAudience');
  const missionAttachmentsInput = $('#missionAttachments');
  const btnLaunchMission = $('#btnLaunchMission');
  const btnResetMission = $('#btnResetMission');
  const adminMissionFormEl = $('#adminMissionForm');
  const headerBreadcrumbs = $('#headerBreadcrumbs');
  const breadcrumbAdminItem = $('#breadcrumbAdmin');
  const breadcrumbSubPageItem = $('#breadcrumbSubPage');
  const breadcrumbSubPageLabel = $('#breadcrumbSubPageLabel');
  const studentHeroGreetingEl = $('#studentHeroGreeting');
  const studentNarrativeEl = $('#studentNarrative');
  const studentHeroStatsEl = $('#studentHeroStats');
  const nextLessonPreviewEl = $('#nextLessonPreview');
  const nextLessonProgressHintEl = $('#nextLessonProgressHint');
  const studentHeroGuidanceEl = $('#studentHeroGuidance');
  const dailyMissionListEl = $('#dailyMissionList');
  const studentSubPageSection = $('#studentSubPageSection');
  const studentSubPageTitleEl = $('#studentSubPageTitle');
  const studentSubPageSubtitleEl = $('#studentSubPageSubtitle');
  const studentSubPageLoadingEl = $('#studentSubPageLoading');
  const studentSubPageErrorEl = $('#studentSubPageError');
  const studentSubPageContainer = $('#studentSubPageContainer');
  const homeOnlySections = Array.from(document.querySelectorAll('[data-home-only]'));
  let communityCharLimit = 240;
  let isPublishingCommunity = false;
  const communityState = {
    attachments: [],
    uploading: 0,
    mentions: [],
    mentionSearch: '',
    mentionPickerOpen: false,
    shareableUsers: [],
    loadedShareableUsers: false,
    privacy: 'public'
  };
  const communityDateFormatter = typeof Intl !== 'undefined'
    ? new Intl.DateTimeFormat('pt-BR', { dateStyle: 'short', timeStyle: 'short' })
    : null;
  const shortDateFormatter = typeof Intl !== 'undefined'
    ? new Intl.DateTimeFormat('pt-BR', { dateStyle: 'short' })
    : null;
  const timeFormatter = typeof Intl !== 'undefined'
    ? new Intl.DateTimeFormat('pt-BR', { hour: '2-digit', minute: '2-digit' })
    : null;

  const toastContainer = $('#toastContainer');
  const toastVariants = {
    success: {
      toast: 'bg-emerald-600 text-white focus-visible:ring-emerald-200',
      close: 'bg-white/20 text-white hover:bg-white/30 focus-visible:ring-white'
    },
    error: {
      toast: 'bg-rose-600 text-white focus-visible:ring-rose-200',
      close: 'bg-white/20 text-white hover:bg-white/30 focus-visible:ring-white'
    },
    warning: {
      toast: 'bg-amber-500 text-slate-900 focus-visible:ring-amber-200',
      close: 'bg-black/10 text-slate-900 hover:bg-black/20 focus-visible:ring-amber-700'
    }
  };

  const TOTAL_MODULES = 24;
  const moduleCatalog = [
    { number: 1, title: 'Boas-vindas ao Excel', tagline: 'Explore a interface e prepare sua primeira planilha.', focus: 'Interface e navegação básicas', xpTarget: 30, keySkills: ['Interface do Excel', 'Faixas de opções', 'Atalhos essenciais'] },
    { number: 2, title: 'Formatação Essencial', tagline: 'Deixe as planilhas legíveis e profissionais.', focus: 'Formatação de células e estilos', xpTarget: 35, keySkills: ['Formatos numéricos', 'Estilos e temas', 'Formatação condicional'] },
    { number: 3, title: 'Fórmulas Fundamentais', tagline: 'Crie cálculos com as funções básicas.', focus: 'Funções SOMA, MÉDIA e contagens', xpTarget: 35, keySkills: ['SOMA', 'MÉDIA', 'CONT.SE'] },
    { number: 4, title: 'Funções Condicionais', tagline: 'Tome decisões com SE e comparações.', focus: 'Funções SE, E e OU', xpTarget: 40, keySkills: ['SE', 'SE aninhado', 'E/OU'] },
    { number: 5, title: 'Funções de Texto', tagline: 'Manipule informações textuais.', focus: 'Combinação e limpeza de textos', xpTarget: 35, keySkills: ['CONCAT', 'ESQUERDA/DIREITA', 'PROCURAR'] },
    { number: 6, title: 'Funções de Data e Hora', tagline: 'Controle prazos e agendas com precisão.', focus: 'Cálculos com datas e horas', xpTarget: 35, keySkills: ['HOJE', 'DIASÚTEIS', 'DATEDIF'] },
    { number: 7, title: 'Funções de Pesquisa', tagline: 'Localize dados em tabelas grandes.', focus: 'PROCV, PROCX e CORRESP', xpTarget: 40, keySkills: ['PROCV', 'PROCX', 'ÍNDICE + CORRESP'] },
    { number: 8, title: 'Tabelas Inteligentes', tagline: 'Organize dados com tabelas formatadas.', focus: 'Tabelas estruturadas e filtros dinâmicos', xpTarget: 35, keySkills: ['Formatar como tabela', 'Referências estruturadas', 'Totalizadores automáticos'] },
    { number: 9, title: 'Tabelas Dinâmicas Essenciais', tagline: 'Resuma grandes volumes rapidamente.', focus: 'Construção e análise com tabelas dinâmicas', xpTarget: 45, keySkills: ['Montagem de pivô', 'Segmentações', 'Atualizações e layout'] },
    { number: 10, title: 'Gráficos que Contam Histórias', tagline: 'Transforme números em visualizações impactantes.', focus: 'Gráficos de colunas, linhas e combinação', xpTarget: 40, keySkills: ['Tipos de gráfico', 'Formatar série', 'Linhas de tendência'] },
    { number: 11, title: 'Validação e Proteção', tagline: 'Garanta a qualidade das informações registradas.', focus: 'Validação de dados e proteção de planilhas', xpTarget: 35, keySkills: ['Validação de dados', 'Listas suspensas', 'Proteção de planilhas'] },
    { number: 12, title: 'Filtros Avançados', tagline: 'Crie filtros poderosos e personalizados.', focus: 'Filtros avançados e critérios com fórmulas', xpTarget: 35, keySkills: ['Filtros personalizados', 'Remover duplicatas', 'Segmentações avançadas'] },
    { number: 13, title: 'Análise de Cenários', tagline: 'Projete diferentes cenários de negócio.', focus: 'Tabela de dados e gerente de cenários', xpTarget: 40, keySkills: ['Tabela de dados', 'Gerenciador de cenários', 'Atingir meta'] },
    { number: 14, title: 'Solver e Otimização', tagline: 'Tome decisões ótimas com restrições reais.', focus: 'Solver e análise de sensibilidade', xpTarget: 45, keySkills: ['Solver', 'Restrições', 'Relatórios de resposta'] },
    { number: 15, title: 'Funções Estatísticas', tagline: 'Descubra padrões com estatística aplicada.', focus: 'Indicadores estatísticos no Excel', xpTarget: 40, keySkills: ['MÉDIASES', 'DESVPAD', 'CORREL'] },
    { number: 16, title: 'Dashboards Básicos', tagline: 'Monte painéis limpos e objetivos.', focus: 'Layout e indicadores visuais', xpTarget: 45, keySkills: ['Layout de dashboard', 'Cartões de indicador', 'Gráficos combinados'] },
    { number: 17, title: 'Dashboards Interativos', tagline: 'Dê vida aos seus painéis com interação.', focus: 'Segmentações e controles dinâmicos', xpTarget: 50, keySkills: ['Segmentações', 'Botões', 'Painéis dinâmicos'] },
    { number: 18, title: 'Automação com Macros', tagline: 'Grave rotinas para ganhar tempo todos os dias.', focus: 'Gravação e execução de macros', xpTarget: 45, keySkills: ['Gravar macros', 'Executar macros', 'Botões com macros'] },
    { number: 19, title: 'Introdução ao VBA', tagline: 'Edite código e personalize automações.', focus: 'Estruturas básicas no VBA', xpTarget: 50, keySkills: ['Editor VBA', 'Variáveis', 'Estruturas condicionais'] },
    { number: 20, title: 'Integrações com Office', tagline: 'Conecte o Excel com outras ferramentas da suíte.', focus: 'Integração com PowerPoint e Word', xpTarget: 35, keySkills: ['Copiar especial', 'Atualizar gráficos no PowerPoint', 'Publicar relatórios em PDF'] },
    { number: 21, title: 'Power Query Essencial', tagline: 'Importe e transforme dados rapidamente.', focus: 'ETL com Power Query', xpTarget: 50, keySkills: ['Importar dados', 'Transformações', 'Mesclar consultas'] },
    { number: 22, title: 'Power Pivot e Modelagem', tagline: 'Crie modelos com múltiplas tabelas conectadas.', focus: 'Modelagem relacional e medidas DAX básicas', xpTarget: 55, keySkills: ['Modelagem relacional', 'Medidas DAX', 'KPIs'] },
    { number: 23, title: 'Análise Avançada com DAX', tagline: 'Aprofunde os cálculos do Power Pivot.', focus: 'Funções DAX intermediárias', xpTarget: 60, keySkills: ['CALCULATE', 'Inteligência de tempo', 'Medidas compostas'] },
    { number: 24, title: 'Projeto Final', tagline: 'Consolide tudo em um projeto completo.', focus: 'Projeto integrador e apresentação de insights', xpTarget: 80, keySkills: ['Planejamento do projeto', 'Apresentação final', 'Feedback da turma'] }
  ];

  const weeklySideQuests = [
    { title: 'Planejar a semana', description: 'Revise sua agenda e defina quando você fará o próximo módulo.' },
    { title: 'Revisar anotações recentes', description: 'Leia as notas do último módulo concluído e destaque um aprendizado para aplicar hoje.' },
    { title: 'Praticar atalhos de teclado', description: 'Escolha três atalhos para usar durante o dia e ganhar agilidade nas planilhas.' },
    { title: 'Compartilhar no mural', description: 'Publique uma dica rápida ou insight no mural da comunidade.' },
    { title: 'Atualizar uma planilha real', description: 'Aplique os conceitos do curso em uma planilha do seu cotidiano profissional.' },
    { title: 'Checar conquistas pendentes', description: 'Veja quais conquistas estão próximas e planeje os próximos passos.' },
    { title: 'Organizar materiais de estudo', description: 'Separe arquivos e recursos que serão úteis para o próximo módulo.' }
  ];

  const aboutHighlightsData = [
    { label: 'Encontros ao vivo', value: '24', description: 'Sessões de 60 minutos + laboratório guiado.' },
    { label: 'Meta de XP do ciclo', value: '300 XP', description: 'Soma dos check-ins diários (1 + … + 24).' },
    { label: 'Blocos de conteúdo', value: '4', description: 'Fundamentos, Análise, Automação e Power BI.' },
    { label: 'Formato', value: 'Check-in diário', description: 'Missões rápidas, fórum ativo e leaderboard por temporada.' }
  ];

  function sumXpForRange(start, end) {
    const begin = Math.min(Number(start) || 0, Number(end) || 0);
    const finish = Math.max(Number(start) || 0, Number(end) || 0);
    return moduleCatalog.reduce((total, module) => {
      if (module.number >= begin && module.number <= finish) {
        return total + Number(module.xpTarget || 0);
      }
      return total;
    }, 0);
  }

  function daysFromNow(days) {
    const base = new Date();
    base.setHours(0, 0, 0, 0);
    base.setDate(base.getDate() + Number(days || 0));
    return base.toISOString();
  }

  const macroModulePlan = [
    {
      id: 'A',
      title: 'Bloco A — Fundamentos & Produtividade',
      range: [1, 6],
      summary: 'Interface, formatação profissional, fórmulas essenciais e controle de datas.',
      focus: ['Interface & atalhos', 'Formatação inteligente', 'Fórmulas SOMA/MÉDIA/SE'],
      xpTarget: sumXpForRange(1, 6),
      deliverables: ['Planilha modelo pronta para impressão', 'Checklist de atalhos favoritos'],
      challenge: {
        title: 'Desafio Operador Ninja',
        xp: 30,
        description: 'Aplicar 10 atalhos em uma planilha real e postar o antes/depois no mural.'
      },
      quiz: {
        title: 'Quiz Fundamentos Express',
        xp: 100,
        bonus: '+15 XP se finalizar com 100% em menos de 10 minutos.'
      },
      keyBadges: ['Primeiro Passo', 'Atalhos Ninja', 'Sem Erros (quiz 100%)']
    },
    {
      id: 'B',
      title: 'Bloco B — Análise de Dados Essencial',
      range: [7, 12],
      summary: 'Funções de busca, tabelas inteligentes, gráficos e filtros avançados.',
      focus: ['PROCX & ÍNDICE/CORRESP', 'Tabelas dinâmicas', 'Visualizações impactantes'],
      xpTarget: sumXpForRange(7, 12),
      deliverables: ['Dashboard 1.0 com gráficos conectados', 'Tabela dinâmica automatizada'],
      challenge: {
        title: 'Sprint Dashboard 1.0',
        xp: 45,
        description: 'Montar um mini-dashboard com segmentações e publicar no fórum de projetos.'
      },
      quiz: {
        title: 'Quiz Busca & Referência',
        xp: 100,
        bonus: '+20 XP se marcar “Sem Erros”.'
      },
      keyBadges: ['Procura & Referência', 'Tabela Dinâmica Starter', 'Dashboard 1.0']
    },
    {
      id: 'C',
      title: 'Bloco C — Automação & Insights avançados',
      range: [13, 18],
      summary: 'Cenários, Solver, dashboards interativos, macros e introdução ao VBA.',
      focus: ['Análise de cenários', 'Solver e otimização', 'Macros e automações'],
      xpTarget: sumXpForRange(13, 18),
      deliverables: ['Relatório de cenários comparativos', 'Macro gravada com execução rápida'],
      challenge: {
        title: 'Maratona Semanal VBA Starter',
        xp: 55,
        description: 'Automatizar um fluxo simples via macro e compartilhar o vídeo da execução.'
      },
      quiz: {
        title: 'Quiz Automação & Dashboards',
        xp: 100,
        bonus: '+25 XP se entregar vídeo demonstrativo.'
      },
      keyBadges: ['Solver & Otimização', 'Dashboards Interativos', 'Power Query – Primeiros Passos']
    },
    {
      id: 'D',
      title: 'Bloco D — Power BI no Excel & Projeto Final',
      range: [19, 24],
      summary: 'Integrações com Office, Power Query, Power Pivot, DAX e projeto integrador.',
      focus: ['Integrações Office', 'Modelagem Power Pivot', 'Projeto final com apresentação'],
      xpTarget: sumXpForRange(19, 24),
      deliverables: ['Modelo Power Pivot com KPIs', 'Projeto final apresentado para a turma'],
      challenge: {
        title: 'Desafio Capstone',
        xp: 60,
        description: 'Construir um painel completo conectando Power Query + Power Pivot e entregar no fórum.'
      },
      quiz: {
        title: 'Quiz Power Platform',
        xp: 100,
        bonus: '+30 XP para quem subir o relatório final com storytelling.'
      },
      keyBadges: ['Power Query – Primeiros Passos', 'Matrizes Dinâmicas', 'Projeto Final']
    }
  ];

  const defaultMissionSamples = [
    {
      id: 'mission-atalhos',
      title: 'Sprint de atalhos',
      xp: 25,
      audience: 'Todos',
      validity: daysFromNow(1),
      description: 'Utilize 5 atalhos diferentes na planilha do dia e registre o GIF no mural.',
      attachments: []
    },
    {
      id: 'mission-procx',
      title: 'Caça aos PROCs',
      xp: 35,
      audience: 'Bloco B',
      validity: daysFromNow(3),
      description: 'Monte uma consulta PROCX em uma base real e compartilhe a fórmula no fórum.',
      attachments: []
    },
    {
      id: 'mission-powerquery',
      title: 'Power Query Relâmpago',
      xp: 40,
      audience: 'Bloco D',
      validity: daysFromNow(5),
      description: 'Importe dados externos via Power Query, aplique transformações básicas e poste o antes/depois.',
      attachments: ['https://support.microsoft.com/powerquery']
    }
  ];

  const forumState = {
    mode: 'message',
    polls: [],
    pollSelections: {},
    pollRespondedCount: 0,
    ideas: [],
    questions: [],
    notifications: [],
    notificationsUnread: 0,
    latestEntries: [],
    latestMaxTimestamp: 0
  };
  const reactionDefinitions = {
    like: { emoji: '👍', label: 'Gostei' },
    insight: { emoji: '💡', label: 'Insight' },
    celebrate: { emoji: '🎉', label: 'Comemorar' },
    resolve: { emoji: '✅', label: 'Resolvido' }
  };
  const communityModeHints = {
    message: 'Escreva uma atualização rápida para a turma.',
    idea: 'Apresente a ideia e convide colegas para apoiar ou participar.',
    poll: 'Crie uma enquete para coletar opiniões e preferências.',
    question: 'Envie dúvidas para a comunidade, coordenação ou ambos.'
  };
  const questionScopeLabels = {
    community: 'Comunidade',
    admin: 'Coordenação',
    both: 'Comunidade + Coordenação'
  };
  let lastPanelPollUserId = null;

  let adminBulletinState = {
    content: 'Semana 3 aberta! Reserve 15 minutos para revisar o bloco A antes do encontro ao vivo e registre o check-in até 22h.\n\nDica extra: quem postar um insight no mural até sexta participa do sorteio do livro “Excel na Prática”.',
    updatedAt: new Date()
  };

  let adminMissionsState = defaultMissionSamples.slice();

  const SUBPAGE_META = {
    'next-lesson': {
      title: 'Próxima aula',
      subtitle: 'Visualize o roteiro completo do próximo módulo e as atividades avaliativas.'
    },
    'achievements-catalog': {
      title: 'Conquistas do curso',
      subtitle: 'Confira todas as medalhas disponíveis e o que falta para desbloqueá-las.'
    }
  };

  const studentStoryState = {
    xp: 0,
    level: 1,
    modulesCompleted: 0,
    totalModules: TOTAL_MODULES,
    achievementsUnlocked: 0,
    totalAchievements: 0,
    metrics: {},
    checkinToday: false,
    nextModuleNumber: 1
  };

  let activeSubPage = 'home';
  const ROUTE_DEFS = {
    inicio: { slug: 'inicio' },
    sobre: { slug: 'sobre' },
    aulas: { slug: 'aulas' },
    forum: { slug: 'forum', requiresAuth: true },
    conquistas: { slug: 'conquistas' },
    admin: { slug: 'admin', requiresAuth: true, requiresAdmin: true }
  };
  const ROUTE_ALIASES = {
    painel: 'forum'
  };
  const ROUTE_SLUGS = Object.keys(ROUTE_DEFS);
  const ROUTE_SUFFIXES = Array.from(new Set([...ROUTE_SLUGS, ...Object.keys(ROUTE_ALIASES)]));
  let currentAppRoute = 'inicio';
  let appBasePath = '/';

  function normalizeRoute(value) {
    const text = (value || '').toString().toLowerCase().replace(/[^a-z]/g, '');
    if (!text) return 'inicio';
    const alias = ROUTE_ALIASES[text];
    if (alias && ROUTE_DEFS[alias]) return alias;
    return ROUTE_DEFS[text] ? text : 'inicio';
  }

  function computeBasePath(pathname) {
    let base = (pathname || '/').split('?')[0];
    ROUTE_SUFFIXES.forEach(slug => {
      const suffix = '/' + slug;
      if (base.endsWith(suffix)) {
        base = base.slice(0, -suffix.length);
      }
    });
    if (!base) return '/';
    if (!base.endsWith('/')) base += '/';
    return base;
  }

  function resolveRouteFromPath(pathname) {
    const segments = (pathname || '').split('/').filter(Boolean);
    if (!segments.length) return 'inicio';
    const last = segments[segments.length - 1].toLowerCase().replace(/[^a-z]/g, '');
    const alias = ROUTE_ALIASES[last];
    if (alias && ROUTE_DEFS[alias]) return alias;
    return ROUTE_DEFS[last] ? last : 'inicio';
  }

  function syncAdminVisibility() {
    const isAdmin = !!(currentUser && currentUser.isAdmin);
    adminOnlyElements.forEach(el => {
      if (!el) return;
      el.classList.toggle('hidden', !isAdmin);
      if (isAdmin) {
        el.removeAttribute('aria-hidden');
      } else {
        el.setAttribute('aria-hidden', 'true');
      }
    });
  }

  function syncHeaderContext() {
    const isLogged = !!currentUser;
    if (headerBreadcrumbs) {
      headerBreadcrumbs.classList.toggle('hidden', !isLogged);
    }
    if (breadcrumbAdminItem) {
      breadcrumbAdminItem.classList.toggle('hidden', !(currentUser && currentUser.isAdmin));
    }
    if (!isLogged) {
      updateBreadcrumbSubPage(null);
    }
  }

  function renderAboutPage() {
    if (aboutHighlightsEl) {
      aboutHighlightsEl.innerHTML = '';
      aboutHighlightsData.forEach(item => {
        const box = document.createElement('div');
        box.className = 'rounded-2xl border border-slate-200 dark:border-slate-700/70 bg-white/90 dark:bg-slate-900/50 px-4 py-4 shadow-sm';
        const label = document.createElement('p');
        label.className = 'text-xs uppercase tracking-wide text-slate-500 dark:text-slate-400';
        label.textContent = item.label;
        const value = document.createElement('div');
        value.className = 'text-xl font-semibold text-primary';
        value.textContent = item.value;
        const description = document.createElement('p');
        description.className = 'text-sm text-slate-600 dark:text-slate-300 mt-1';
        description.textContent = item.description;
        box.append(label, value, description);
        aboutHighlightsEl.appendChild(box);
      });
    }

    if (aboutModuleGridEl) {
      aboutModuleGridEl.innerHTML = '';
      macroModulePlan.forEach(block => {
        const card = document.createElement('div');
        card.className = 'card card-flat space-y-3';
        const header = document.createElement('div');
        header.className = 'flex flex-wrap items-start justify-between gap-3';
        const title = document.createElement('h4');
        title.className = 'text-lg font-semibold';
        title.textContent = block.title;
        const badge = document.createElement('span');
        badge.className = 'pill';
        badge.textContent = `Módulos ${block.range[0]}–${block.range[1]} • ${block.xpTarget} XP`;
        header.append(title, badge);

        const summary = document.createElement('p');
        summary.className = 'text-sm text-slate-600 dark:text-slate-300';
        summary.textContent = block.summary;

        const focusWrap = document.createElement('div');
        focusWrap.className = 'flex flex-wrap gap-2';
        block.focus.forEach(topic => {
          const chip = document.createElement('span');
          chip.className = 'pill';
          chip.textContent = topic;
          focusWrap.appendChild(chip);
        });

        const deliverables = document.createElement('p');
        deliverables.className = 'text-xs text-slate-500 dark:text-slate-400';
        deliverables.textContent = `Entregáveis sugeridos: ${block.deliverables.join('; ')}`;

        const badges = document.createElement('p');
        badges.className = 'text-xs font-semibold text-primary';
        badges.textContent = `Badges em jogo: ${block.keyBadges.join(', ')}`;

        card.append(header, summary, focusWrap, deliverables, badges);
        aboutModuleGridEl.appendChild(card);
      });
    }
  }

  function renderLearningTracksPage() {
    if (learningTracksContainerEl) {
      learningTracksContainerEl.innerHTML = '';
      macroModulePlan.forEach(block => {
        const modules = moduleCatalog.filter(item => item.number >= block.range[0] && item.number <= block.range[1]);
        const card = document.createElement('div');
        card.className = 'card space-y-4';
        const header = document.createElement('div');
        header.className = 'flex flex-wrap items-start justify-between gap-3';
        const title = document.createElement('h3');
        title.className = 'text-lg font-semibold text-primary';
        title.textContent = block.title;
        const badge = document.createElement('span');
        badge.className = 'pill';
        badge.textContent = `${block.xpTarget} XP nos encontros ${block.range[0]}–${block.range[1]}`;
        header.append(title, badge);

        const moduleList = document.createElement('ul');
        moduleList.className = 'space-y-2 text-sm';
        modules.forEach(module => {
          const li = document.createElement('li');
          li.className = 'rounded-xl border border-slate-200 dark:border-slate-700/60 px-3 py-2 bg-white/90 dark:bg-slate-900/50 shadow-sm';
          li.innerHTML = `<div class="flex items-start justify-between gap-2"><span class="font-semibold">Módulo ${module.number}.</span><span class="text-xs text-slate-500">${module.xpTarget} XP</span></div><p class="text-xs text-slate-600 dark:text-slate-300">${module.title}</p>`;
          moduleList.appendChild(li);
        });

        const assessments = document.createElement('div');
        assessments.className = 'grid gap-3 sm:grid-cols-2';
        const challengeCard = document.createElement('div');
        challengeCard.className = 'rounded-2xl border border-emerald-200/70 dark:border-emerald-500/30 bg-emerald-50/80 dark:bg-emerald-500/10 px-4 py-3 space-y-1';
        challengeCard.innerHTML = `<p class="text-xs uppercase tracking-wide text-emerald-700 dark:text-emerald-300">Desafio</p><h4 class="text-sm font-semibold">${block.challenge.title}</h4><p class="text-sm text-emerald-900 dark:text-emerald-200">${block.challenge.description}</p><span class="pill">+${block.challenge.xp} XP</span>`;
        const quizCard = document.createElement('div');
        quizCard.className = 'rounded-2xl border border-amber-200/70 dark:border-amber-500/30 bg-amber-50/80 dark:bg-amber-500/10 px-4 py-3 space-y-1';
        quizCard.innerHTML = `<p class="text-xs uppercase tracking-wide text-amber-700 dark:text-amber-200">Quiz</p><h4 class="text-sm font-semibold">${block.quiz.title}</h4><p class="text-sm text-amber-900 dark:text-amber-200">Vale ${block.quiz.xp} XP. ${block.quiz.bonus}</p>`;
        assessments.append(challengeCard, quizCard);

        card.append(header, moduleList, assessments);
        learningTracksContainerEl.appendChild(card);
      });
    }

    if (learningAssessmentsEl) {
      learningAssessmentsEl.innerHTML = '';
      macroModulePlan.forEach(block => {
        const wrapper = document.createElement('div');
        wrapper.className = 'card card-flat space-y-3';
        const header = document.createElement('div');
        header.className = 'flex flex-wrap items-center justify-between gap-2';
        header.innerHTML = `<h4 class="text-lg font-semibold">${block.title}</h4><span class="pill">${block.range[0]}–${block.range[1]}</span>`;
        const body = document.createElement('div');
        body.className = 'grid gap-3 sm:grid-cols-2';

        const challenge = document.createElement('div');
        challenge.className = 'rounded-xl border border-emerald-200/70 dark:border-emerald-500/30 bg-white dark:bg-slate-900/60 px-3 py-3 space-y-1';
        challenge.innerHTML = `<p class="text-xs uppercase tracking-wide text-emerald-600 dark:text-emerald-300">Desafio do bloco</p><h5 class="text-sm font-semibold">${block.challenge.title}</h5><p class="text-sm text-slate-600 dark:text-slate-300">${block.challenge.description}</p><span class="pill">+${block.challenge.xp} XP</span>`;

        const quiz = document.createElement('div');
        quiz.className = 'rounded-xl border border-amber-200/70 dark:border-amber-500/30 bg-white dark:bg-slate-900/60 px-3 py-3 space-y-1';
        quiz.innerHTML = `<p class="text-xs uppercase tracking-wide text-amber-600 dark:text-amber-300">Quiz oficial</p><h5 class="text-sm font-semibold">${block.quiz.title}</h5><p class="text-sm text-slate-600 dark:text-slate-300">${block.quiz.bonus}</p><span class="pill">Até ${block.quiz.xp} XP</span>`;

        body.append(challenge, quiz);
        wrapper.append(header, body);
        learningAssessmentsEl.appendChild(wrapper);
      });
    }
  }

  function getPollSelection(pollId) {
    if (!pollId) return [];
    const stored = forumState.pollSelections[pollId];
    if (Array.isArray(stored) && stored.length) return stored.slice();
    const poll = (forumState.polls || []).find(item => item && item.id === pollId);
    if (poll && Array.isArray(poll.userChoices) && poll.userChoices.length) {
      return poll.userChoices.slice();
    }
    return [];
  }

  function setPollSelection(pollId, choices) {
    if (!pollId) return;
    const normalized = Array.isArray(choices) ? choices.filter(Boolean) : [];
    forumState.pollSelections[pollId] = normalized.slice();
  }

  function clearPollSelection(pollId) {
    if (!pollId) return;
    delete forumState.pollSelections[pollId];
  }

  function setCommunityMode(mode) {
    const validModes = ['message', 'idea', 'poll', 'question'];
    const nextMode = validModes.includes(mode) ? mode : 'message';
    forumState.mode = nextMode;
    communityModeButtons.forEach(button => {
      if (!button) return;
      const buttonMode = button.getAttribute('data-community-mode');
      const isActive = buttonMode === nextMode;
      button.setAttribute('aria-pressed', isActive ? 'true' : 'false');
    });
    if (communityMessageForm) communityMessageForm.classList.toggle('hidden', nextMode !== 'message');
    if (forumIdeaForm) forumIdeaForm.classList.toggle('hidden', nextMode !== 'idea');
    if (forumPollForm) forumPollForm.classList.toggle('hidden', nextMode !== 'poll');
    if (forumQuestionForm) forumQuestionForm.classList.toggle('hidden', nextMode !== 'question');
    if (communityModeHint) {
      communityModeHint.textContent = communityModeHints[nextMode] || communityModeHints.message;
    }
    const focusTarget = nextMode === 'message'
      ? communityTextarea
      : nextMode === 'idea'
        ? forumIdeaTitleInput
        : nextMode === 'poll'
          ? forumPollQuestionInput
          : forumQuestionSubjectInput;
    if (focusTarget) {
      setTimeout(() => {
        try {
          focusTarget.focus({ preventScroll: true });
        } catch (err) {
          focusTarget.focus();
        }
      }, 0);
    }
  }

  function renderForumPolls() {
    if (!forumPollListEl) return;
    forumPollListEl.innerHTML = '';
    const polls = Array.isArray(forumState.polls) ? forumState.polls : [];
    const activePolls = polls.filter(poll => !poll.responded || poll.allowUpdates);
    const hiddenCount = polls.length - activePolls.length;

    if (forumPollSummaryEl) {
      let summaryText = 'Entre para votar nas enquetes da turma.';
      if (!polls.length) {
        summaryText = currentUser
          ? 'A coordenação ainda não publicou novas enquetes.'
          : 'Entre com sua conta para acompanhar as enquetes.';
      } else if (currentUser) {
        const responded = Number(forumState.pollRespondedCount || 0);
        const actionable = activePolls.filter(poll => !poll.responded).length;
        if (actionable > 0) {
          summaryText = `Você respondeu ${responded} enquete${responded === 1 ? '' : 's'}. Ainda restam ${actionable} para votar.`;
        } else if (activePolls.some(poll => poll.allowUpdates && poll.responded)) {
          summaryText = `Você respondeu ${responded} enquete${responded === 1 ? '' : 's'}. Atualize seu voto sempre que quiser.`;
        } else {
          summaryText = `Você respondeu ${responded} enquete${responded === 1 ? '' : 's'}. Todas as enquetes disponíveis estão concluídas.`;
        }
        if (hiddenCount > 0) {
          summaryText += ` (${hiddenCount} enquete${hiddenCount === 1 ? '' : 's'} concluída${hiddenCount === 1 ? '' : 's'} foi ocultada do painel.)`;
        }
      }
      forumPollSummaryEl.textContent = summaryText;
    }

    if (!activePolls.length) {
      const message = document.createElement('div');
      message.className = 'history-empty';
      message.textContent = polls.length
        ? 'Você respondeu todas as enquetes disponíveis. 👏'
        : 'Nenhuma enquete disponível no momento.';
      forumPollListEl.appendChild(message);
      return;
    }

    activePolls.forEach(poll => {
      const totalVotes = poll.options.reduce((sum, option) => sum + Number(option.votes || 0), 0);
      const selection = getPollSelection(poll.id);
      const allowMultiple = !!poll.allowMultiple;
      const isClosed = !!poll.closed;
      const card = document.createElement('div');
      card.className = 'card card-flat space-y-4';

      const header = document.createElement('div');
      header.className = 'flex flex-wrap items-start justify-between gap-3';
      const info = document.createElement('div');
      info.className = 'space-y-1';
      const title = document.createElement('h4');
      title.className = 'text-base font-semibold';
      title.textContent = poll.question || 'Enquete';
      const meta = document.createElement('p');
      meta.className = 'text-xs text-slate-500 dark:text-slate-400';
      const audienceLabel = poll.audience ? formatAudienceLabel(poll.audience) : 'Turma inteira';
      meta.textContent = `${audienceLabel}${poll.visibility === 'private' ? ' • Privada' : ''}`;
      info.append(title, meta);

      const deadline = document.createElement('div');
      deadline.className = 'flex flex-col items-end gap-2 text-right';
      if (poll.closesAt) {
        const badge = document.createElement('span');
        badge.className = 'pill';
        badge.textContent = `Encerra em ${formatDateShort(poll.closesAt) || 'breve'}`;
        deadline.appendChild(badge);
      } else {
        const badge = document.createElement('span');
        badge.className = 'pill';
        badge.textContent = 'Sem data de encerramento';
        deadline.appendChild(badge);
      }
      if (poll.allowUpdates && poll.responded) {
        const hint = document.createElement('span');
        hint.className = 'text-[0.7rem] uppercase tracking-wide text-emerald-600 dark:text-emerald-300 font-semibold';
        hint.textContent = 'Resposta editável';
        deadline.appendChild(hint);
      }
      if (isClosed) {
        const closedBadge = document.createElement('span');
        closedBadge.className = 'text-[0.7rem] uppercase tracking-wide text-rose-600 dark:text-rose-300 font-semibold';
        closedBadge.textContent = 'Enquete encerrada';
        deadline.appendChild(closedBadge);
      }

      header.append(info, deadline);

      card.appendChild(header);

      const description = (poll.description || '').toString().trim();
      if (description) {
        const desc = document.createElement('p');
        desc.className = 'text-sm text-slate-600 dark:text-slate-300 leading-relaxed';
        desc.textContent = description;
        card.appendChild(desc);
      }

      const optionsWrap = document.createElement('div');
      optionsWrap.className = 'space-y-2';
      const inputType = allowMultiple ? 'checkbox' : 'radio';
      const currentUserId = currentUser?.id || null;

      poll.options.forEach(option => {
        const optionId = `${poll.id}-${option.id}`;
        const optionLabel = document.createElement('label');
        optionLabel.className = 'block rounded-xl border border-slate-200 dark:border-slate-700/60 bg-white/95 dark:bg-slate-900/60 px-3 py-2';

        const row = document.createElement('div');
        row.className = 'flex flex-wrap items-center justify-between gap-2';
        const left = document.createElement('div');
        left.className = 'flex items-center gap-2';
        const input = document.createElement('input');
        input.type = inputType;
        input.name = `poll-${poll.id}`;
        input.value = option.id;
        input.id = optionId;
        input.checked = selection.includes(option.id);
        input.disabled = !currentUserId || isClosed;
        input.addEventListener('change', () => {
          let nextChoices = selection.slice();
          if (allowMultiple) {
            if (input.checked) {
              if (!nextChoices.includes(option.id)) nextChoices.push(option.id);
            } else {
              nextChoices = nextChoices.filter(value => value !== option.id);
            }
          } else {
            nextChoices = input.checked ? [option.id] : [];
          }
          setPollSelection(poll.id, nextChoices);
          renderForumPolls();
        });
        const labelText = document.createElement('span');
        labelText.className = 'text-sm font-medium';
        labelText.textContent = option.label || 'Opção';
        left.append(input, labelText);

        const voteInfo = document.createElement('span');
        voteInfo.className = 'text-xs text-slate-500 dark:text-slate-400';
        const votes = Number(option.votes || 0);
        voteInfo.textContent = `${votes} voto${votes === 1 ? '' : 's'}`;
        row.append(left, voteInfo);

        const bar = document.createElement('div');
        bar.className = 'mt-2 h-2 rounded-full bg-slate-200 dark:bg-slate-700 overflow-hidden';
        const fill = document.createElement('div');
        fill.className = 'h-full rounded-full bg-primary/80';
        const pct = totalVotes > 0 ? Math.round((votes / totalVotes) * 100) : 0;
        fill.style.width = `${pct}%`;
        bar.appendChild(fill);

        optionLabel.append(row, bar);
        optionsWrap.appendChild(optionLabel);
      });

      card.appendChild(optionsWrap);

      const footer = document.createElement('div');
      footer.className = 'flex flex-wrap items-center justify-between gap-2';
      const totalBadge = document.createElement('span');
      totalBadge.className = 'text-xs text-slate-500 dark:text-slate-400';
      totalBadge.textContent = `${totalVotes} voto${totalVotes === 1 ? '' : 's'} registrados`;

      const voteButton = document.createElement('button');
      voteButton.type = 'button';
      voteButton.className = 'btn btn-primary';
      voteButton.textContent = poll.responded ? 'Atualizar voto' : 'Registrar voto';
      const selectedChoices = getPollSelection(poll.id);
      const hasSelection = selectedChoices.length > 0;
      voteButton.disabled = !currentUserId || !hasSelection || isClosed;
      voteButton.addEventListener('click', () => {
        if (!currentUser) {
          showToast({ message: 'Faça login para votar na enquete.', type: 'warning' });
          return;
        }
        const token = getSessionToken();
        if (!token) {
          expireSession(SESSION_EXPIRED_FALLBACK);
          return;
        }
        const choices = getPollSelection(poll.id);
        if (!choices.length) {
          showToast({ message: 'Selecione ao menos uma alternativa.', type: 'error' });
          return;
        }
        voteButton.disabled = true;
        const originalText = voteButton.textContent;
        voteButton.textContent = 'Enviando...';
        google.script.run
          .withFailureHandler(err => {
            voteButton.disabled = false;
            voteButton.textContent = originalText;
            if (handleSessionExpiredError(err)) return;
            showToast({ message: err?.message || 'Não foi possível registrar o voto agora.', type: 'error' });
          })
          .withSuccessHandler(res => {
            showToast({ message: res && res.updated ? 'Voto atualizado com sucesso.' : 'Voto registrado com sucesso!', type: 'success' });
            clearPollSelection(poll.id);
            loadForumPolls();
          })
          .submitForumPollVote({ token, pollId: poll.id, choices });
      });

      footer.append(totalBadge, voteButton);
      card.appendChild(footer);

      forumPollListEl.appendChild(card);
    });
  }

  function loadForumPolls() {
    if (!forumPollListEl) return;
    const token = getSessionToken();
    const payload = token ? { token } : {};
    google.script.run
      .withFailureHandler(err => {
        console.warn('Falha ao carregar enquetes:', err);
      })
      .withSuccessHandler(res => {
        const polls = res && Array.isArray(res.polls) ? res.polls : [];
        forumState.polls = polls;
        forumState.pollRespondedCount = Number(res && res.respondedCount || 0);
        const activeIds = new Set(polls.map(poll => poll && poll.id).filter(Boolean));
        Object.keys(forumState.pollSelections).forEach(id => {
          if (!activeIds.has(id)) {
            delete forumState.pollSelections[id];
          }
        });
        renderForumPolls();
      })
      .listForumPolls(payload);
  }

  function showIdeaFormError(message) {
    if (!forumIdeaFormFeedback) return;
    const text = (message || '').toString().trim();
    forumIdeaFormFeedback.textContent = text;
    forumIdeaFormFeedback.classList.toggle('hidden', !text);
  }

  function resetIdeaForm() {
    if (forumIdeaTitleInput) forumIdeaTitleInput.value = '';
    if (forumIdeaSummaryInput) forumIdeaSummaryInput.value = '';
    if (forumIdeaBenefitInput) forumIdeaBenefitInput.value = '';
    if (forumIdeaTagsInput) forumIdeaTagsInput.value = '';
    if (forumIdeaImpactSelect) forumIdeaImpactSelect.value = 'Alto';
    if (forumIdeaVisibilitySelect) forumIdeaVisibilitySelect.value = 'public';
    if (forumIdeaTargetsSelect) {
      Array.from(forumIdeaTargetsSelect.options || []).forEach(option => { option.selected = false; });
    }
    showIdeaFormError('');
  }

  function renderForumIdeas() {
    if (forumIdeaListEl) forumIdeaListEl.innerHTML = '';
    const ideas = Array.isArray(forumState.ideas) ? forumState.ideas : [];
    if (forumIdeaCountEl) {
      forumIdeaCountEl.textContent = `${ideas.length} ideia${ideas.length === 1 ? '' : 's'} registrada${ideas.length === 1 ? '' : 's'}`;
    }
    if (!ideas.length) {
      if (forumIdeaEmptyEl) forumIdeaEmptyEl.classList.remove('hidden');
      return;
    }
    if (forumIdeaEmptyEl) forumIdeaEmptyEl.classList.add('hidden');
    ideas.forEach(idea => {
      if (!forumIdeaListEl) return;
      const card = document.createElement('article');
      card.className = 'card card-flat space-y-3';
      card.dataset.ideaId = idea && idea.id ? idea.id : '';

      const header = document.createElement('div');
      header.className = 'flex flex-wrap items-start justify-between gap-3';
      const meta = document.createElement('div');
      meta.className = 'space-y-1';
      const title = document.createElement('h4');
      title.className = 'text-base font-semibold';
      title.textContent = idea && idea.title ? idea.title : 'Ideia';
      const authorLine = document.createElement('p');
      authorLine.className = 'text-xs text-slate-500 dark:text-slate-400';
      const author = idea && idea.authorName ? idea.authorName : 'Participante';
      const createdAt = formatCommunityDate(idea && idea.createdAt);
      authorLine.textContent = `${author} • ${createdAt || 'agora'}`;
      meta.append(title, authorLine);

      const statusWrap = document.createElement('div');
      statusWrap.className = 'flex flex-col items-end gap-2 text-right';
      const privacyChip = document.createElement('span');
      const isPrivate = idea && idea.visibility === 'private';
      privacyChip.className = 'privacy-chip' + (isPrivate ? ' privacy-chip-private' : '');
      privacyChip.textContent = isPrivate ? 'Privada' : 'Pública';
      statusWrap.appendChild(privacyChip);
      if (idea && idea.status) {
        const status = document.createElement('span');
        status.className = 'text-[0.7rem] uppercase tracking-wide text-primary font-semibold';
        status.textContent = idea.status === 'open' ? 'Em análise' : idea.status;
        statusWrap.appendChild(status);
      }
      header.append(meta, statusWrap);
      card.appendChild(header);

      if (idea && idea.summary) {
        const summary = document.createElement('p');
        summary.className = 'text-sm text-slate-700 dark:text-slate-200 leading-relaxed';
        summary.textContent = idea.summary;
        card.appendChild(summary);
      }

      const insights = document.createElement('div');
      insights.className = 'grid gap-2 sm:grid-cols-2';
      const impact = document.createElement('div');
      impact.className = 'rounded-xl border border-slate-200 dark:border-slate-700 px-3 py-2 text-xs text-slate-600 dark:text-slate-300';
      impact.innerHTML = `<strong>Impacto:</strong> ${(idea && idea.impact) || 'Médio'}`;
      const benefit = document.createElement('div');
      benefit.className = 'rounded-xl border border-slate-200 dark:border-slate-700 px-3 py-2 text-xs text-slate-600 dark:text-slate-300';
      benefit.innerHTML = `<strong>Benefício:</strong> ${(idea && idea.benefit) || 'Em definição'}`;
      insights.append(impact, benefit);
      card.appendChild(insights);

      const tags = Array.isArray(idea && idea.tags) ? idea.tags.filter(Boolean) : [];
      if (tags.length) {
        const tagRow = document.createElement('div');
        tagRow.className = 'flex flex-wrap items-center gap-2 text-xs text-slate-500 dark:text-slate-400';
        tags.forEach(tag => {
          const pill = document.createElement('span');
          pill.className = 'pill';
          pill.textContent = tag;
          tagRow.appendChild(pill);
        });
        card.appendChild(tagRow);
      }

      if (isPrivate && idea && Array.isArray(idea.targetUserNames) && idea.targetUserNames.length) {
        const invited = document.createElement('p');
        invited.className = 'text-xs text-slate-500 dark:text-slate-400';
        invited.textContent = 'Convidados: ' + idea.targetUserNames.join(', ');
        card.appendChild(invited);
      }

      const actions = document.createElement('div');
      actions.className = 'flex flex-wrap items-center gap-2';
      const supporters = Number(idea && idea.supporters || 0);
      const volunteers = Number(idea && idea.volunteers || 0);

      const supportBtn = document.createElement('button');
      supportBtn.type = 'button';
      supportBtn.className = 'reaction-button' + ((idea && idea.viewerSupport) ? ' reaction-button-active' : '');
      supportBtn.dataset.action = 'idea-feedback';
      supportBtn.dataset.type = 'support';
      supportBtn.dataset.id = idea && idea.id ? idea.id : '';
      supportBtn.innerHTML = `<span>🤝</span><span>Apoiar</span><span class="text-xs text-slate-500 dark:text-slate-300">${supporters ? `(${supporters})` : ''}</span>`;
      actions.appendChild(supportBtn);

      const volunteerBtn = document.createElement('button');
      volunteerBtn.type = 'button';
      volunteerBtn.className = 'reaction-button' + ((idea && idea.viewerVolunteer) ? ' reaction-button-active' : '');
      volunteerBtn.dataset.action = 'idea-feedback';
      volunteerBtn.dataset.type = 'volunteer';
      volunteerBtn.dataset.id = idea && idea.id ? idea.id : '';
      volunteerBtn.innerHTML = `<span>🙋‍♀️</span><span>Participar</span><span class="text-xs text-slate-500 dark:text-slate-300">${volunteers ? `(${volunteers})` : ''}</span>`;
      actions.appendChild(volunteerBtn);

      card.appendChild(actions);

      const comments = Array.isArray(idea && idea.comments) ? idea.comments : [];
      if (comments.length) {
        const commentWrap = document.createElement('div');
        commentWrap.className = 'space-y-2';
        comments.forEach(comment => {
          const box = document.createElement('div');
          box.className = 'rounded-xl border border-slate-200 dark:border-slate-700 px-3 py-2 text-xs text-slate-600 dark:text-slate-300';
          const authorLine = document.createElement('div');
          authorLine.className = 'font-semibold text-slate-700 dark:text-slate-200';
          authorLine.textContent = `${comment.authorName || 'Participante'} • ${formatCommunityDate(comment.createdAt) || 'agora'}`;
          const body = document.createElement('p');
          body.className = 'mt-1 text-slate-600 dark:text-slate-300';
          body.textContent = comment.message || '';
          box.append(authorLine, body);
          commentWrap.appendChild(box);
        });
        card.appendChild(commentWrap);
      }

      if (currentUser) {
        const commentForm = document.createElement('form');
        commentForm.className = 'space-y-2';
        commentForm.dataset.action = 'idea-comment';
        commentForm.dataset.id = idea && idea.id ? idea.id : '';
        const textarea = document.createElement('textarea');
        textarea.className = 'input min-h-[80px] resize-y';
        textarea.setAttribute('placeholder', 'Deixe um comentário construtivo para a turma...');
        const submitRow = document.createElement('div');
        submitRow.className = 'flex justify-end';
        const submit = document.createElement('button');
        submit.type = 'submit';
        submit.className = 'btn btn-primary';
        submit.textContent = 'Comentar';
        submitRow.appendChild(submit);
        commentForm.append(textarea, submitRow);
        card.appendChild(commentForm);
      }

      forumIdeaListEl.appendChild(card);
    });
  }

  function loadForumIdeas() {
    if (!forumIdeaListEl) return;
    const token = getSessionToken();
    const payload = token ? { token } : {};
    google.script.run
      .withFailureHandler(err => {
        console.warn('Falha ao carregar ideias:', err);
      })
      .withSuccessHandler(res => {
        const ideas = res && Array.isArray(res.ideas) ? res.ideas : [];
        forumState.ideas = ideas;
        renderForumIdeas();
      })
      .listForumIdeas(payload);
  }

  function handleIdeaFeedback(ideaId, type, options = {}) {
    if (!ideaId || !type) return;
    if (!currentUser) {
      showToast({ message: 'Faça login para interagir com a ideia.', type: 'warning' });
      return;
    }
    const token = getSessionToken();
    if (!token) {
      expireSession(SESSION_EXPIRED_FALLBACK);
      return;
    }
    const button = options.button || null;
    const message = options.message || '';
    const textarea = options.textarea || null;
    if (button) {
      button.disabled = true;
      button.setAttribute('aria-busy', 'true');
    }
    google.script.run
      .withFailureHandler(err => {
        if (button) {
          button.disabled = false;
          button.removeAttribute('aria-busy');
        }
        if (handleSessionExpiredError(err)) return;
        showToast({ message: err?.message || 'Não foi possível registrar a interação agora.', type: 'error' });
      })
      .withSuccessHandler(res => {
        if (button) {
          button.disabled = false;
          button.removeAttribute('aria-busy');
        }
        if (type === 'comment') {
          showToast({ message: 'Comentário registrado na ideia.', type: 'success' });
        } else if (res && res.removed) {
          showToast({ message: 'Interação removida.', type: 'success' });
        } else {
          showToast({ message: 'Interação registrada com sucesso.', type: 'success' });
        }
        if (textarea) textarea.value = '';
        loadForumIdeas();
      })
      .submitForumIdeaFeedback({ token, ideaId, type, message });
  }

  function showPollFormError(message) {
    if (!forumPollFormFeedback) return;
    const text = (message || '').toString().trim();
    forumPollFormFeedback.textContent = text;
    forumPollFormFeedback.classList.toggle('hidden', !text);
  }

  function updatePollOptionPlaceholders() {
    if (!forumPollOptionsWrap) return;
    const rows = Array.from(forumPollOptionsWrap.querySelectorAll('[data-option-row]'));
    rows.forEach((row, index) => {
      const input = row.querySelector('input');
      if (input) input.placeholder = `Opção ${index + 1}`;
    });
  }

  function addPollOptionRow(value = '') {
    if (!forumPollOptionsWrap) return;
    const row = document.createElement('div');
    row.className = 'flex items-center gap-2';
    row.dataset.optionRow = 'true';
    const input = document.createElement('input');
    input.type = 'text';
    input.className = 'input flex-1';
    input.placeholder = `Opção ${forumPollOptionsWrap.querySelectorAll('[data-option-row]').length + 1}`;
    input.value = value;
    const removeBtn = document.createElement('button');
    removeBtn.type = 'button';
    removeBtn.className = 'btn btn-ghost text-xs';
    removeBtn.textContent = 'Remover';
    removeBtn.addEventListener('click', () => {
      const rows = Array.from(forumPollOptionsWrap.querySelectorAll('[data-option-row]'));
      if (rows.length <= 2) {
        showPollFormError('A enquete precisa de pelo menos duas alternativas.');
        return;
      }
      forumPollOptionsWrap.removeChild(row);
      updatePollOptionPlaceholders();
    });
    row.append(input, removeBtn);
    forumPollOptionsWrap.appendChild(row);
    updatePollOptionPlaceholders();
  }

  function resetPollForm() {
    if (!forumPollForm) return;
    if (forumPollQuestionInput) forumPollQuestionInput.value = '';
    if (forumPollDescriptionInput) forumPollDescriptionInput.value = '';
    if (forumPollAudienceSelect) forumPollAudienceSelect.value = 'all';
    if (forumPollClosingInput) forumPollClosingInput.value = '';
    if (forumPollAllowMultiple) forumPollAllowMultiple.checked = false;
    if (forumPollAllowUpdate) forumPollAllowUpdate.checked = true;
    if (forumPollVisibilitySelect) forumPollVisibilitySelect.value = 'public';
    if (forumPollTargetsSelect) {
      Array.from(forumPollTargetsSelect.options || []).forEach(option => { option.selected = false; });
    }
    if (forumPollOptionsWrap) {
      forumPollOptionsWrap.innerHTML = '';
      addPollOptionRow();
      addPollOptionRow();
    }
    showPollFormError('');
  }

  function showQuestionFormError(message) {
    if (!forumQuestionFormFeedback) return;
    const text = (message || '').toString().trim();
    forumQuestionFormFeedback.textContent = text;
    forumQuestionFormFeedback.classList.toggle('hidden', !text);
  }

  function resetQuestionForm() {
    if (!forumQuestionForm) return;
    if (forumQuestionSubjectInput) forumQuestionSubjectInput.value = '';
    if (forumQuestionDetailsInput) forumQuestionDetailsInput.value = '';
    forumQuestionScopeRadios.forEach(radio => {
      if (radio) radio.checked = radio.value === 'community';
    });
    if (forumQuestionVisibilitySelect) forumQuestionVisibilitySelect.value = 'public';
    if (forumQuestionTargetsSelect) {
      Array.from(forumQuestionTargetsSelect.options || []).forEach(option => { option.selected = false; });
    }
    showQuestionFormError('');
  }

  function renderForumQuestions() {
    if (forumQuestionListEl) forumQuestionListEl.innerHTML = '';
    const questions = Array.isArray(forumState.questions) ? forumState.questions : [];
    if (!questions.length) {
      if (forumQuestionEmptyEl) forumQuestionEmptyEl.classList.remove('hidden');
      return;
    }
    if (forumQuestionEmptyEl) forumQuestionEmptyEl.classList.add('hidden');
    questions.forEach(question => {
      if (!forumQuestionListEl) return;
      const card = document.createElement('article');
      card.className = 'card card-flat space-y-3';

      const header = document.createElement('div');
      header.className = 'flex flex-wrap items-start justify-between gap-3';
      const meta = document.createElement('div');
      meta.className = 'space-y-1';
      const title = document.createElement('h4');
      title.className = 'text-base font-semibold';
      title.textContent = question && question.subject ? question.subject : 'Dúvida';
      const author = document.createElement('p');
      author.className = 'text-xs text-slate-500 dark:text-slate-400';
      author.textContent = `${question && question.authorName ? question.authorName : 'Participante'} • ${formatCommunityDate(question && question.createdAt) || 'agora'}`;
      meta.append(title, author);

      const tags = document.createElement('div');
      tags.className = 'flex flex-wrap items-end justify-end gap-2 text-right';
      const scopeChip = document.createElement('span');
      scopeChip.className = 'pill';
      const scopeLabel = questionScopeLabels[question && question.scope] || 'Comunidade';
      scopeChip.textContent = scopeLabel;
      tags.appendChild(scopeChip);
      const visibilityChip = document.createElement('span');
      const isPrivate = question && question.visibility === 'private';
      visibilityChip.className = 'privacy-chip' + (isPrivate ? ' privacy-chip-private' : '');
      visibilityChip.textContent = isPrivate ? 'Privada' : 'Pública';
      tags.appendChild(visibilityChip);
      if (question && question.status) {
        const status = document.createElement('span');
        status.className = 'text-[0.7rem] uppercase tracking-wide text-primary font-semibold';
        status.textContent = question.status === 'open' ? 'Aberta' : question.status;
        tags.appendChild(status);
      }

      header.append(meta, tags);
      card.appendChild(header);

      if (question && question.details) {
        const body = document.createElement('p');
        body.className = 'text-sm text-slate-700 dark:text-slate-200 leading-relaxed';
        body.textContent = question.details;
        card.appendChild(body);
      }

      if (isPrivate && question && Array.isArray(question.targetUserNames) && question.targetUserNames.length) {
        const invited = document.createElement('p');
        invited.className = 'text-xs text-slate-500 dark:text-slate-400';
        invited.textContent = 'Convidados: ' + question.targetUserNames.join(', ');
        card.appendChild(invited);
      }

      forumQuestionListEl.appendChild(card);
    });
  }

  function loadForumQuestions() {
    if (!forumQuestionListEl) return;
    const token = getSessionToken();
    const payload = token ? { token } : {};
    google.script.run
      .withFailureHandler(err => {
        console.warn('Falha ao carregar dúvidas:', err);
      })
      .withSuccessHandler(res => {
        const questions = res && Array.isArray(res.questions) ? res.questions : [];
        forumState.questions = questions;
        renderForumQuestions();
      })
      .listForumQuestions(payload);
  }

  function renderForumNotifications() {
    if (!forumNotificationListEl) return;
    forumNotificationListEl.innerHTML = '';
    const items = Array.isArray(forumState.notifications) ? forumState.notifications : [];
    const unread = Number(forumState.notificationsUnread || 0);
    if (forumNotificationBadgeEl) {
      forumNotificationBadgeEl.textContent = `${unread} nova${unread === 1 ? '' : 's'}`;
    }
    if (!items.length) {
      if (forumNotificationEmptyEl) forumNotificationEmptyEl.classList.remove('hidden');
      return;
    }
    if (forumNotificationEmptyEl) forumNotificationEmptyEl.classList.add('hidden');
    items.forEach(item => {
      const card = document.createElement('div');
      card.className = 'notification-item' + (item && item.readAt ? '' : ' notification-item-unread');
      const message = document.createElement('p');
      message.className = 'text-sm';
      message.textContent = item && item.message ? item.message : 'Atualização no fórum';
      const meta = document.createElement('span');
      meta.className = 'text-xs text-slate-500 dark:text-slate-400';
      meta.textContent = formatCommunityDate(item && item.createdAt) || 'agora';
      card.append(message, meta);
      forumNotificationListEl.appendChild(card);
    });
  }

  function loadForumNotifications() {
    if (!currentUser || !forumNotificationListEl) {
      forumState.notifications = [];
      forumState.notificationsUnread = 0;
      renderForumNotifications();
      return;
    }
    const token = getSessionToken();
    if (!token) {
      expireSession(SESSION_EXPIRED_FALLBACK);
      return;
    }
    google.script.run
      .withFailureHandler(err => {
        console.warn('Falha ao carregar notificações:', err);
      })
      .withSuccessHandler(res => {
        forumState.notifications = res && Array.isArray(res.items) ? res.items : [];
        forumState.notificationsUnread = Number(res && res.unreadCount || 0);
        renderForumNotifications();
      })
      .listForumNotifications({ token });
  }

  function markForumNotificationsRead() {
    if (!currentUser) {
      showToast({ message: 'Entre com sua conta para gerenciar notificações.', type: 'warning' });
      return;
    }
    const unreadIds = (forumState.notifications || []).filter(item => item && !item.readAt).map(item => item.id).filter(Boolean);
    if (!unreadIds.length) {
      showToast({ message: 'Você não possui notificações novas.', type: 'info' });
      return;
    }
    const token = getSessionToken();
    if (!token) {
      expireSession(SESSION_EXPIRED_FALLBACK);
      return;
    }
    google.script.run
      .withFailureHandler(err => {
        if (handleSessionExpiredError(err)) return;
        showToast({ message: err?.message || 'Não foi possível atualizar as notificações.', type: 'error' });
      })
      .withSuccessHandler(() => {
        loadForumNotifications();
        showToast({ message: 'Notificações marcadas como lidas.', type: 'success' });
      })
      .markForumNotificationsRead({ token, ids: unreadIds });
  }

  function renderForumLatest() {
    if (!forumLatestListEl) return;
    forumLatestListEl.innerHTML = '';
    const entries = Array.isArray(forumState.latestEntries) ? forumState.latestEntries : [];
    if (!entries.length) {
      if (forumLatestEmptyEl) forumLatestEmptyEl.classList.remove('hidden');
      return;
    }
    if (forumLatestEmptyEl) forumLatestEmptyEl.classList.add('hidden');
    entries.forEach(entry => {
      const li = document.createElement('li');
      li.className = 'rounded-xl border border-slate-200 dark:border-slate-700 px-3 py-2 bg-white/80 dark:bg-slate-900/50 shadow-sm';
      const author = document.createElement('div');
      author.className = 'text-sm font-semibold';
      author.textContent = entry && entry.authorName ? entry.authorName : 'Participante';
      const snippet = document.createElement('p');
      snippet.className = 'text-xs text-slate-600 dark:text-slate-300 mt-1';
      const text = (entry && entry.message ? entry.message.toString() : '').replace(/\s+/g, ' ').trim();
      snippet.textContent = text.length > 120 ? text.slice(0, 117) + '…' : text;
      const meta = document.createElement('div');
      meta.className = 'text-[0.7rem] text-slate-500 dark:text-slate-400 mt-1 flex justify-between items-center';
      const time = document.createElement('span');
      time.textContent = formatCommunityDate(entry && entry.createdAt) || 'agora';
      const privacy = document.createElement('span');
      privacy.textContent = entry && entry.visibility === 'private' ? 'Privado' : 'Público';
      meta.append(time, privacy);
      li.append(author, snippet, meta);
      forumLatestListEl.appendChild(li);
    });
  }

  function updateLatestConversations(entries) {
    const list = Array.isArray(entries) ? entries.slice(0, 5) : [];
    const previousMax = Number(forumState.latestMaxTimestamp || 0);
    let maxTimestamp = previousMax;
    list.forEach(entry => {
      const time = typeof entry.timestamp === 'number' ? entry.timestamp : Date.parse(entry.createdAt || '') || 0;
      if (time > maxTimestamp) maxTimestamp = time;
    });
    const hasNew = previousMax && maxTimestamp > previousMax;
    forumState.latestEntries = list;
    if (maxTimestamp > forumState.latestMaxTimestamp) {
      forumState.latestMaxTimestamp = maxTimestamp;
    }
    if (forumLatestBadgeEl) {
      forumLatestBadgeEl.classList.toggle('hidden', !hasNew);
    }
    renderForumLatest();
  }

  function handleReactionToggle(button) {
    if (!button) return;
    if (!currentUser) {
      showToast({ message: 'Faça login para reagir às publicações.', type: 'warning' });
      return;
    }
    const token = getSessionToken();
    if (!token) {
      expireSession(SESSION_EXPIRED_FALLBACK);
      return;
    }
    const postId = button.getAttribute('data-post-id') || button.getAttribute('data-postId') || '';
    const reaction = button.getAttribute('data-reaction') || '';
    if (!postId || !reaction) return;
    button.disabled = true;
    button.setAttribute('aria-busy', 'true');
    google.script.run
      .withFailureHandler(err => {
        button.disabled = false;
        button.removeAttribute('aria-busy');
        if (handleSessionExpiredError(err)) return;
        showToast({ message: err?.message || 'Não foi possível registrar a reação agora.', type: 'error' });
      })
      .withSuccessHandler(res => {
        button.disabled = false;
        button.removeAttribute('aria-busy');
        if (res && res.removed) {
          showToast({ message: 'Reação removida.', type: 'success' });
        } else {
          showToast({ message: 'Reação registrada!', type: 'success' });
        }
        refreshCommunityWall();
      })
      .toggleCommunityReaction({ token, postId, reaction });
  }

  function renderForumPage() {
    renderForumPolls();
    renderForumIdeas();
    renderForumQuestions();
    renderForumNotifications();
    renderForumLatest();
    renderCommunityAttachments();
    setCommunityPrivacy(communityState.privacy);
    renderCommunityTargetsOptions();
    renderCommunityMentionChips();
    renderCommunityMentionOptions();
    if (currentUser) {
      loadShareableUsers();
    }
    loadForumPolls();
    loadForumIdeas();
    loadForumQuestions();
    loadForumNotifications();
  }

  function renderAchievementsShowcase(summary = achievementsState.summary, metrics = achievementsState.metrics) {
    if (!achievementsHeroStatsEl) return;
    achievementsHeroStatsEl.innerHTML = '';
    if (!currentUser) {
      const card = document.createElement('div');
      card.className = 'rounded-2xl border border-slate-200 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/60 px-4 py-4 shadow-sm';
      card.innerHTML = '<p class="text-sm text-slate-600 dark:text-slate-300">Faça login para acompanhar suas conquistas e streaks no fórum.</p>';
      achievementsHeroStatsEl.appendChild(card);
      return;
    }

    const total = Number(summary?.total || 0);
    const unlocked = Number(summary?.unlocked || 0);
    const currentStreak = Number(metrics?.checkinCurrentStreak || metrics?.current || 0);
    const bestStreak = Number(metrics?.checkinBestStreak || metrics?.best || 0);
    const totalCheckins = Number(metrics?.totalCheckins || 0);

    const stats = [
      { label: 'Badges desbloqueadas', value: `${unlocked}/${total}`, description: 'Progresso total de conquistas.' },
      { label: 'Streak atual', value: `${currentStreak} dia${currentStreak === 1 ? '' : 's'}`, description: 'Check-ins consecutivos.', highlight: currentStreak >= 7 },
      { label: 'Recorde pessoal', value: `${bestStreak} dia${bestStreak === 1 ? '' : 's'}`, description: `${totalCheckins} check-ins no total.` }
    ];

    stats.forEach(item => {
      const box = document.createElement('div');
      box.className = 'rounded-2xl border border-slate-200 dark:border-slate-700/60 bg-white/90 dark:bg-slate-900/60 px-4 py-4 shadow-sm';
      const label = document.createElement('p');
      label.className = 'text-xs uppercase tracking-wide text-slate-500 dark:text-slate-400';
      label.textContent = item.label;
      const value = document.createElement('div');
      value.className = 'text-xl font-semibold text-primary';
      value.textContent = item.value;
      if (item.highlight) value.classList.add('text-emerald-600', 'dark:text-emerald-300');
      const desc = document.createElement('p');
      desc.className = 'text-xs text-slate-500 dark:text-slate-400 mt-1';
      desc.textContent = item.description;
      box.append(label, value, desc);
      achievementsHeroStatsEl.appendChild(box);
    });
  }

  function formatAudienceLabel(value) {
    switch ((value || '').toString()) {
      case 'moduleA':
        return 'Bloco A';
      case 'moduleB':
        return 'Bloco B';
      case 'moduleC':
        return 'Bloco C';
      case 'moduleD':
        return 'Bloco D';
      case 'Todos':
      case 'all':
        return 'Todos os alunos';
      default:
        return value || 'Todos os alunos';
    }
  }

  function renderAdminBulletin() {
    if (!adminBulletinViewEl || !adminBulletinEmptyEl) return;
    const content = (adminBulletinState && adminBulletinState.content) ? adminBulletinState.content.trim() : '';
    if (content) {
      const paragraphs = content.split(/\n{2,}/).map(par => par.trim()).filter(Boolean);
      adminBulletinViewEl.innerHTML = paragraphs.map(par => `<p>${escapeHtml(par)}</p>`).join('');
      adminBulletinEmptyEl.classList.add('hidden');
    } else {
      adminBulletinViewEl.innerHTML = '';
      adminBulletinEmptyEl.classList.remove('hidden');
    }
    if (currentUser?.isAdmin && adminBulletinInputEl) {
      adminBulletinInputEl.value = content;
    }
  }

  function renderAdminMissionList() {
    if (!adminMissionListEl) return;
    adminMissionListEl.innerHTML = '';
    if (!adminMissionsState.length) {
      const empty = document.createElement('li');
      empty.className = 'text-xs text-slate-500 dark:text-slate-400';
      empty.textContent = 'Nenhuma missão lançada ainda. Utilize o formulário acima para publicar a primeira missão.';
      adminMissionListEl.appendChild(empty);
      return;
    }
    adminMissionsState
      .slice()
      .sort((a, b) => {
        const aTime = parseDateValue(a.validity)?.getTime() || 0;
        const bTime = parseDateValue(b.validity)?.getTime() || 0;
        return aTime - bTime;
      })
      .forEach(mission => {
        const li = document.createElement('li');
        li.className = 'rounded-2xl border border-slate-200 dark:border-slate-700/60 bg-white/90 dark:bg-slate-900/60 px-4 py-3 space-y-2';
        const header = document.createElement('div');
        header.className = 'flex flex-wrap items-start justify-between gap-2';
        header.innerHTML = `<h5 class="text-sm font-semibold">${escapeHtml(mission.title)}</h5><span class="pill">+${mission.xp} XP</span>`;
        const meta = document.createElement('p');
        meta.className = 'text-xs text-slate-500 dark:text-slate-400';
        const validityText = formatDateShort(mission.validity);
        meta.textContent = `${formatAudienceLabel(mission.audience)} • válido até ${validityText || '—'}`;
        const description = document.createElement('p');
        description.className = 'text-sm text-slate-600 dark:text-slate-300';
        description.textContent = mission.description || '';
        li.append(header, meta, description);
        if (Array.isArray(mission.attachments) && mission.attachments.length) {
          const attachList = document.createElement('ul');
          attachList.className = 'space-y-1 text-xs';
          mission.attachments.forEach(link => {
            const clean = (link || '').toString().trim();
            if (!clean) return;
            const item = document.createElement('li');
            item.innerHTML = `<a class="text-primary hover:underline" href="${escapeHtml(clean)}" target="_blank" rel="noopener">${escapeHtml(clean)}</a>`;
            attachList.appendChild(item);
          });
          if (attachList.childElementCount > 0) {
            const attachTitle = document.createElement('p');
            attachTitle.className = 'text-xs font-semibold text-slate-500 dark:text-slate-400';
            attachTitle.textContent = 'Links e anexos';
            li.append(attachTitle, attachList);
          }
        }
        adminMissionListEl.appendChild(li);
      });
  }

  function setNavActive(route) {
    const normalized = normalizeRoute(route);
    appNavLinks.forEach(link => {
      const linkRoute = normalizeRoute(link.getAttribute('data-app-route'));
      const isActive = linkRoute === normalized;
      link.classList.toggle('app-nav-link-active', isActive);
      if (isActive) {
        link.setAttribute('aria-current', 'page');
      } else {
        link.removeAttribute('aria-current');
      }
    });
  }

  function syncNavAvailability() {
    appNavLinks.forEach(link => {
      const route = normalizeRoute(link.getAttribute('data-app-route'));
      const def = ROUTE_DEFS[route];
      const requiresAuth = !!(def && def.requiresAuth);
      const requiresAdmin = !!(def && def.requiresAdmin);
      const disabled = (requiresAuth && !currentUser) || (requiresAdmin && !(currentUser && currentUser.isAdmin));
      link.setAttribute('aria-disabled', disabled ? 'true' : 'false');
      link.tabIndex = disabled ? -1 : 0;
      const li = link.closest('li');
      const guestVisible = route === 'inicio' || route === 'sobre';
      const hideForGuest = !currentUser && !guestVisible;
      const hideForAdmin = requiresAdmin && !(currentUser && currentUser.isAdmin);
      if (li) {
        li.classList.toggle('hidden', hideForGuest || hideForAdmin);
      }
    });
  }

  function ensureRouteAfterAuthChange() {
    const def = ROUTE_DEFS[currentAppRoute] || ROUTE_DEFS.inicio;
    if (def.requiresAdmin && !(currentUser && currentUser.isAdmin)) {
      navigateTo(currentUser ? 'inicio' : 'sobre', { replace: true, silent: true });
      return;
    }
    if (def.requiresAuth && !currentUser) {
      navigateTo('inicio', { replace: true, silent: true });
      return;
    }
    if (!currentUser && def.slug !== 'inicio' && def.slug !== 'sobre') {
      navigateTo('sobre', { replace: true, silent: true });
    }
  }

  function updateHistoryForRoute(route, replace) {
    if (typeof window === 'undefined' || !window.history || !window.location) return;
    const def = ROUTE_DEFS[route] || ROUTE_DEFS.inicio;
    const slug = def.slug || 'inicio';
    const base = appBasePath || '/';
    const url = base + slug;
    const state = { appRoute: route };
    if (replace) {
      window.history.replaceState(state, '', url);
    } else {
      window.history.pushState(state, '', url);
    }
  }

  function renderRouteEntry(route) {
    const normalized = normalizeRoute(route);
    if (normalized === 'sobre') {
      renderAboutPage();
    } else if (normalized === 'aulas') {
      renderLearningTracksPage();
    } else if (normalized === 'forum') {
      renderForumPage();
    } else if (normalized === 'conquistas') {
      renderAchievementsShowcase();
      populateAchievementsCatalog();
    } else if (normalized === 'admin') {
      renderAdminBulletin();
      renderAdminMissionList();
    }
  }

  function applyRoute(route, options = {}) {
    const normalized = normalizeRoute(route);
    const force = !!options.force;
    if (currentAppRoute === normalized && !force) {
      if (!options.skipHistory) updateHistoryForRoute(normalized, !!options.replaceHistory);
      return;
    }
    currentAppRoute = normalized;
    appPageSections.forEach(section => {
      const page = normalizeRoute(section.getAttribute('data-app-page'));
      const visible = page === normalized;
      section.classList.toggle('hidden', !visible);
    });
    setNavActive(normalized);
    if (!options.skipHistory) {
      updateHistoryForRoute(normalized, !!options.replaceHistory);
    }
    renderRouteEntry(normalized);
  }

  function navigateTo(route, options = {}) {
    const normalized = normalizeRoute(route);
    const def = ROUTE_DEFS[normalized];
    let target = normalized;
    let replaceHistory = !!options.replace;
    const silent = !!options.silent;
    if (def?.requiresAdmin && !(currentUser && currentUser.isAdmin)) {
      if (!silent) {
        showToast({ message: 'Somente administradores podem acessar esta área.', type: 'warning' });
      }
      target = currentUser ? 'inicio' : 'sobre';
      replaceHistory = true;
    } else if (def?.requiresAuth && !currentUser) {
      if (!silent) {
        showToast({ message: 'Faça login para acessar esta área.', type: 'warning' });
      }
      target = 'inicio';
      replaceHistory = true;
    }
    applyRoute(target, { replaceHistory, skipHistory: !!options.skipHistory, force: !!options.force });
  }

  function bootstrapRouter() {
    if (typeof window === 'undefined') return;
    appBasePath = computeBasePath(window.location.pathname || '/');
    const initialRouteRaw = typeof window !== 'undefined' && window.__INITIAL_ROUTE__
      ? window.__INITIAL_ROUTE__.toString()
      : '';
    const pathRoute = resolveRouteFromPath(window.location.pathname || '/');
    const initialRoute = normalizeRoute(initialRouteRaw || pathRoute);
    appNavLinks.forEach(link => {
      link.addEventListener('click', event => {
        event.preventDefault();
        if (link.getAttribute('aria-disabled') === 'true') return;
        const route = normalizeRoute(link.getAttribute('data-app-route'));
        navigateTo(route);
      });
    });
    applyRoute(initialRoute, { replaceHistory: true, force: true });
    window.addEventListener('popstate', event => {
      const stateRoute = event.state && event.state.appRoute
        ? event.state.appRoute
        : resolveRouteFromPath(window.location.pathname || '/');
      applyRoute(stateRoute, { replaceHistory: true, skipHistory: true, force: true });
    });
  }

  function getFirstName(name) {
    const text = (name || '').toString().trim();
    if (!text) return '';
    const parts = text.split(/\s+/);
    return parts.length ? parts[0] : text;
  }

  function computeNextModuleNumber() {
    const scores = studentStoryState.metrics && studentStoryState.metrics.moduleBestScores
      ? studentStoryState.metrics.moduleBestScores
      : {};
    for (let i = 1; i <= TOTAL_MODULES; i += 1) {
      const key = String(i);
      const score = Number(scores[key] || 0);
      if (!Number.isFinite(score) || score < 70) {
        return i;
      }
    }
    return null;
  }

  function getModuleInfo(moduleNumber) {
    const number = Number(moduleNumber);
    if (!Number.isFinite(number)) {
      return { number: null, title: 'Módulo em construção', tagline: '', focus: '', xpTarget: 40, keySkills: [] };
    }
    const found = moduleCatalog.find(item => Number(item.number) === number);
    if (found) return found;
    return {
      number,
      title: `Módulo ${number}`,
      tagline: 'Conteúdo em desenvolvimento.',
      focus: 'Fundamentos do Excel',
      xpTarget: 40,
      keySkills: []
    };
  }

  function buildLessonActivities(moduleData) {
    const focusText = (moduleData && moduleData.focus) ? moduleData.focus.toLowerCase() : 'o conteúdo do módulo';
    const totalXP = Math.max(15, Number(moduleData && moduleData.xpTarget ? moduleData.xpTarget : 40));
    let xpIntro = Math.max(5, Math.round(totalXP * 0.3));
    let xpQuiz = Math.max(5, Math.round(totalXP * 0.2));
    let xpPractice = totalXP - xpIntro - xpQuiz;
    if (xpPractice < 10) {
      xpPractice = 10;
      const remaining = totalXP - xpPractice;
      xpIntro = Math.max(5, Math.round(remaining * 0.6));
      xpQuiz = Math.max(5, remaining - xpIntro);
    }
    let xpReview = totalXP - xpIntro - xpPractice;
    if (xpReview < 5) {
      xpReview = 5;
      xpPractice = Math.max(10, totalXP - xpIntro - xpReview);
    }
    const diff = totalXP - (xpIntro + xpPractice + xpReview);
    if (diff !== 0) {
      xpPractice += diff;
    }
    return [
      { icon: '📘', title: 'Aquecimento guiado', xp: xpIntro, description: `Revise as aulas rápidas sobre ${focusText}.` },
      { icon: '💻', title: 'Projeto aplicado', xp: xpPractice, description: `Replique o passo a passo em uma planilha real envolvendo ${focusText}.` },
      { icon: '🎯', title: 'Desafio relâmpago', xp: Math.max(5, xpReview), description: `Responda ao quiz para validar os conceitos de ${focusText}.` }
    ];
  }

  function formatShortDate(value) {
    const parsed = parseDateValue(value);
    if (!parsed) return '';
    if (shortDateFormatter) {
      try {
        return shortDateFormatter.format(parsed);
      } catch (err) {
        // fallback below
      }
    }
    return parsed.toLocaleDateString('pt-BR');
  }

  function formatDateShort(value) {
    return formatShortDate(value);
  }

  function hasCheckinToday() {
    if (!Array.isArray(historyState.checkins)) return false;
    const today = new Date();
    const todayIso = today.toISOString().slice(0, 10);
    return historyState.checkins.some(item => {
      if (!item) return false;
      const day = (item.day || '').toString().slice(0, 10);
      return day === todayIso;
    });
  }

  function setActiveSubPageButtons(target) {
    const buttons = Array.from(document.querySelectorAll('.student-nav-btn[data-nav-target]'));
    buttons.forEach(btn => {
      const key = btn.getAttribute('data-nav-target');
      const isActive = key === target;
      btn.classList.toggle('student-nav-btn-active', isActive);
      btn.setAttribute('aria-pressed', isActive ? 'true' : 'false');
    });
  }

  function updateBreadcrumbSubPage(pageKey) {
    if (!breadcrumbSubPageItem || !breadcrumbSubPageLabel) return;
    if (!currentUser || !pageKey || pageKey === 'home') {
      breadcrumbSubPageItem.classList.add('hidden');
      breadcrumbSubPageLabel.textContent = '';
      return;
    }
    const meta = SUBPAGE_META[pageKey];
    breadcrumbSubPageLabel.textContent = meta && meta.title ? meta.title : 'Explorar';
    breadcrumbSubPageItem.classList.remove('hidden');
  }

  function setSubPageHeader(pageKey) {
    if (!studentSubPageTitleEl || !studentSubPageSubtitleEl) return;
    if (!pageKey || pageKey === 'home') {
      studentSubPageTitleEl.textContent = 'Conteúdo complementar';
      studentSubPageSubtitleEl.textContent = 'Escolha uma opção para continuar sua jornada.';
      return;
    }
    const meta = SUBPAGE_META[pageKey] || {};
    studentSubPageTitleEl.textContent = meta.title || 'Conteúdo complementar';
    studentSubPageSubtitleEl.textContent = meta.subtitle || 'Selecione uma opção para continuar evoluindo.';
  }

  function buildDailyMissions() {
    if (!currentUser) {
      return [
        {
          id: 'login',
          icon: '🔐',
          title: 'Entre na plataforma',
          description: 'Crie uma conta ou faça login para liberar as missões do dia.',
          status: 'pending',
          statusLabel: 'Aguardando login',
          actionLabel: 'Fazer login',
          action: () => {
            const input = $('#lEmail');
            if (input) {
              input.focus({ preventScroll: true });
            }
          }
        }
      ];
    }

    const missions = [];
    missions.push({
      id: 'checkin',
      icon: '✅',
      title: 'Registrar o check-in diário',
      description: studentStoryState.checkinToday
        ? 'Presença confirmada. Volte amanhã para manter a sequência ativa!'
        : 'Confirme sua presença de hoje para garantir XP e manter a sequência de estudos.',
      status: studentStoryState.checkinToday ? 'done' : 'pending',
      statusLabel: studentStoryState.checkinToday ? 'Concluído' : 'Disponível',
      actionLabel: studentStoryState.checkinToday ? null : 'Fazer check-in',
      action: studentStoryState.checkinToday
        ? null
        : () => {
            const btn = $('#btnCheckin');
            if (btn) {
              btn.scrollIntoView({ behavior: 'smooth', block: 'center' });
              btn.focus({ preventScroll: true });
            }
          }
    });

    const dayIndex = (new Date()).getDay();
    const quest = weeklySideQuests[dayIndex] || weeklySideQuests[0];
    missions.push({
      id: 'weekly',
      icon: '🗓️',
      title: quest.title,
      description: quest.description,
      status: 'pending',
      statusLabel: 'Sugestão do dia'
    });

    const nextModuleNumber = computeNextModuleNumber();
    if (nextModuleNumber) {
      const moduleData = getModuleInfo(nextModuleNumber);
      missions.push({
        id: 'module-preview',
        icon: '🎯',
        title: `Preparar módulo ${nextModuleNumber}`,
        description: `Reserve um tempo para avançar em “${moduleData.title}” e registrar seu desempenho.`,
        status: 'pending',
        statusLabel: 'Vale XP',
        actionLabel: 'Ver roteiro',
        action: () => openStudentSubPage('next-lesson')
      });
    } else {
      missions.push({
        id: 'review',
        icon: '🌟',
        title: 'Revisar conquistas',
        description: 'Você concluiu todos os módulos! Revise as conquistas e celebre os resultados com a turma.',
        status: 'done',
        statusLabel: 'Curso completo'
      });
    }

    return missions;
  }

  function renderDailyMissions() {
    if (!dailyMissionListEl) return;
    const missions = buildDailyMissions();
    dailyMissionListEl.innerHTML = '';
    if (!missions.length) {
      const empty = document.createElement('li');
      empty.className = 'text-xs text-slate-500 dark:text-slate-400';
      empty.textContent = 'Sem missões disponíveis no momento.';
      dailyMissionListEl.appendChild(empty);
      return;
    }
    missions.forEach(mission => {
      const li = document.createElement('li');
      li.className = 'mission-item' + (mission.status === 'done' ? ' mission-item-complete' : '');
      const icon = document.createElement('div');
      icon.className = 'mission-icon';
      icon.textContent = mission.icon || '⭐';
      const content = document.createElement('div');
      content.className = 'mission-content';
      const title = document.createElement('div');
      title.className = 'mission-title';
      title.textContent = mission.title;
      const description = document.createElement('p');
      description.className = 'mission-description';
      description.textContent = mission.description;
      const status = document.createElement('span');
      status.className = 'mission-status';
      status.textContent = mission.statusLabel || (mission.status === 'done' ? 'Concluído' : 'Disponível');
      content.appendChild(title);
      content.appendChild(description);
      content.appendChild(status);
      if (typeof mission.action === 'function' && mission.status !== 'done' && mission.actionLabel) {
        const actionBtn = document.createElement('button');
        actionBtn.type = 'button';
        actionBtn.className = 'btn btn-primary mission-action-btn';
        actionBtn.textContent = mission.actionLabel;
        actionBtn.addEventListener('click', event => {
          event.preventDefault();
          mission.action();
        });
        content.appendChild(actionBtn);
      }
      li.appendChild(icon);
      li.appendChild(content);
      dailyMissionListEl.appendChild(li);
    });
  }

  function renderStudentHero() {
    const firstName = currentUser ? getFirstName(currentUser.name) : '';
    if (studentHeroGreetingEl) {
      studentHeroGreetingEl.textContent = currentUser ? `Olá, ${firstName}!` : 'Bem-vindo!';
    }

    if (studentNarrativeEl) {
      if (!currentUser) {
        studentNarrativeEl.textContent = 'Crie uma conta ou faça login para acompanhar sua história de evolução no Excel.';
      } else {
        const xpText = `${formatNumber(studentStoryState.xp)} XP`;
        const modulesText = `${studentStoryState.modulesCompleted}/${studentStoryState.totalModules} módulos concluídos`;
        const achievementsTotal = studentStoryState.totalAchievements || 0;
        const achievementsText = achievementsTotal > 0
          ? `${studentStoryState.achievementsUnlocked}/${achievementsTotal} conquistas desbloqueadas`
          : 'Conquistas aguardando seus primeiros desbloqueios';
        const streak = Number(studentStoryState.metrics.checkinCurrentStreak || 0);
        const streakText = streak > 0
          ? `Sua sequência de check-ins está em ${streak} dia${streak > 1 ? 's' : ''}.`
          : 'Comece agora com o check-in diário para criar sua sequência.';
        studentNarrativeEl.textContent = `Você já acumulou ${xpText} e concluiu ${modulesText}. ${achievementsText}. ${streakText}`;
      }
    }

    if (studentHeroStatsEl) {
      studentHeroStatsEl.innerHTML = '';
      if (!currentUser) {
        const chip = document.createElement('span');
        chip.className = 'pill';
        chip.textContent = 'Missões personalizadas liberadas após o login.';
        studentHeroStatsEl.appendChild(chip);
      } else {
        const stats = [];
        stats.push(`${formatNumber(studentStoryState.xp)} XP`);
        stats.push(`${studentStoryState.modulesCompleted}/${studentStoryState.totalModules} módulos`);
        if (studentStoryState.totalAchievements > 0) {
          stats.push(`${studentStoryState.achievementsUnlocked}/${studentStoryState.totalAchievements} conquistas`);
        }
        const streak = Number(studentStoryState.metrics.checkinCurrentStreak || 0);
        if (streak > 0) {
          stats.push(`Streak: ${streak} dia${streak > 1 ? 's' : ''}`);
        }
        stats.forEach(text => {
          const chip = document.createElement('span');
          chip.className = 'milestone-chip';
          chip.textContent = text;
          studentHeroStatsEl.appendChild(chip);
        });
      }
    }

    const nextModuleNumber = computeNextModuleNumber();
    if (nextLessonPreviewEl) {
      if (!currentUser) {
        nextLessonPreviewEl.textContent = 'Faça login para liberar sua próxima aula.';
      } else if (!nextModuleNumber) {
        nextLessonPreviewEl.textContent = 'Trilha concluída! Revise o projeto final e celebre seus resultados.';
      } else {
        const moduleData = getModuleInfo(nextModuleNumber);
        nextLessonPreviewEl.textContent = `Módulo ${nextModuleNumber} · ${moduleData.title}`;
      }
    }

    if (nextLessonProgressHintEl) {
      if (!currentUser) {
        nextLessonProgressHintEl.textContent = '';
      } else if (!nextModuleNumber) {
        nextLessonProgressHintEl.textContent = 'Aproveite para compartilhar aprendizados e apoiar colegas no mural.';
      } else {
        const moduleData = getModuleInfo(nextModuleNumber);
        const scores = studentStoryState.metrics && studentStoryState.metrics.moduleBestScores
          ? studentStoryState.metrics.moduleBestScores
          : {};
        const bestScore = Number(scores[String(nextModuleNumber)] || 0);
        if (bestScore > 0 && bestScore < 70) {
          nextLessonProgressHintEl.textContent = `Você já tentou este módulo e alcançou ${bestScore}%. Revise a aula e tente novamente para conquistar a pontuação cheia.`;
        } else {
          nextLessonProgressHintEl.textContent = moduleData.tagline || 'Prepare-se para avançar ao próximo nível.';
        }
      }
    }

    if (studentHeroGuidanceEl) {
      if (!currentUser) {
        studentHeroGuidanceEl.textContent = 'Acompanhe aqui as missões do dia e libere a próxima aula após o login.';
      } else if (!nextModuleNumber) {
        studentHeroGuidanceEl.textContent = 'Continue praticando, revise conquistas e compartilhe dicas com a turma.';
      } else {
        studentHeroGuidanceEl.textContent = `Reserve um momento hoje para avançar no módulo ${nextModuleNumber} e registrar o resultado em "Enviar atividade".`;
      }
    }

    renderDailyMissions();
  }

  function updateStudentStoryState(partial = {}) {
    if (!partial || typeof partial !== 'object') return;
    if (partial.xp !== undefined) {
      studentStoryState.xp = Math.max(0, Number(partial.xp) || 0);
    }
    if (partial.level !== undefined) {
      studentStoryState.level = Math.max(1, Number(partial.level) || 1);
    }
    if (partial.modulesCompleted !== undefined) {
      studentStoryState.modulesCompleted = Math.max(0, Number(partial.modulesCompleted) || 0);
    }
    if (partial.achievementsUnlocked !== undefined) {
      studentStoryState.achievementsUnlocked = Math.max(0, Number(partial.achievementsUnlocked) || 0);
    }
    if (partial.totalAchievements !== undefined) {
      studentStoryState.totalAchievements = Math.max(0, Number(partial.totalAchievements) || 0);
    }
    if (partial.checkinToday !== undefined) {
      studentStoryState.checkinToday = !!partial.checkinToday;
    }
    if (partial.metrics) {
      const nextMetrics = Object.assign({}, studentStoryState.metrics, partial.metrics);
      if (partial.metrics.moduleBestScores) {
        nextMetrics.moduleBestScores = Object.assign(
          {},
          studentStoryState.metrics.moduleBestScores || {},
          partial.metrics.moduleBestScores
        );
      }
      studentStoryState.metrics = nextMetrics;
      if (partial.metrics.modulesCompleted !== undefined) {
        studentStoryState.modulesCompleted = Math.max(0, Number(partial.metrics.modulesCompleted) || 0);
      }
      if (partial.metrics.xpTotal !== undefined && Number.isFinite(Number(partial.metrics.xpTotal))) {
        studentStoryState.xp = Math.max(0, Number(partial.metrics.xpTotal));
      }
    }
    studentStoryState.nextModuleNumber = computeNextModuleNumber();
    renderStudentHero();
    if (activeSubPage === 'next-lesson') {
      populateNextLessonPage();
    }
    if (activeSubPage === 'achievements-catalog') {
      populateAchievementsCatalog();
    }
  }

  function resetStudentStoryState() {
    studentStoryState.xp = 0;
    studentStoryState.level = 1;
    studentStoryState.modulesCompleted = 0;
    studentStoryState.achievementsUnlocked = 0;
    studentStoryState.totalAchievements = 0;
    studentStoryState.metrics = {};
    studentStoryState.checkinToday = false;
    studentStoryState.nextModuleNumber = 1;
    renderStudentHero();
  }

  function populateNextLessonPage() {
    if (!studentSubPageContainer) return;
    const container = studentSubPageContainer.querySelector('[data-subpage="next-lesson"]');
    if (!container) return;
    const moduleNumber = computeNextModuleNumber();
    const mainSection = container.querySelector('[data-role="lesson-main"]');
    const completeSection = container.querySelector('[data-role="lesson-complete"]');

    if (!moduleNumber) {
      if (mainSection) mainSection.classList.add('hidden');
      if (completeSection) {
        completeSection.classList.remove('hidden');
        const completeTitle = completeSection.querySelector('[data-role="lesson-complete-title"]');
        if (completeTitle) completeTitle.textContent = 'Parabéns! Você concluiu todos os módulos principais.';
      }
      return;
    }

    if (mainSection) mainSection.classList.remove('hidden');
    if (completeSection) completeSection.classList.add('hidden');

    const moduleData = getModuleInfo(moduleNumber);
    const titleEl = container.querySelector('[data-role="lesson-title"]');
    if (titleEl) titleEl.textContent = `Módulo ${moduleNumber} · ${moduleData.title}`;
    const summaryEl = container.querySelector('[data-role="lesson-summary"]');
    if (summaryEl) summaryEl.textContent = moduleData.tagline || '';
    const focusEl = container.querySelector('[data-role="lesson-focus"]');
    if (focusEl) focusEl.textContent = moduleData.focus || '';
    const xpEl = container.querySelector('[data-role="lesson-xp"]');
    if (xpEl) xpEl.textContent = `${moduleData.xpTarget || 40} XP em jogo`;
    const statusEl = container.querySelector('[data-role="lesson-status"]');
    if (statusEl) {
      const scores = studentStoryState.metrics.moduleBestScores || {};
      const bestScore = Number(scores[String(moduleNumber)] || 0);
      statusEl.textContent = bestScore >= 70
        ? `Melhor nota registrada: ${Math.round(bestScore)}%`
        : 'Ainda sem envio de atividade — prepare-se para registrar seu resultado.';
    }
    const planIntroEl = container.querySelector('[data-role="lesson-plan-intro"]');
    if (planIntroEl) {
      planIntroEl.textContent = `Use este roteiro para dominar ${moduleData.focus.toLowerCase()} e somar XP na plataforma.`;
    }
    const skillsList = container.querySelector('[data-role="lesson-skills"]');
    if (skillsList) {
      skillsList.innerHTML = '';
      const skills = Array.isArray(moduleData.keySkills) ? moduleData.keySkills : [];
      if (!skills.length) {
        const li = document.createElement('li');
        li.className = 'text-xs text-slate-500 dark:text-slate-400';
        li.textContent = 'Habilidades serão disponibilizadas em breve.';
        skillsList.appendChild(li);
      } else {
        skills.forEach(skill => {
          const li = document.createElement('li');
          li.className = 'milestone-chip';
          li.textContent = skill;
          skillsList.appendChild(li);
        });
      }
    }

    const planHighlights = container.querySelector('[data-role="lesson-plan-highlights"]');
    if (planHighlights) {
      planHighlights.innerHTML = '';
      const highlights = [
        {
          icon: '🧭',
          title: 'Preparação rápida',
          description: 'Reserve 10 minutos para revisar as notas do módulo anterior e montar uma lista de dúvidas.'
        },
        {
          icon: '🚀',
          title: 'Aplicação imediata',
          description: 'Replique o exemplo da aula em uma planilha real e registre o resultado em “Enviar atividade”.'
        }
      ];
      highlights.forEach(item => {
        const card = document.createElement('div');
        card.className = 'rounded-2xl border border-slate-200 dark:border-slate-700/70 bg-white/80 dark:bg-slate-900/60 p-4 shadow-sm';
        card.innerHTML = `
          <div class="text-2xl mb-2">${item.icon}</div>
          <h4 class="text-sm font-semibold mb-1">${item.title}</h4>
          <p class="text-sm text-slate-500 dark:text-slate-300">${item.description}</p>
        `;
        planHighlights.appendChild(card);
      });
    }

    const activitiesList = container.querySelector('[data-role="lesson-activities"]');
    const activitiesPointsEl = container.querySelector('[data-role="lesson-activities-points"]');
    if (activitiesPointsEl) {
      activitiesPointsEl.textContent = `${moduleData.xpTarget || 40} XP distribuídos`;
    }
    if (activitiesList) {
      activitiesList.innerHTML = '';
      const activities = buildLessonActivities(moduleData);
      activities.forEach((activity, index) => {
        const li = document.createElement('li');
        li.className = 'mission-item';
        const icon = document.createElement('div');
        icon.className = 'mission-icon';
        icon.textContent = activity.icon || '📚';
        const content = document.createElement('div');
        content.className = 'mission-content';
        const title = document.createElement('div');
        title.className = 'mission-title';
        title.textContent = `${index + 1}. ${activity.title}`;
        const description = document.createElement('p');
        description.className = 'mission-description';
        description.textContent = activity.description;
        const status = document.createElement('span');
        status.className = 'mission-status';
        status.textContent = `+${formatNumber(activity.xp || 0)} XP`;
        content.appendChild(title);
        content.appendChild(description);
        content.appendChild(status);
        li.appendChild(icon);
        li.appendChild(content);
        activitiesList.appendChild(li);
      });
    }
  }

  function populateAchievementsCatalog() {
    if (!studentSubPageContainer) return;
    const container = studentSubPageContainer.querySelector('[data-subpage="achievements-catalog"]');
    if (!container) return;
    const loadingEl = container.querySelector('[data-role="achievement-loading"]');
    const errorEl = container.querySelector('[data-role="achievement-error"]');
    const listEl = container.querySelector('[data-role="achievement-list"]');
    const emptyEl = container.querySelector('[data-role="achievement-empty"]');
    const summaryEl = container.querySelector('[data-role="achievement-summary"]');

    if (summaryEl) {
      const unlockedNow = achievementsState.summary && achievementsState.summary.unlocked
        ? achievementsState.summary.unlocked
        : 0;
      const totalNow = achievementsState.summary && achievementsState.summary.total
        ? achievementsState.summary.total
        : 0;
      summaryEl.textContent = `${formatNumber(unlockedNow)}/${formatNumber(totalNow)} desbloqueadas`;
    }

    if (achievementsState.loading) {
      if (loadingEl) loadingEl.classList.remove('hidden');
      if (errorEl) errorEl.classList.add('hidden');
      if (listEl) listEl.classList.add('hidden');
      if (emptyEl) emptyEl.classList.add('hidden');
      return;
    }

    if (loadingEl) loadingEl.classList.add('hidden');

    if (achievementsState.error) {
      if (errorEl) {
        errorEl.textContent = achievementsState.error;
        errorEl.classList.remove('hidden');
      }
      if (listEl) listEl.classList.add('hidden');
      if (emptyEl) emptyEl.classList.add('hidden');
      return;
    }

    if (errorEl) errorEl.classList.add('hidden');

    const achievements = achievementsState.achievements || [];
    if (!achievements.length) {
      if (listEl) listEl.classList.add('hidden');
      if (emptyEl) {
        emptyEl.textContent = currentUser
          ? 'Nenhuma conquista cadastrada ainda.'
          : 'Faça login para visualizar as conquistas disponíveis.';
        emptyEl.classList.remove('hidden');
      }
      return;
    }

    if (listEl) {
      listEl.innerHTML = '';
      listEl.classList.remove('hidden');
      achievements.forEach(item => {
        const card = document.createElement('article');
        const classes = ['achievement-card'];
        classes.push(item.unlocked ? 'achievement-card-unlocked' : 'achievement-card-locked');
        if (!item.unlocked && item.readyToUnlock) {
          classes.push('achievement-card-ready');
        }
        card.className = classes.join(' ');
        const header = document.createElement('div');
        header.className = 'flex items-center justify-between mb-3';
        header.innerHTML = `
          <span class="achievement-icon">${item.icon || '🏆'}</span>
          <span class="achievement-xp">${formatNumber(item.rewardXP || 0)} XP</span>
        `;
        const title = document.createElement('h4');
        title.className = 'text-base font-semibold';
        title.textContent = item.title || 'Conquista';
        const description = document.createElement('p');
        description.className = 'text-sm text-slate-500 dark:text-slate-300 mb-3';
        description.textContent = item.description || '';
        const status = document.createElement('p');
        status.className = 'text-xs font-semibold text-slate-500 dark:text-slate-300 mb-2';
        if (item.unlocked) {
          const unlockedAt = item.unlockedAt ? formatShortDate(item.unlockedAt) : '';
          status.textContent = unlockedAt ? `Desbloqueada em ${unlockedAt}` : 'Conquista desbloqueada';
        } else if (item.readyToUnlock) {
          status.textContent = 'Pronto para resgatar — finalize o requisito e atualize o fórum.';
        } else {
          status.textContent = item.progressLabel || 'Em andamento';
        }
        const track = document.createElement('div');
        track.className = 'achievement-progress-track';
        const progress = document.createElement('div');
        progress.className = 'achievement-progress-bar';
        const pct = Math.max(0, Math.min(100, Number(item.progressPct || 0)));
        progress.style.width = `${pct}%`;
        track.appendChild(progress);
        card.appendChild(header);
        card.appendChild(title);
        card.appendChild(description);
        card.appendChild(status);
        card.appendChild(track);
        listEl.appendChild(card);
      });
    }

    if (emptyEl) emptyEl.classList.add('hidden');
  }

  function attachNavListeners(scope = document) {
    if (!scope) return;
    const nodes = Array.from(scope.querySelectorAll('[data-nav-target]'));
    nodes.forEach(node => {
      if (node.dataset.navBound === 'true') return;
      node.dataset.navBound = 'true';
      node.addEventListener('click', event => {
        event.preventDefault();
        const target = node.getAttribute('data-nav-target') || 'home';
        openStudentSubPage(target);
      });
    });
  }

  function openStudentSubPage(target) {
    const normalized = (target || 'home').toString();
    if (normalized !== 'home' && !currentUser) {
      showToast({ message: 'Faça login para acessar esta área.', type: 'warning' });
      return;
    }

    const isHome = normalized === 'home';
    homeOnlySections.forEach(section => {
      if (!section) return;
      section.classList.toggle('hidden', !isHome);
    });

    if (isHome) {
      activeSubPage = 'home';
      setActiveSubPageButtons('home');
      updateBreadcrumbSubPage(null);
      setSubPageHeader(null);
      if (studentSubPageSection) studentSubPageSection.classList.add('hidden');
      if (studentSubPageLoadingEl) studentSubPageLoadingEl.classList.add('hidden');
      if (studentSubPageErrorEl) studentSubPageErrorEl.classList.add('hidden');
      if (studentSubPageContainer) studentSubPageContainer.innerHTML = '';
      return;
    }

    activeSubPage = normalized;
    setActiveSubPageButtons(normalized);
    updateBreadcrumbSubPage(normalized);
    setSubPageHeader(normalized);
    if (studentSubPageSection) studentSubPageSection.classList.remove('hidden');
    if (studentSubPageLoadingEl) studentSubPageLoadingEl.classList.remove('hidden');
    if (studentSubPageErrorEl) studentSubPageErrorEl.classList.add('hidden');
    if (studentSubPageContainer) studentSubPageContainer.innerHTML = '';

    const expectedPage = normalized;
    google.script.run
      .withFailureHandler(err => {
        if (activeSubPage !== expectedPage) return;
        if (studentSubPageLoadingEl) studentSubPageLoadingEl.classList.add('hidden');
        if (studentSubPageErrorEl) {
          studentSubPageErrorEl.textContent = err?.message || 'Não foi possível carregar a página agora.';
          studentSubPageErrorEl.classList.remove('hidden');
        }
      })
      .withSuccessHandler(html => {
        if (activeSubPage !== expectedPage) return;
        if (studentSubPageLoadingEl) studentSubPageLoadingEl.classList.add('hidden');
        if (studentSubPageErrorEl) studentSubPageErrorEl.classList.add('hidden');
        if (studentSubPageContainer) {
          studentSubPageContainer.innerHTML = html || '';
          attachNavListeners(studentSubPageContainer);
        }
        if (studentSubPageSection && typeof studentSubPageSection.scrollIntoView === 'function') {
          studentSubPageSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
        if (expectedPage === 'next-lesson') {
          populateNextLessonPage();
        } else if (expectedPage === 'achievements-catalog') {
          populateAchievementsCatalog();
        }
      })
      .renderStudentSubPage({ page: normalized, userId: currentUser ? currentUser.id : null });
  }

  function renderHighlightList(listEl, items, emptyEl) {
    if (!listEl) return;
    listEl.innerHTML = '';
    const data = Array.isArray(items) ? items.map(item => (item || '').toString().trim()).filter(Boolean) : [];
    if (!data.length) {
      if (emptyEl) emptyEl.classList.remove('hidden');
      return;
    }
    if (emptyEl) emptyEl.classList.add('hidden');
    data.forEach(text => {
      const li = document.createElement('li');
      li.className = 'rounded-xl bg-slate-100 dark:bg-slate-800/70 px-3 py-2 shadow-sm';
      li.textContent = text;
      listEl.appendChild(li);
    });
  }

  function formatFileSize(value) {
    const bytes = Number(value);
    if (!Number.isFinite(bytes) || bytes <= 0) return '';
    const units = ['B', 'KB', 'MB', 'GB', 'TB'];
    let size = bytes;
    let unitIndex = 0;
    while (size >= 1024 && unitIndex < units.length - 1) {
      size /= 1024;
      unitIndex += 1;
    }
    try {
      return `${new Intl.NumberFormat('pt-BR', { maximumFractionDigits: size >= 10 ? 1 : 2 }).format(size)} ${units[unitIndex]}`;
    } catch (err) {
      return `${size.toFixed(size >= 10 ? 1 : 2)} ${units[unitIndex]}`;
    }
  }

  function formatMaterialDate(value) {
    const parsed = parseDateValue(value);
    if (!parsed) return '';
    try {
      return new Intl.DateTimeFormat('pt-BR', {
        day: '2-digit',
        month: 'short',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      }).format(parsed);
    } catch (err) {
      return parsed.toLocaleString('pt-BR');
    }
  }

  function renderMaterialList(listEl, items, emptyEl, options = {}) {
    if (listEl) listEl.innerHTML = '';
    const list = Array.isArray(items) ? items.filter(item => item && typeof item === 'object') : [];
    if (!list.length) {
      if (emptyEl) {
        if (options.emptyText) emptyEl.textContent = options.emptyText;
        emptyEl.classList.remove('hidden');
      }
      return;
    }
    if (emptyEl) {
      if (options.emptyText) emptyEl.textContent = options.emptyText;
      emptyEl.classList.add('hidden');
    }
    list.forEach(item => {
      const li = document.createElement('li');
      li.className = 'attachment-item';
      const info = document.createElement('div');
      info.className = 'attachment-info';
      const icon = document.createElement('div');
      icon.className = 'attachment-icon';
      icon.textContent = options.icon || '📁';
      const textWrap = document.createElement('div');
      textWrap.className = 'attachment-text';
      const nameLink = document.createElement(item.url ? 'a' : 'span');
      nameLink.className = 'attachment-name';
      nameLink.textContent = item.name || 'Arquivo';
      if (item.url) {
        nameLink.href = item.url;
        nameLink.target = '_blank';
        nameLink.rel = 'noopener';
      }
      textWrap.appendChild(nameLink);
      if (item.description) {
        const desc = document.createElement('p');
        desc.className = 'text-xs text-slate-500 dark:text-slate-300';
        desc.textContent = item.description;
        textWrap.appendChild(desc);
      }
      const metaParts = [];
      if (options.showMeta) {
        if (Number.isFinite(Number(item.sizeBytes))) metaParts.push(formatFileSize(item.sizeBytes));
        if (item.createdAt) metaParts.push(formatMaterialDate(item.createdAt));
      }
      if (item.sharedBy) metaParts.push(item.sharedBy);
      if (metaParts.length) {
        const meta = document.createElement('span');
        meta.className = 'attachment-meta';
        meta.textContent = metaParts.join(' • ');
        textWrap.appendChild(meta);
      }
      info.appendChild(icon);
      info.appendChild(textWrap);
      li.appendChild(info);
      listEl.appendChild(li);
    });
  }

  function isAllowedMaterial(fileName, mimeType, category) {
    const rules = MATERIAL_ACCEPT[category];
    if (!rules) return false;
    const normalizedMime = (mimeType || '').toLowerCase();
    if (normalizedMime && rules.mime.includes(normalizedMime)) return true;
    const lowerName = (fileName || '').toLowerCase();
    return rules.extensions.some(ext => lowerName.endsWith(ext));
  }

  function handleUserMaterialUpload(file, category) {
    if (!file) return;
    if (!currentUser) {
      showToast({ message: 'Faça login para enviar materiais.', type: 'warning' });
      return;
    }
    const token = getSessionToken();
    if (!token) {
      expireSession(SESSION_EXPIRED_FALLBACK);
      return;
    }
    const fileSize = typeof file.size === 'number' ? file.size : Number(file.size);
    if (Number.isFinite(fileSize) && fileSize > USER_MATERIAL_MAX_BYTES) {
      const maxMb = Math.floor(USER_MATERIAL_MAX_BYTES / (1024 * 1024));
      showToast({ message: `O arquivo deve ter até ${maxMb} MB.`, type: 'error' });
      return;
    }
    if (!isAllowedMaterial(file.name, file.type, category)) {
      showToast({ message: 'Formato de arquivo não suportado para esta categoria.', type: 'error' });
      return;
    }

    const loader = createActionLoader('Enviando arquivo...');
    const reader = new FileReader();
    reader.onerror = () => {
      loader.finish();
      showToast({ message: 'Não foi possível ler o arquivo selecionado.', type: 'error' });
    };
    reader.onload = () => {
      const dataUrl = reader.result;
      google.script.run
        .withFailureHandler(err => {
          loader.finish();
          if (handleSessionExpiredError(err)) {
            return;
          }
          showToast({ message: err?.message || 'Não foi possível enviar o arquivo.', type: 'error' });
        })
        .withSuccessHandler(res => {
          loader.finish();
          if (res && res.ok) {
            showToast({ message: res.message || 'Arquivo enviado com sucesso.', type: 'success' });
            loadEmbeds();
          } else {
            showToast({ message: (res && res.message) || 'Não foi possível enviar o arquivo.', type: 'error' });
          }
        })
        .uploadUserMaterial({
          token,
          userId: currentUser.id,
          category,
          fileName: file.name,
          mimeType: file.type,
          data: dataUrl
        });
    };
    reader.readAsDataURL(file);
  }

  function collectTextareaList(textarea) {
    if (!textarea) return [];
    const lines = textarea.value.split('\n');
    const result = [];
    lines.forEach(line => {
      const text = line.trim();
      if (!text) return;
      if (!result.includes(text)) result.push(text);
    });
    return result;
  }

  function setCommunityLimit(limit) {
    const numeric = Number(limit);
    if (!Number.isFinite(numeric) || numeric <= 0) return;
    communityCharLimit = numeric;
    if (communityLimitBadge) communityLimitBadge.textContent = `Limite: ${numeric} caracteres`;
    if (communityTextarea) communityTextarea.maxLength = numeric;
    updateCommunityCounter();
  }

  function updateCommunityCounter() {
    if (!communityCounterEl) return;
    const value = communityTextarea ? communityTextarea.value : '';
    const length = value ? value.length : 0;
    communityCounterEl.textContent = `${length}/${communityCharLimit}`;
    communityCounterEl.classList.toggle('text-rose-500', length > communityCharLimit);
  }

  function showCommunityError(message) {
    if (!communityFeedbackEl) return;
    const text = (message || '').toString().trim();
    communityFeedbackEl.textContent = text;
    communityFeedbackEl.classList.toggle('hidden', !text);
  }

  function formatFileSize(bytes) {
    const size = Number(bytes);
    if (!Number.isFinite(size) || size <= 0) return '';
    if (size >= 1024 * 1024) return `${(size / (1024 * 1024)).toFixed(1)} MB`;
    if (size >= 1024) return `${(size / 1024).toFixed(1)} KB`;
    return `${size} B`;
  }

  function escapeRegExp(text) {
    return (text || '').replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
  }

  function getSelectedCommunityTargets() {
    if (!communityTargetsSelect) return [];
    return Array.from(communityTargetsSelect.selectedOptions || [])
      .map(option => option.value)
      .filter(value => value);
  }

  function setCommunityPrivacy(value) {
    const normalized = value === 'private' ? 'private' : 'public';
    communityState.privacy = normalized;
    if (communityPrivacySelect) communityPrivacySelect.value = normalized;
    if (communityTargetsWrap) communityTargetsWrap.classList.toggle('hidden', normalized !== 'private');
    if (normalized === 'private') {
      loadShareableUsers();
    }
    syncMentionTargetsSelection();
    updateCommunityPublishState();
  }

  function renderCommunityAttachments() {
    if (!communityAttachmentList) return;
    communityAttachmentList.innerHTML = '';
    if (!communityState.attachments.length) {
      const empty = document.createElement('li');
      empty.className = 'text-xs text-slate-500';
      empty.textContent = 'Nenhum arquivo anexado no momento.';
      communityAttachmentList.appendChild(empty);
      return;
    }
    communityState.attachments.forEach(att => {
      const li = document.createElement('li');
      li.className = 'attachment-item';
      if (att && att.fileId) li.dataset.fileId = att.fileId;

      const info = document.createElement('div');
      info.className = 'attachment-info';
      const icon = document.createElement('span');
      icon.className = 'attachment-icon';
      icon.textContent = '📎';
      const textWrap = document.createElement('div');
      textWrap.className = 'attachment-text';
      const nameLink = document.createElement('a');
      nameLink.className = 'attachment-name';
      nameLink.textContent = att && att.name ? att.name : 'Arquivo';
      if (att && att.url) {
        nameLink.href = att.url;
        nameLink.target = '_blank';
        nameLink.rel = 'noopener';
      } else {
        nameLink.href = '#';
        nameLink.addEventListener('click', event => event.preventDefault());
      }
      const meta = document.createElement('span');
      meta.className = 'attachment-meta';
      const sizeText = formatFileSize(att && att.sizeBytes);
      const idText = att && att.fileId ? `ID: ${att.fileId}` : '';
      meta.textContent = [sizeText, idText].filter(Boolean).join(' • ');
      textWrap.append(nameLink, meta);
      info.append(icon, textWrap);

      const removeBtn = document.createElement('button');
      removeBtn.type = 'button';
      removeBtn.className = 'attachment-remove';
      removeBtn.textContent = 'Remover';
      removeBtn.addEventListener('click', () => discardDraftAttachment(att, removeBtn));

      li.append(info, removeBtn);
      communityAttachmentList.appendChild(li);
    });
  }

  function discardDraftAttachment(att, button) {
    if (!att || !att.id) return;
    const index = communityState.attachments.findIndex(item => item.id === att.id);
    if (index === -1) return;
    const finalize = () => {
      communityState.attachments.splice(index, 1);
      renderCommunityAttachments();
      updateCommunityPublishState();
    };
    const token = getSessionToken();
    if (!token) {
      expireSession(SESSION_EXPIRED_FALLBACK);
      finalize();
      return;
    }
    const originalLabel = button ? button.textContent : '';
    if (button) {
      button.disabled = true;
      button.textContent = 'Removendo...';
    }
    google.script.run
      .withFailureHandler(err => {
        if (button) {
          button.disabled = false;
          button.textContent = originalLabel || 'Remover';
        }
        showCommunityError(err?.message || 'Não foi possível remover o anexo agora.');
      })
      .withSuccessHandler(() => {
        if (button) {
          button.disabled = false;
          button.textContent = originalLabel || 'Remover';
        }
        showCommunityError('');
        finalize();
      })
      .discardCommunityAttachment({ token, attachmentId: att.id });
  }

  function getCommunityMentionIds() {
    return communityState.mentions
      .map(mention => (mention && mention.id) ? mention.id : '')
      .filter(Boolean);
  }

  function renderCommunityMentionChips() {
    if (!communityMentionChips) return;
    communityMentionChips.innerHTML = '';
    const mentions = communityState.mentions.filter(mention => mention && mention.id);
    if (!mentions.length) {
      communityMentionChips.classList.add('hidden');
      return;
    }
    mentions.forEach(mention => {
      const chip = document.createElement('span');
      chip.className = 'mention-chip';
      chip.dataset.id = mention.id;
      const label = document.createElement('span');
      label.textContent = '@' + (mention.name || 'Participante');
      const removeBtn = document.createElement('button');
      removeBtn.type = 'button';
      removeBtn.className = 'mention-chip-remove';
      removeBtn.dataset.action = 'remove-mention';
      removeBtn.dataset.id = mention.id;
      removeBtn.setAttribute('aria-label', `Remover ${mention.name || 'participante'} da publicação`);
      removeBtn.textContent = '×';
      chip.append(label, removeBtn);
      communityMentionChips.appendChild(chip);
    });
    communityMentionChips.classList.remove('hidden');
  }

  function syncMentionTargetsSelection() {
    if (!communityTargetsSelect) return;
    const mentionIds = new Set(getCommunityMentionIds());
    const options = Array.from(communityTargetsSelect.options || []);
    if (communityState.privacy !== 'private') {
      options.forEach(option => {
        if (!option || !option.value) return;
        if (mentionIds.has(option.value)) option.selected = false;
      });
      return;
    }
    options.forEach(option => {
      if (!option || !option.value) return;
      if (mentionIds.has(option.value)) {
        option.selected = true;
      }
    });
  }

  function insertMentionLabel(name) {
    if (!communityTextarea) return;
    const input = communityTextarea;
    const mentionLabel = '@' + (name || '');
    const start = typeof input.selectionStart === 'number' ? input.selectionStart : input.value.length;
    const end = typeof input.selectionEnd === 'number' ? input.selectionEnd : start;
    const before = input.value.slice(0, start);
    const after = input.value.slice(end);
    const needsSpaceBefore = before && !/\s$/.test(before);
    const needsSpaceAfter = after && !/^\s/.test(after);
    let insertText = mentionLabel;
    if (needsSpaceBefore) insertText = ' ' + insertText;
    if (needsSpaceAfter) insertText += ' ';
    input.value = before + insertText + after;
    const caret = before.length + insertText.length;
    try {
      input.focus({ preventScroll: true });
    } catch (err) {
      input.focus();
    }
    if (typeof input.setSelectionRange === 'function') {
      input.setSelectionRange(caret, caret);
    }
    syncMentionsFromText();
    updateCommunityCounter();
  }

  function addCommunityMention(user) {
    if (!user || !user.id) return;
    if (!communityState.mentions.some(mention => mention.id === user.id)) {
      communityState.mentions.push({
        id: user.id,
        name: user.name || user.email || 'Participante',
        isAdmin: !!user.isAdmin
      });
    }
    insertMentionLabel(user.name || user.email || '');
    renderCommunityMentionChips();
    syncMentionTargetsSelection();
    updateCommunityPublishState();
    renderCommunityMentionOptions();
    setMentionPickerVisible(false);
  }

  function removeCommunityMention(id) {
    if (!id) return;
    const mention = communityState.mentions.find(item => item.id === id);
    communityState.mentions = communityState.mentions.filter(item => item.id !== id);
    if (mention && communityTextarea) {
      const label = '@' + (mention.name || '');
      const regex = new RegExp(escapeRegExp(label), 'g');
      let text = communityTextarea.value.replace(regex, '');
      text = text.replace(/ {2,}/g, ' ').replace(/\n {1,}/g, '\n').replace(/ {1,}\n/g, '\n');
      communityTextarea.value = text;
    }
    if (communityTargetsSelect) {
      Array.from(communityTargetsSelect.options || []).forEach(option => {
        if (option && option.value === id) {
          option.selected = false;
        }
      });
    }
    renderCommunityMentionChips();
    renderCommunityMentionOptions();
    syncMentionTargetsSelection();
    syncMentionsFromText();
    updateCommunityPublishState();
  }

  function syncMentionsFromText() {
    if (!communityTextarea) return;
    const text = communityTextarea.value || '';
    const lower = text.toLowerCase();
    const preserved = [];
    communityState.mentions.forEach(mention => {
      const label = '@' + (mention.name || '');
      if (label && lower.includes(label.toLowerCase())) {
        preserved.push(mention);
      }
    });
    communityState.mentions = preserved;
    if (communityState.shareableUsers && communityState.shareableUsers.length) {
      communityState.shareableUsers.forEach(user => {
        const label = '@' + (user.name || user.email || '');
        if (!label) return;
        if (lower.includes(label.toLowerCase()) && !communityState.mentions.some(mention => mention.id === user.id)) {
          communityState.mentions.push({
            id: user.id,
            name: user.name || user.email || 'Participante',
            isAdmin: !!user.isAdmin
          });
        }
      });
    }
    renderCommunityMentionChips();
    renderCommunityMentionOptions();
    syncMentionTargetsSelection();
    updateCommunityPublishState();
  }

  function renderCommunityMentionOptions() {
    if (!communityMentionList) return;
    communityMentionList.innerHTML = '';
    const list = Array.isArray(communityState.shareableUsers) ? communityState.shareableUsers : [];
    const search = (communityState.mentionSearch || '').toLowerCase();
    const mentionIds = new Set(getCommunityMentionIds());
    const filtered = list.filter(user => {
      if (!user || !user.id) return false;
      if (mentionIds.has(user.id)) return false;
      if (!search) return true;
      const haystack = `${user.name || ''} ${user.email || ''}`.toLowerCase();
      return haystack.includes(search);
    });
    if (!filtered.length) {
      if (communityMentionEmpty) communityMentionEmpty.classList.remove('hidden');
      return;
    }
    if (communityMentionEmpty) communityMentionEmpty.classList.add('hidden');
    filtered.forEach(user => {
      const li = document.createElement('li');
      const button = document.createElement('button');
      button.type = 'button';
      button.className = 'mention-option';
      button.dataset.mentionId = user.id;
      const label = document.createElement('div');
      label.className = 'mention-option-label';
      const labelText = user.name || user.email || 'Participante';
      label.textContent = user.isAdmin ? `${labelText} • Coordenação` : labelText;
      button.appendChild(label);
      if (user.email) {
        const meta = document.createElement('div');
        meta.className = 'mention-option-meta';
        meta.textContent = user.email;
        button.appendChild(meta);
      }
      li.appendChild(button);
      communityMentionList.appendChild(li);
    });
  }

  function setMentionPickerVisible(visible) {
    const show = !!visible;
    communityState.mentionPickerOpen = show;
    if (communityMentionPanel) {
      communityMentionPanel.classList.toggle('hidden', !show);
    }
    if (communityMentionToggle) {
      communityMentionToggle.setAttribute('aria-expanded', show ? 'true' : 'false');
    }
    if (show) {
      communityState.mentionSearch = '';
      if (communityMentionSearch) {
        communityMentionSearch.value = '';
        setTimeout(() => {
          try {
            communityMentionSearch.focus({ preventScroll: true });
          } catch (err) {
            communityMentionSearch.focus();
          }
        }, 0);
      }
      if (!communityState.loadedShareableUsers) {
        loadShareableUsers();
      }
      renderCommunityMentionOptions();
    }
  }

  function toggleMentionPicker(force) {
    const next = typeof force === 'boolean' ? force : !communityState.mentionPickerOpen;
    setMentionPickerVisible(next);
  }

  function renderCommunityTargetsOptions() {
    if (!communityTargetsSelect) return;
    const previouslySelected = new Set(
      Array.from(communityTargetsSelect.options || [])
        .filter(option => option.selected)
        .map(option => option.value)
        .filter(Boolean)
    );
    communityTargetsSelect.innerHTML = '';
    if (!communityState.shareableUsers.length) {
      const empty = document.createElement('option');
      empty.disabled = true;
      empty.textContent = 'Nenhum participante disponível';
      communityTargetsSelect.appendChild(empty);
      updateCommunityPublishState();
      return;
    }
    communityState.shareableUsers.forEach(user => {
      const option = document.createElement('option');
      option.value = user.id;
      option.textContent = user.name + (user.isAdmin ? ' • Coordenação' : '');
      option.selected = previouslySelected.has(user.id);
      communityTargetsSelect.appendChild(option);
    });
    syncMentionTargetsSelection();
    updateCommunityPublishState();
  }

  function renderForumTargetSelects() {
    const selects = [forumIdeaTargetsSelect, forumPollTargetsSelect, forumQuestionTargetsSelect];
    selects.forEach(select => {
      if (!select) return;
      const previouslySelected = new Set(
        Array.from(select.selectedOptions || [])
          .map(option => option.value)
          .filter(Boolean)
      );
      select.innerHTML = '';
      if (!communityState.shareableUsers.length) {
        const empty = document.createElement('option');
        empty.disabled = true;
        empty.textContent = 'Nenhum participante disponível';
        select.appendChild(empty);
        return;
      }
      communityState.shareableUsers.forEach(user => {
        const option = document.createElement('option');
        option.value = user.id;
        option.textContent = user.name + (user.isAdmin ? ' • Coordenação' : '');
        option.selected = previouslySelected.has(user.id);
        select.appendChild(option);
      });
    });
  }

  function loadShareableUsers() {
    if (!currentUser || communityState.loadedShareableUsers) return;
    const token = getSessionToken();
    if (!token) return;
    google.script.run
      .withFailureHandler(err => {
        console.warn('Falha ao carregar destinatários:', err);
      })
      .withSuccessHandler(res => {
        const list = res && Array.isArray(res.users) ? res.users : [];
        communityState.shareableUsers = list;
        communityState.loadedShareableUsers = true;
        renderCommunityTargetsOptions();
        renderCommunityMentionOptions();
        renderForumTargetSelects();
        syncMentionsFromText();
      })
      .listShareableUsers({ token });
  }

  function uploadCommunityAttachmentFile(file) {
    if (!file) return;
    const token = getSessionToken();
    if (!token) {
      expireSession(SESSION_EXPIRED_FALLBACK);
      return;
    }
    if (file.size > COMMUNITY_ATTACHMENT_MAX_BYTES) {
      showCommunityError(`O arquivo ${file.name} excede o limite de 10 MB.`);
      return;
    }
    communityState.uploading += 1;
    updateCommunityPublishState();
    const reader = new FileReader();
    reader.onload = () => {
      const dataUrl = reader.result;
      google.script.run
        .withFailureHandler(err => {
          communityState.uploading = Math.max(0, communityState.uploading - 1);
          updateCommunityPublishState();
          showCommunityError(err?.message || 'Não foi possível enviar o arquivo agora.');
        })
        .withSuccessHandler(res => {
          communityState.uploading = Math.max(0, communityState.uploading - 1);
          updateCommunityPublishState();
          const attachment = res && res.attachment;
          if (attachment && attachment.id) {
            communityState.attachments.push(attachment);
            renderCommunityAttachments();
            showCommunityError('');
          }
        })
        .uploadCommunityAttachment({
          token,
          fileName: file.name,
          mimeType: file.type || 'application/octet-stream',
          data: dataUrl
        });
    };
    reader.onerror = () => {
      communityState.uploading = Math.max(0, communityState.uploading - 1);
      updateCommunityPublishState();
      showCommunityError('Não foi possível ler o arquivo selecionado.');
    };
    reader.readAsDataURL(file);
  }

  function updateCommunityPublishState() {
    if (!communityPublishBtn) return;
    const message = communityTextarea ? communityTextarea.value.trim() : '';
    const hasText = !!message;
    const hasAttachments = communityState.attachments.length > 0;
    const selectedTargets = getSelectedCommunityTargets();
    const mentionIds = getCommunityMentionIds();
    const isPrivate = communityState.privacy === 'private';
    const targetPool = isPrivate ? Array.from(new Set([...selectedTargets, ...mentionIds])) : selectedTargets;
    const invalidTargets = isPrivate && targetPool.length === 0;
    const disabled = !currentUser
      || (!hasText && !hasAttachments)
      || message.length > communityCharLimit
      || isPublishingCommunity
      || communityState.uploading > 0
      || invalidTargets;
    communityPublishBtn.disabled = disabled;
  }

  function updateCommunityAccess() {
    const loggedIn = !!currentUser;
    if (communityFormWrap) communityFormWrap.classList.toggle('hidden', !loggedIn);
    if (communityGuestNotice) communityGuestNotice.classList.toggle('hidden', loggedIn);
    if (!loggedIn && communityTextarea) {
      communityTextarea.value = '';
      showCommunityError('');
      updateCommunityCounter();
    }
    if (!loggedIn) {
      communityState.attachments = [];
      communityState.uploading = 0;
      communityState.shareableUsers = [];
      communityState.loadedShareableUsers = false;
      communityState.mentions = [];
      communityState.mentionSearch = '';
      communityState.mentionPickerOpen = false;
      renderCommunityAttachments();
      renderCommunityMentionChips();
      renderCommunityMentionOptions();
      setMentionPickerVisible(false);
      setCommunityPrivacy('public');
      if (communityTargetsSelect) communityTargetsSelect.innerHTML = '';
    }
    renderCommunityTargetsOptions();
    updateCommunityPublishState();
  }

  function formatCommunityDate(value) {
    if (!value) return '';
    const date = new Date(value);
    if (Number.isNaN(date.getTime())) return '';
    if (communityDateFormatter) {
      try {
        return communityDateFormatter.format(date);
      } catch (err) {
        // fallback para toLocaleString
      }
    }
    try {
      return date.toLocaleString('pt-BR');
    } catch (err) {
      return date.toISOString();
    }
  }

  function formatCommunityMessage(message, mentionNames) {
    const original = (message || '').toString();
    const names = Array.isArray(mentionNames) ? mentionNames.filter(Boolean) : [];
    let processed = original;
    const replacements = [];
    names.forEach((name, index) => {
      const label = '@' + name;
      if (!label || !processed.includes(label)) return;
      const placeholder = `__MENTION_${index}__`;
      processed = processed.split(label).join(placeholder);
      replacements.push({ placeholder, label });
    });
    let html = escapeHtml(processed).replace(/\n/g, '<br />');
    replacements.forEach(item => {
      const highlight = `<span class="mention-tag">${escapeHtml(item.label)}</span>`;
      html = html.split(item.placeholder).join(highlight);
    });
    return html;
  }

  function renderCommunityWall(entries) {
    if (!communityListEl) return;
    communityListEl.innerHTML = '';
    const list = Array.isArray(entries) ? entries : [];
    updateLatestConversations(list);
    if (!list.length) {
      if (communityEmptyEl) communityEmptyEl.classList.remove('hidden');
      return;
    }
    if (communityEmptyEl) communityEmptyEl.classList.add('hidden');

    list.forEach(entry => {
      const card = document.createElement('article');
      card.className = 'rounded-2xl border border-slate-200 dark:border-slate-700 bg-white/80 dark:bg-slate-800/70 p-4 shadow-sm flex flex-col gap-3';
      card.dataset.id = entry && entry.id ? entry.id : '';

      const header = document.createElement('div');
      header.className = 'flex flex-wrap items-start justify-between gap-3';

      const meta = document.createElement('div');
      meta.className = 'flex flex-col';

      const nameEl = document.createElement('span');
      nameEl.className = 'font-semibold text-slate-700 dark:text-slate-100';
      nameEl.textContent = (entry && entry.authorName) ? entry.authorName : 'Participante';
      meta.appendChild(nameEl);

      const timeEl = document.createElement('span');
      timeEl.className = 'text-xs text-slate-500 dark:text-slate-400';
      timeEl.textContent = formatCommunityDate(entry && entry.createdAt) || 'Agora mesmo';
      meta.appendChild(timeEl);

      header.appendChild(meta);

      const actions = document.createElement('div');
      actions.className = 'flex flex-col items-end gap-2 text-right';
      const visibility = entry && entry.visibility === 'private' ? 'private' : 'public';
      const visibilityChip = document.createElement('span');
      visibilityChip.className = 'privacy-chip' + (visibility === 'private' ? ' privacy-chip-private' : '');
      visibilityChip.textContent = visibility === 'private' ? 'Privado' : 'Público';
      actions.appendChild(visibilityChip);

      if (currentUser?.isAdmin) {
        const removeBtn = document.createElement('button');
        removeBtn.type = 'button';
        removeBtn.dataset.action = 'remove-wall-entry';
        removeBtn.dataset.id = entry && entry.id ? entry.id : '';
        removeBtn.className = 'text-xs font-semibold text-rose-600 hover:text-rose-500 focus:outline-none focus-visible:ring-2 focus-visible:ring-rose-400 rounded px-2 py-1 transition';
        removeBtn.textContent = 'Remover';
        actions.appendChild(removeBtn);
      }

      if (actions.children.length) {
        header.appendChild(actions);
      }

      const mentionNames = entry && Array.isArray(entry.mentionUserNames)
        ? entry.mentionUserNames.filter(Boolean)
        : [];
      const messageEl = document.createElement('p');
      messageEl.className = 'text-sm text-slate-700 dark:text-slate-200 leading-relaxed';
      const formattedMessage = formatCommunityMessage(entry && entry.message ? entry.message : '', mentionNames);
      messageEl.innerHTML = formattedMessage;

      card.appendChild(header);
      card.appendChild(messageEl);

      const targetNames = entry && Array.isArray(entry.targetUserNames)
        ? entry.targetUserNames.filter(Boolean)
        : [];
      if (visibility === 'private' && targetNames.length) {
        const recipients = document.createElement('p');
        recipients.className = 'text-xs text-slate-500 dark:text-slate-400';
        recipients.textContent = 'Destinatários: ' + targetNames.join(', ');
        card.appendChild(recipients);
      }

      if (mentionNames.length) {
        const mentionRow = document.createElement('div');
        mentionRow.className = 'flex flex-wrap items-center gap-2 text-xs text-slate-500 dark:text-slate-400';
        const label = document.createElement('span');
        label.textContent = 'Mencionados:';
        mentionRow.appendChild(label);
        mentionNames.forEach(name => {
          const pill = document.createElement('span');
          pill.className = 'mention-pill';
          pill.textContent = '@' + name;
          mentionRow.appendChild(pill);
        });
        card.appendChild(mentionRow);
      }

      const attachments = entry && Array.isArray(entry.attachments) ? entry.attachments : [];
      if (attachments.length) {
        const attachmentList = document.createElement('ul');
        attachmentList.className = 'space-y-2';
        attachments.forEach(att => {
          if (!att || !att.id) return;
          const li = document.createElement('li');
          li.className = 'attachment-item';
          if (att.fileId) li.dataset.fileId = att.fileId;

          const info = document.createElement('div');
          info.className = 'attachment-info';
          const icon = document.createElement('span');
          icon.className = 'attachment-icon';
          icon.textContent = '📎';
          const textWrap = document.createElement('div');
          textWrap.className = 'attachment-text';
          const nameLink = document.createElement('a');
          nameLink.className = 'attachment-name';
          nameLink.textContent = att.name || 'Arquivo';
          if (att.url) {
            nameLink.href = att.url;
            nameLink.target = '_blank';
            nameLink.rel = 'noopener';
          } else {
            nameLink.href = '#';
            nameLink.addEventListener('click', event => event.preventDefault());
          }
          const metaEl = document.createElement('span');
          metaEl.className = 'attachment-meta';
          const sizeText = formatFileSize(att.sizeBytes);
          const idText = att.fileId ? `ID: ${att.fileId}` : '';
          metaEl.textContent = [sizeText, idText].filter(Boolean).join(' • ');
          textWrap.append(nameLink, metaEl);
          info.append(icon, textWrap);

          li.appendChild(info);
          attachmentList.appendChild(li);
        });
        card.appendChild(attachmentList);
      }

      const reactionRow = document.createElement('div');
      reactionRow.className = 'flex flex-wrap items-center gap-2';
      const totalsMap = {};
      const reactionTotals = entry && entry.reactions && Array.isArray(entry.reactions.totals) ? entry.reactions.totals : [];
      reactionTotals.forEach(item => {
        if (!item || !item.type) return;
        totalsMap[item.type] = Number(item.count || 0);
      });
      const viewerReaction = entry && entry.reactions ? entry.reactions.viewerReaction : '';
      Object.keys(reactionDefinitions).forEach(key => {
        const def = reactionDefinitions[key];
        const button = document.createElement('button');
        button.type = 'button';
        button.className = 'reaction-button' + (viewerReaction === key ? ' reaction-button-active' : '');
        button.dataset.action = 'toggle-reaction';
        button.dataset.postId = entry && entry.id ? entry.id : '';
        button.dataset.reaction = key;
        button.disabled = !currentUser;
        if (!currentUser) {
          button.title = 'Faça login para reagir.';
        }
        const emoji = document.createElement('span');
        emoji.textContent = def.emoji;
        const label = document.createElement('span');
        label.textContent = def.label;
        const countBadge = document.createElement('span');
        countBadge.className = 'text-xs text-slate-500 dark:text-slate-300';
        const count = totalsMap[key] || 0;
        countBadge.textContent = count > 0 ? `(${count})` : '';
        button.append(emoji, label, countBadge);
        reactionRow.appendChild(button);
      });
      card.appendChild(reactionRow);

      communityListEl.appendChild(card);
    });
  }

  function refreshCommunityWall() {
    if (!communityListEl) return;
    const token = getSessionToken();
    const payload = token ? { token } : {};
    google.script.run
      .withFailureHandler(err => {
        console.error('Falha ao carregar mural:', err);
      })
      .withSuccessHandler(res => {
        if (res && typeof res.limit === 'number') {
          setCommunityLimit(res.limit);
        }
        const entries = res && Array.isArray(res.entries) ? res.entries : [];
        renderCommunityWall(entries);
      })
      .listCommunityWallEntries(payload);
  }

  const achievementsState = {
    loading: false,
    error: '',
    achievements: [],
    summary: { total: 0, unlocked: 0 },
    metrics: {}
  };

  function showToast({ message, type = 'success', duration = 4000 } = {}) {
    const text = (message ?? '').toString().trim();
    if (!toastContainer || !text) return;

    const variant = toastVariants[type] ? type : 'success';
    const activeElement = document.activeElement;
    const returnFocusTo = activeElement instanceof HTMLElement
      && activeElement !== document.body
      && !toastContainer.contains(activeElement)
      ? activeElement
      : null;
    const toast = document.createElement('div');
    toast.setAttribute('role', variant === 'error' ? 'alert' : 'status');
    toast.setAttribute('aria-live', variant === 'error' ? 'assertive' : 'polite');
    toast.setAttribute('aria-atomic', 'true');
    toast.setAttribute('tabindex', '-1');
    toast.className = [
      'pointer-events-auto',
      'flex items-start gap-3 rounded-xl px-4 py-3 text-sm shadow-lg ring-1 ring-slate-900/10 transition duration-200 ease-out',
      'focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2',
      'dark:ring-white/10',
      'dark:focus-visible:ring-offset-slate-900',
      toastVariants[variant].toast
    ].join(' ');
    toast.classList.add('opacity-0');

    const textWrapper = document.createElement('div');
    textWrapper.className = 'flex-1 leading-snug';
    textWrapper.textContent = text;
    toast.appendChild(textWrapper);

    const closeBtn = document.createElement('button');
    closeBtn.type = 'button';
    closeBtn.setAttribute('aria-label', 'Fechar notificação');
    closeBtn.className = [
      'flex h-7 w-7 flex-none items-center justify-center rounded-full text-base transition focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2',
      toastVariants[variant].close
    ].join(' ');
    closeBtn.innerHTML = '<span aria-hidden="true">&times;</span>';
    toast.appendChild(closeBtn);

    toastContainer.appendChild(toast);

    const removeToast = () => {
      if (!toast.isConnected) return;
      if (hideTimer) {
        window.clearTimeout(hideTimer);
        hideTimer = null;
      }
      let fallbackTimer = null;
      const handleTransitionEnd = () => {
        toast.removeEventListener('transitionend', handleTransitionEnd);
        if (fallbackTimer) {
          window.clearTimeout(fallbackTimer);
          fallbackTimer = null;
        }
        if (toast.parentElement) toast.parentElement.removeChild(toast);
        if (returnFocusTo && returnFocusTo.isConnected) {
          try {
            returnFocusTo.focus({ preventScroll: true });
          } catch (err) {
            returnFocusTo.focus();
          }
        }
      };
      const wasVisible = toast.classList.contains('opacity-100');
      toast.classList.remove('opacity-100');
      toast.classList.add('opacity-0');
      if (!wasVisible) {
        handleTransitionEnd();
        return;
      }
      fallbackTimer = window.setTimeout(handleTransitionEnd, 250);
      toast.addEventListener('transitionend', handleTransitionEnd);
    };

    let hideTimer = null;
    const durationMs = Number(duration);
    if (!Number.isNaN(durationMs) && durationMs > 0) {
      hideTimer = window.setTimeout(() => removeToast(), durationMs);
    }

    closeBtn.addEventListener('click', () => {
      if (hideTimer) window.clearTimeout(hideTimer);
      removeToast();
    });

    toast.addEventListener('keydown', event => {
      if (event.key === 'Escape' || event.key === 'Esc') {
        event.preventDefault();
        if (hideTimer) window.clearTimeout(hideTimer);
        removeToast();
      }
    });

    requestAnimationFrame(() => {
      toast.classList.remove('opacity-0');
      toast.classList.add('opacity-100');
      try {
        toast.focus({ preventScroll: true });
      } catch (err) {
        toast.focus();
      }
    });
  }

  const nextLevelTextEl = $('#nextLevelText');
  const nextLevelPctEl = $('#nextLevelPct');
  const nextLevelBarEl = $('#nextLevelBar');
  const milestoneWrap = $('#milestoneWrap');
  const levelCardEl = $('#levelCard');
  const levelBadgeEl = $('#levelBadge');
  const achievementsCardEl = $('#achievementsCard');
  const achievementsSummaryEl = $('#achievementsSummary');
  const achievementsUnlockedWrap = $('#achievementsUnlocked');
  const achievementsUnlockedEmpty = $('#achievementsUnlockedEmpty');
  const achievementsUpcomingWrap = $('#achievementsUpcoming');
  const achievementsUpcomingEmpty = $('#achievementsUpcomingEmpty');
  const achievementsLoadingEl = $('#achievementsLoading');
  const achievementsErrorEl = $('#achievementsError');
  const achievementsContentEl = $('#achievementsContent');
  const checkinStreakInfoEl = $('#checkinStreakInfo');

  function resetLevelIndicator() {
    if (nextLevelTextEl) nextLevelTextEl.textContent = 'Faça login para acompanhar seus marcos.';
    if (nextLevelPctEl) nextLevelPctEl.textContent = '0% do nível atual';
    if (nextLevelBarEl) nextLevelBarEl.style.width = '0%';
    if (milestoneWrap) milestoneWrap.innerHTML = '';
    if (levelCardEl) levelCardEl.classList.remove('milestone-celebrate');
    if (levelBadgeEl) {
      levelBadgeEl.classList.add('hidden');
      levelBadgeEl.textContent = '';
    }
  }

  function setLevelIndicatorLoading() {
    if (nextLevelTextEl) nextLevelTextEl.textContent = 'Calculando progresso de nível...';
    if (nextLevelPctEl) nextLevelPctEl.textContent = '...';
    if (nextLevelBarEl) nextLevelBarEl.style.width = '0%';
    if (milestoneWrap) milestoneWrap.innerHTML = '';
    if (levelCardEl) levelCardEl.classList.remove('milestone-celebrate');
    if (levelBadgeEl) {
      levelBadgeEl.classList.add('hidden');
      levelBadgeEl.textContent = '';
    }
  }

  function renderMilestoneBadges(level, nextLevel) {
    if (!milestoneWrap) return;
    milestoneWrap.innerHTML = '';
    const step = 5;
    const minMilestones = 3;
    const safeLevel = Number.isFinite(level) ? level : 0;
    const safeNext = Number.isFinite(nextLevel) ? nextLevel : safeLevel + 1;
    const target = Math.max(safeLevel, safeNext);
    const highest = Math.max(step * minMilestones, Math.ceil((target + step) / step) * step);
    let nextHighlighted = false;
    for (let milestone = step; milestone <= highest; milestone += step) {
      const chip = document.createElement('span');
      chip.className = 'milestone-chip';
      if (milestone <= safeLevel) {
        const icon = milestone % 10 === 0 ? '🌟' : '🏆';
        chip.classList.add('milestone-chip-achieved');
        chip.innerHTML = `<span>${icon}</span><span>Nível ${milestone}</span>`;
      } else if (!nextHighlighted) {
        nextHighlighted = true;
        const icon = milestone % 10 === 0 ? '🚀' : '🎯';
        const label = milestone % 10 === 0 ? `Rumo ao ${milestone}` : `Meta: ${milestone}`;
        chip.classList.add('milestone-chip-next');
        chip.innerHTML = `<span>${icon}</span><span>${label}</span>`;
      } else {
        chip.innerHTML = `<span>Nível ${milestone}</span>`;
      }
      milestoneWrap.appendChild(chip);
    }
    if (!milestoneWrap.children.length) {
      const span = document.createElement('span');
      span.className = 'text-xs text-slate-500 dark:text-slate-300';
      span.textContent = 'Conquiste níveis para desbloquear marcos!';
      milestoneWrap.appendChild(span);
    }
  }

  function formatNumber(value) {
    const numeric = Number(value);
    if (!Number.isFinite(numeric)) return value;
    try {
      return new Intl.NumberFormat('pt-BR').format(numeric);
    } catch (err) {
      return numeric.toString();
    }
  }

  function formatAchievementDate(value) {
    const parsed = parseDateValue(value);
    if (!parsed) return 'agora mesmo';
    try {
      return new Intl.DateTimeFormat('pt-BR', { day: '2-digit', month: 'short', year: 'numeric' }).format(parsed);
    } catch (err) {
      return parsed.toLocaleDateString('pt-BR');
    }
  }

  function getAchievementTimestamp(value) {
    if (!value) return 0;
    const parsed = parseDateValue(value);
    if (parsed) return parsed.getTime();
    const date = new Date(value);
    const time = date.getTime();
    return Number.isNaN(time) ? 0 : time;
  }

  function normalizeAchievementsResponse(data) {
    if (!data || typeof data !== 'object') {
      return {
        achievements: [],
        summary: { total: 0, unlocked: 0 },
        metrics: {}
      };
    }
    const achievements = Array.isArray(data.achievements)
      ? data.achievements.map(item => ({
          id: item?.id || '',
          title: item?.title || '',
          description: item?.description || '',
          category: item?.category || '',
          icon: item?.icon || '',
          rewardXP: Number(item?.rewardXP || 0),
          unlocked: !!item?.unlocked,
          achieved: !!item?.achieved,
          unlockedAt: item?.unlockedAt ? String(item.unlockedAt) : '',
          target: Number(item?.target || 0),
          progressValue: Number(item?.progressValue || item?.progress || 0),
          progress: Number(item?.progress || item?.progressValue || 0),
          progressPct: Math.max(0, Math.min(100, Number(item?.progressPct || 0))),
          progressLabel: item?.progressLabel || '',
          readyToUnlock: !!item?.readyToUnlock,
          extra: item?.extra || {}
        }))
      : [];
    const summary = {
      total: Number(data.summary?.total || achievements.length || 0),
      unlocked: Number(data.summary?.unlocked || achievements.filter(a => a.unlocked).length || 0)
    };
    const metrics = data.metrics && typeof data.metrics === 'object' ? data.metrics : {};
    return { achievements, summary, metrics };
  }

  function createUnlockedAchievementBadge(item) {
    const badge = document.createElement('div');
    badge.className = 'achievement-card achievement-card-unlocked';
    const icon = item?.icon || '🏆';
    const reward = Number(item?.rewardXP || 0);
    const rewardLabel = reward > 0 ? `+${formatNumber(reward)} XP` : 'Badge';
    const unlockedLabel = item?.unlockedAt ? formatAchievementDate(item.unlockedAt) : 'agora mesmo';
    badge.innerHTML = `
      <div class="flex items-center justify-between mb-3">
        <span class="achievement-icon">${icon}</span>
        <span class="achievement-xp">${rewardLabel}</span>
      </div>
      <div class="text-sm font-semibold leading-snug mb-1">${item?.title || 'Conquista desbloqueada'}</div>
      <p class="text-xs leading-relaxed opacity-80">${item?.description || 'Continue participando para acumular ainda mais.'}</p>
      <div class="text-[0.65rem] uppercase tracking-wide mt-3 opacity-70">Desbloqueada em ${unlockedLabel}</div>
    `;
    return badge;
  }

  function createUpcomingAchievementCard(item) {
    const card = document.createElement('div');
    const classes = ['achievement-card', 'achievement-card-locked'];
    if (item?.readyToUnlock) classes.push('achievement-card-ready');
    card.className = classes.join(' ');
    const icon = item?.icon || '🎯';
    const reward = Number(item?.rewardXP || 0);
    const rewardLabel = reward > 0 ? `+${formatNumber(reward)} XP` : 'Meta';
    const progressPct = Math.max(0, Math.min(100, Number(item?.progressPct || 0)));
    const progressLabel = item?.progressLabel || '';
    const encouragement = item?.readyToUnlock
      ? 'Pronto! Realize a próxima ação para conquistar.'
      : 'Continue acumulando progresso para desbloquear.';
    card.innerHTML = `
      <div class="flex items-center justify-between mb-3">
        <span class="achievement-icon">${icon}</span>
        <span class="achievement-xp">${rewardLabel}</span>
      </div>
      <div class="text-sm font-semibold leading-snug mb-1">${item?.title || 'Próxima meta'}</div>
      <p class="text-xs leading-relaxed opacity-80 mb-3">${item?.description || ''}</p>
      <div class="space-y-1">
        <div class="flex items-center justify-between text-[0.65rem] uppercase tracking-wide opacity-75">
          <span>${progressLabel}</span>
          <span>${progressPct}%</span>
        </div>
        <div class="achievement-progress-track">
          <div class="achievement-progress-bar" style="width:${progressPct}%"></div>
        </div>
      </div>
      <div class="text-[0.65rem] mt-3 opacity-70">${encouragement}</div>
    `;
    return card;
  }

  function updateCheckinStreakInfo(metrics) {
    if (!checkinStreakInfoEl) return;
    if (!currentUser) {
      checkinStreakInfoEl.textContent = 'Faça login para iniciar sua sequência de check-ins.';
      checkinStreakInfoEl.classList.remove('text-emerald-600', 'dark:text-emerald-300', 'font-semibold');
      checkinStreakInfoEl.classList.add('text-slate-500', 'dark:text-slate-300');
      return;
    }
    const current = Number(metrics?.checkinCurrentStreak || metrics?.current || 0);
    const best = Number(metrics?.checkinBestStreak || metrics?.best || 0);
    const total = Number(metrics?.totalCheckins || metrics?.total || 0);
    if (!current && !best && !total) {
      checkinStreakInfoEl.textContent = 'Registre seu primeiro check-in para iniciar uma sequência!';
      checkinStreakInfoEl.classList.remove('text-emerald-600', 'dark:text-emerald-300', 'font-semibold');
      checkinStreakInfoEl.classList.add('text-slate-500', 'dark:text-slate-300');
      return;
    }
    const parts = [];
    if (current > 0) {
      parts.push(`🔥 Streak atual: ${current} dia${current > 1 ? 's' : ''}`);
    } else {
      parts.push('Sem streak ativo no momento.');
    }
    if (best > 0) {
      parts.push(`Recorde: ${best} dia${best > 1 ? 's' : ''}`);
    }
    if (total > 0) {
      parts.push(`${total} check-in${total > 1 ? 's' : ''} no total`);
    }
    checkinStreakInfoEl.textContent = parts.join(' • ');
    const highlight = current >= 3;
    if (highlight) {
      checkinStreakInfoEl.classList.add('text-emerald-600', 'dark:text-emerald-300', 'font-semibold');
      checkinStreakInfoEl.classList.remove('text-slate-500', 'dark:text-slate-300');
    } else {
      checkinStreakInfoEl.classList.remove('text-emerald-600', 'dark:text-emerald-300', 'font-semibold');
      checkinStreakInfoEl.classList.add('text-slate-500', 'dark:text-slate-300');
    }
  }

  function renderAchievements() {
    renderAchievementsShowcase(achievementsState.summary, achievementsState.metrics);
    if (!achievementsCardEl) return;

    if (!currentUser) {
      if (achievementsSummaryEl) {
        achievementsSummaryEl.textContent = 'Faça login para acompanhar suas conquistas.';
      }
      if (achievementsContentEl) achievementsContentEl.classList.add('hidden');
      if (achievementsLoadingEl) achievementsLoadingEl.classList.add('hidden');
      if (achievementsErrorEl) achievementsErrorEl.classList.add('hidden');
      if (achievementsUnlockedWrap) achievementsUnlockedWrap.innerHTML = '';
      if (achievementsUpcomingWrap) achievementsUpcomingWrap.innerHTML = '';
      if (achievementsUnlockedEmpty) achievementsUnlockedEmpty.classList.remove('hidden');
      if (achievementsUpcomingEmpty) achievementsUpcomingEmpty.classList.remove('hidden');
      updateCheckinStreakInfo(null);
      return;
    }

    const { loading, error, achievements, summary, metrics } = achievementsState;
    if (achievementsLoadingEl) achievementsLoadingEl.classList.toggle('hidden', !loading);
    if (achievementsErrorEl) {
      achievementsErrorEl.textContent = error || '';
      achievementsErrorEl.classList.toggle('hidden', !error);
    }
    const canShowContent = !loading && !error;
    if (achievementsContentEl) achievementsContentEl.classList.toggle('hidden', !canShowContent);

    const total = Number(summary?.total || achievements.length || 0);
    const unlockedCount = Number(summary?.unlocked || achievements.filter(item => item.unlocked).length || 0);
    if (achievementsSummaryEl) {
      achievementsSummaryEl.textContent = total > 0
        ? `${unlockedCount}/${total} desbloqueadas`
        : 'Nenhuma conquista cadastrada ainda.';
    }

    updateCheckinStreakInfo(metrics);

    if (!canShowContent) {
      if (achievementsUnlockedWrap) achievementsUnlockedWrap.innerHTML = '';
      if (achievementsUpcomingWrap) achievementsUpcomingWrap.innerHTML = '';
      if (achievementsUnlockedEmpty) achievementsUnlockedEmpty.classList.toggle('hidden', !!loading || !!error);
      if (achievementsUpcomingEmpty) achievementsUpcomingEmpty.classList.toggle('hidden', !!loading || !!error);
      return;
    }

    const unlocked = achievements
      .filter(item => item.unlocked)
      .sort((a, b) => getAchievementTimestamp(b.unlockedAt) - getAchievementTimestamp(a.unlockedAt));
    const upcoming = achievements
      .filter(item => !item.unlocked)
      .sort((a, b) => Number(b.progressPct || 0) - Number(a.progressPct || 0));
    const upcomingLimited = upcoming.slice(0, 6);

    if (achievementsUnlockedWrap) {
      achievementsUnlockedWrap.innerHTML = '';
      unlocked.forEach(item => achievementsUnlockedWrap.appendChild(createUnlockedAchievementBadge(item)));
      achievementsUnlockedWrap.classList.toggle('hidden', unlocked.length === 0);
    }
    if (achievementsUnlockedEmpty) {
      achievementsUnlockedEmpty.textContent = unlocked.length > 0
        ? ''
        : 'Ainda sem conquistas desbloqueadas. Faça check-ins e conclua atividades para começar!';
      achievementsUnlockedEmpty.classList.toggle('hidden', unlocked.length > 0);
    }

    if (achievementsUpcomingWrap) {
      achievementsUpcomingWrap.innerHTML = '';
      upcomingLimited.forEach(item => achievementsUpcomingWrap.appendChild(createUpcomingAchievementCard(item)));
      achievementsUpcomingWrap.classList.toggle('hidden', upcomingLimited.length === 0);
    }
    if (achievementsUpcomingEmpty) {
      let message = 'Participe de check-ins e atividades para liberar novas medalhas.';
      if (!upcomingLimited.length && achievements.length > 0) {
        message = 'Todas as conquistas disponíveis foram desbloqueadas! 🎉';
      }
      achievementsUpcomingEmpty.textContent = message;
      achievementsUpcomingEmpty.classList.toggle('hidden', upcomingLimited.length > 0);
    }
  }

  function handleAchievementToasts(list) {
    if (!Array.isArray(list) || !list.length) return;
    list.forEach(item => {
      const icon = item?.icon || '🏆';
      const reward = Number(item?.rewardXP || 0);
      const rewardText = reward > 0 ? ` +${formatNumber(reward)} XP` : '';
      const title = item?.title || 'Nova conquista';
      showToast({ message: `${icon} Conquista desbloqueada: ${title}!${rewardText}`, type: 'success' });
    });
  }

  function applyAchievementsUpdate(overview, unlockedList = [], options = {}) {
    if (!overview) return;
    const normalized = normalizeAchievementsResponse(overview);
    achievementsState.loading = false;
    achievementsState.error = '';
    achievementsState.achievements = normalized.achievements;
    achievementsState.summary = normalized.summary;
    achievementsState.metrics = normalized.metrics || {};
    renderAchievements();
    const summaryInfo = normalized.summary || { total: 0, unlocked: 0 };
    updateStudentStoryState({
      achievementsUnlocked: summaryInfo.unlocked || 0,
      totalAchievements: summaryInfo.total || 0,
      metrics: normalized.metrics || {}
    });
    if (!options?.silent && Array.isArray(unlockedList) && unlockedList.length) {
      handleAchievementToasts(unlockedList);
    }
  }

  function resetAchievementsUI() {
    achievementsState.loading = false;
    achievementsState.error = '';
    achievementsState.achievements = [];
    achievementsState.summary = { total: 0, unlocked: 0 };
    achievementsState.metrics = {};
    renderAchievements();
    updateStudentStoryState({ achievementsUnlocked: 0, totalAchievements: 0, metrics: {} });
  }

  function loadAchievementsOverview() {
    if (!currentUser || !currentUser.id) {
      resetAchievementsUI();
      return;
    }
    const token = getSessionToken();
    if (!token) {
      expireSession(SESSION_EXPIRED_FALLBACK);
      return;
    }
    const expectedUserId = currentUser.id;
    achievementsState.loading = true;
    achievementsState.error = '';
    renderAchievements();
    google.script.run
      .withFailureHandler(err => {
        if (handleSessionExpiredError(err, {
          onHandled: () => {
            achievementsState.loading = false;
            achievementsState.error = '';
            achievementsState.metrics = {};
            renderAchievements();
          }
        })) {
          return;
        }
        if (!currentUser || currentUser.id !== expectedUserId) return;
        achievementsState.loading = false;
        achievementsState.error = err?.message || 'Não foi possível carregar as conquistas.';
        achievementsState.metrics = {};
        renderAchievements();
      })
      .withSuccessHandler(data => {
        if (!currentUser || currentUser.id !== expectedUserId) return;
        const normalized = normalizeAchievementsResponse(data);
        achievementsState.loading = false;
        achievementsState.error = '';
        achievementsState.achievements = normalized.achievements;
        achievementsState.summary = normalized.summary;
        achievementsState.metrics = normalized.metrics || {};
        renderAchievements();
      })
      .getUserAchievementsOverview({ token, userId: currentUser.id });
  }

  function updateLevelIndicator(state) {
    if (!state) return;
    const levelValue = Number(state.level || 1);
    const nextLevelValue = Number.isFinite(Number(state.nextLevel)) ? Number(state.nextLevel) : levelValue + 1;
    const xpPerLevelRaw = Number(state.xpPerLevel);
    const xpPerLevel = Number.isFinite(xpPerLevelRaw) && xpPerLevelRaw > 0 ? xpPerLevelRaw : null;
    const xpToNextRaw = Number(state.xpToNextLevel);
    const xpToNext = Number.isFinite(xpToNextRaw) ? Math.max(0, Math.round(xpToNextRaw)) : null;
    const xpIntoLevel = xpPerLevel !== null && xpToNext !== null ? Math.max(0, xpPerLevel - xpToNext) : 0;
    const pct = xpPerLevel !== null && xpPerLevel > 0 && xpToNext !== null
      ? Math.round((xpIntoLevel / xpPerLevel) * 100)
      : 0;
    const pctClamped = Math.max(0, Math.min(100, pct));

    if (nextLevelTextEl) {
      if (xpToNext === null) {
        nextLevelTextEl.textContent = 'Progresso de nível indisponível no momento.';
      } else if (xpToNext === 0) {
        nextLevelTextEl.textContent = `Pronto para alcançar o nível ${nextLevelValue}!`;
      } else {
        const xpLabel = xpToNext === 1 ? 'Falta 1 XP' : `Faltam ${xpToNext} XP`;
        nextLevelTextEl.textContent = `${xpLabel} para o nível ${nextLevelValue}`;
      }
    }
    if (nextLevelPctEl) {
      nextLevelPctEl.textContent = `${pctClamped}% do nível atual`;
    }
    if (nextLevelBarEl) {
      nextLevelBarEl.style.width = `${pctClamped}%`;
    }

    if (levelCardEl) {
      const isMilestone = levelValue > 0 && levelValue % 5 === 0;
      levelCardEl.classList.toggle('milestone-celebrate', isMilestone);
    }
    if (levelBadgeEl) {
      const isMilestone = levelValue > 0 && levelValue % 5 === 0;
      if (isMilestone) {
        const isEpic = levelValue % 10 === 0;
        levelBadgeEl.classList.remove('hidden');
        levelBadgeEl.textContent = isEpic ? '🌟 Nível épico!' : '🏆 Marco!';
      } else {
        levelBadgeEl.classList.add('hidden');
        levelBadgeEl.textContent = '';
      }
    }

    renderMilestoneBadges(levelValue, nextLevelValue);
  }

  function formatLevelProgressMessage(info) {
    if (!info) return '';
    const xpToNextRaw = Number(info.xpToNextLevel ?? info.remainingXP);
    const nextLevelRaw = Number(info.nextLevel);
    const levelRaw = Number(info.level);
    const nextLevelValue = Number.isFinite(nextLevelRaw)
      ? nextLevelRaw
      : (Number.isFinite(levelRaw) ? levelRaw + 1 : null);
    if (!Number.isFinite(xpToNextRaw) || xpToNextRaw < 0 || !Number.isFinite(nextLevelValue)) {
      return '';
    }
    const xpToNext = Math.max(0, Math.round(xpToNextRaw));
    if (xpToNext === 0) {
      return ` Você está pronto(a) para alcançar o nível ${nextLevelValue}!`;
    }
    const xpLabel = xpToNext === 1 ? 'Falta 1 XP' : `Faltam ${xpToNext} XP`;
    return ` ${xpLabel} para o nível ${nextLevelValue}.`;
  }

  resetLevelIndicator();

  const historyTabs = Array.from(document.querySelectorAll('[data-history-tab]'));
  const historyListEl = $('#historyList');
  const historyPeriodSelect = $('#historyPeriodFilter');
  const historyModuleSelect = $('#historyModuleFilter');
  const historyModuleWrap = $('#historyModuleFilterWrap');
  const historyStreakWrap = $('#historyStreakWrap');
  const historyStreakCurrent = $('#historyStreakCurrent');
  const historyStreakBest = $('#historyStreakBest');
  const MS_PER_DAY = 24 * 60 * 60 * 1000;

  const historyState = {
    checkins: [],
    activities: [],
    streak: { current: 0, best: 0 },
    loading: { checkins: false, activities: false },
    errors: { checkins: '', activities: '' }
  };
  let activeHistoryTab = 'checkins';

  historyTabs.forEach(button => {
    button.addEventListener('click', () => {
      const tab = button.getAttribute('data-history-tab') || 'checkins';
      if (tab === activeHistoryTab) return;
      activeHistoryTab = tab;
      historyTabs.forEach(btn => {
        const btnTab = btn.getAttribute('data-history-tab');
        btn.classList.toggle('history-tab-active', btnTab === activeHistoryTab);
      });
      renderHistory();
    });
  });

  if (historyPeriodSelect) {
    historyPeriodSelect.addEventListener('change', () => renderHistory());
  }

  if (historyModuleSelect) {
    historyModuleSelect.addEventListener('change', () => renderHistory());
  }

  function resetHistorySection() {
    historyState.checkins = [];
    historyState.activities = [];
    historyState.streak = { current: 0, best: 0 };
    historyState.loading.checkins = false;
    historyState.loading.activities = false;
    historyState.errors.checkins = '';
    historyState.errors.activities = '';
    activeHistoryTab = 'checkins';
    if (historyPeriodSelect) historyPeriodSelect.value = '30';
    if (historyModuleSelect) historyModuleSelect.value = 'all';
    historyTabs.forEach(btn => {
      const tab = btn.getAttribute('data-history-tab');
      btn.classList.toggle('history-tab-active', tab === activeHistoryTab);
    });
    updateHistoryModuleFilterOptions();
    renderHistory();
  }

  function renderHistory() {
    if (!historyListEl) return;
    if (!currentUser) {
      historyListEl.innerHTML = '<p class="history-empty">Faça login para acompanhar seu histórico.</p>';
      if (historyModuleWrap) historyModuleWrap.classList.add('hidden');
      if (historyStreakWrap) historyStreakWrap.classList.add('hidden');
      return;
    }

    if (historyModuleWrap) {
      historyModuleWrap.classList.toggle('hidden', activeHistoryTab !== 'activities');
    }

    const stateKey = activeHistoryTab === 'activities' ? 'activities' : 'checkins';
    const isLoading = historyState.loading[stateKey];
    const errorMessage = historyState.errors[stateKey];
    const periodValue = historyPeriodSelect ? historyPeriodSelect.value : 'all';
    const moduleValue = historyModuleSelect ? historyModuleSelect.value : 'all';

    if (activeHistoryTab !== 'activities' && historyModuleWrap) {
      historyModuleWrap.classList.add('hidden');
    } else if (activeHistoryTab === 'activities') {
      updateHistoryModuleFilterOptions();
    }

    historyListEl.innerHTML = '';

    if (isLoading) {
      const loadingText = activeHistoryTab === 'activities' ? 'Carregando atividades...' : 'Carregando check-ins...';
      historyListEl.innerHTML = `<p class="history-empty">${loadingText}</p>`;
      renderStreakInfo();
      return;
    }

    if (errorMessage) {
      historyListEl.innerHTML = `<p class="history-empty text-rose-600 dark:text-rose-300">${errorMessage}</p>`;
      renderStreakInfo();
      return;
    }

    let items = (historyState[stateKey] || []).slice();

    if (periodValue !== 'all') {
      const days = Number(periodValue);
      if (!Number.isNaN(days) && days > 0) {
        const now = Date.now();
        items = items.filter(item => {
          const ts = getItemTimestamp(item);
          if (!Number.isFinite(ts)) return false;
          const diffDays = Math.floor((now - ts) / MS_PER_DAY);
          return diffDays < days;
        });
      }
    }

    if (activeHistoryTab === 'activities' && moduleValue !== 'all') {
      items = items.filter(item => String(item.moduleId || '') === moduleValue);
    }

    items.sort((a, b) => {
      const aTime = getItemTimestamp(a);
      const bTime = getItemTimestamp(b);
      return (Number.isFinite(bTime) ? bTime : -Infinity) - (Number.isFinite(aTime) ? aTime : -Infinity);
    });

    if (!items.length) {
      const emptyText = activeHistoryTab === 'activities'
        ? 'Nenhuma atividade registrada para os filtros selecionados.'
        : 'Ainda não há check-ins no período selecionado. Registre sua presença para começar um streak!';
      historyListEl.innerHTML = `<p class="history-empty">${emptyText}</p>`;
      renderStreakInfo();
      return;
    }

    items.forEach(item => {
      historyListEl.appendChild(
        activeHistoryTab === 'activities' ? renderActivityItem(item) : renderCheckinItem(item)
      );
    });

    renderStreakInfo();
  }

  function renderStreakInfo() {
    if (!historyStreakWrap) return;
    if (activeHistoryTab !== 'checkins' || historyState.loading.checkins || historyState.errors.checkins || !currentUser) {
      historyStreakWrap.classList.add('hidden');
      return;
    }
    if (!historyState.checkins.length) {
      historyStreakWrap.classList.add('hidden');
      return;
    }

    const { current, best } = historyState.streak;
    historyStreakWrap.classList.remove('hidden');

    if (historyStreakCurrent) {
      historyStreakCurrent.textContent = current > 0
        ? `🔥 Streak atual: ${current} dia${current > 1 ? 's' : ''}`
        : 'Sem streak ativo';
      historyStreakCurrent.classList.toggle('bg-emerald-100', current >= 3);
      historyStreakCurrent.classList.toggle('text-emerald-700', current >= 3);
      historyStreakCurrent.classList.toggle('dark:bg-emerald-500/10', current >= 3);
      historyStreakCurrent.classList.toggle('dark:text-emerald-300', current >= 3);
    }

    if (historyStreakBest) {
      historyStreakBest.textContent = best > 0
        ? `Recorde: ${best} dia${best > 1 ? 's' : ''}`
        : '';
      historyStreakBest.classList.toggle('hidden', best <= 0);
    }
  }

  function getItemTimestamp(item) {
    if (!item) return NaN;
    if (typeof item.timestamp === 'number' && !Number.isNaN(item.timestamp)) return item.timestamp;
    const parsed = parseDateValue(item.date || item.day);
    return parsed ? parsed.getTime() : NaN;
  }

  function parseDateValue(value) {
    if (!value) return null;
    if (value instanceof Date) return value;
    const str = String(value).trim();
    if (!str) return null;
    const normalized = str.length === 10 ? `${str}T00:00:00Z` : str;
    const date = new Date(normalized);
    return Number.isNaN(date.getTime()) ? null : date;
  }

  function formatHistoryDate(item) {
    const ts = getItemTimestamp(item);
    if (!Number.isFinite(ts)) {
      const day = item && item.day ? String(item.day) : '';
      return day ? day.split('-').reverse().join('/') : 'Data indisponível';
    }
    try {
      return new Intl.DateTimeFormat('pt-BR', { day: '2-digit', month: 'short', year: 'numeric' }).format(new Date(ts));
    } catch (err) {
      return new Date(ts).toLocaleDateString('pt-BR');
    }
  }

  function renderCheckinItem(item) {
    const element = document.createElement('div');
    element.className = 'flex flex-wrap items-center justify-between gap-3 rounded-xl border border-slate-200 dark:border-slate-700/70 bg-white dark:bg-slate-900/60 px-4 py-3';
    const xpValue = Number(item?.xp || 0);
    element.innerHTML = `
      <div class="flex-1">
        <div class="font-semibold">${formatHistoryDate(item)}</div>
        <div class="text-xs text-slate-500 dark:text-slate-400">Check-in diário</div>
      </div>
      <div class="text-sm font-semibold text-emerald-600 dark:text-emerald-400">+${xpValue} XP</div>
    `;
    return element;
  }

  function renderActivityItem(item) {
    const element = document.createElement('div');
    element.className = 'flex flex-wrap items-center justify-between gap-3 rounded-xl border border-slate-200 dark:border-slate-700/70 bg-white dark:bg-slate-900/60 px-4 py-3';
    const moduleLabel = Number.isFinite(item?.moduleId) && item.moduleId > 0 ? `Módulo ${item.moduleId}` : 'Atividade';
    const xpValue = Number(item?.earnedXP || 0);
    const scoreValue = Number(item?.scorePct || 0);
    const progressValue = Number(item?.progressPct || 0);
    element.innerHTML = `
      <div class="flex-1">
        <div class="font-semibold">${moduleLabel}</div>
        <div class="text-xs text-slate-500 dark:text-slate-400">${formatHistoryDate(item)}</div>
      </div>
      <div class="flex flex-col items-end gap-1 text-xs text-slate-500 dark:text-slate-400">
        <span class="text-sm font-semibold text-primary dark:text-blue-400">+${xpValue} XP</span>
        <span>Nota: ${scoreValue}%</span>
        <span>Evolução: ${progressValue}% do curso</span>
      </div>
    `;
    return element;
  }

  function updateHistoryModuleFilterOptions() {
    if (!historyModuleSelect) return;
    const previousValue = historyModuleSelect.value;
    historyModuleSelect.innerHTML = '';

    const optionAll = document.createElement('option');
    optionAll.value = 'all';
    optionAll.textContent = 'Todos os módulos';
    historyModuleSelect.appendChild(optionAll);

    const modules = Array.from(new Set(historyState.activities
      .map(item => Number(item?.moduleId || 0))
      .filter(id => Number.isFinite(id) && id > 0)))
      .sort((a, b) => a - b);

    modules.forEach(id => {
      const opt = document.createElement('option');
      opt.value = String(id);
      opt.textContent = `Módulo ${id}`;
      historyModuleSelect.appendChild(opt);
    });

    if (modules.includes(Number(previousValue))) {
      historyModuleSelect.value = previousValue;
    } else {
      historyModuleSelect.value = 'all';
    }

    if (historyModuleWrap) {
      historyModuleWrap.classList.toggle('hidden', activeHistoryTab !== 'activities' || modules.length === 0);
    }
  }

  function computeCheckinStreak(items) {
    if (!Array.isArray(items) || !items.length) return { current: 0, best: 0 };
    const timestamps = Array.from(new Set(items
      .map(entry => getItemTimestamp(entry))
      .filter(ts => Number.isFinite(ts)))).sort((a, b) => a - b);
    if (!timestamps.length) return { current: 0, best: 0 };

    let best = 1;
    let streak = 1;
    for (let i = 1; i < timestamps.length; i++) {
      const diffDays = Math.round((timestamps[i] - timestamps[i - 1]) / MS_PER_DAY);
      if (diffDays === 0) {
        continue;
      } else if (diffDays === 1) {
        streak += 1;
      } else {
        if (streak > best) best = streak;
        streak = 1;
      }
    }
    if (streak > best) best = streak;

    const desc = timestamps.slice().sort((a, b) => b - a);
    let current = 0;
    let previous = null;
    for (let i = 0; i < desc.length; i++) {
      const ts = desc[i];
      if (i === 0) {
        current = 1;
        previous = ts;
        continue;
      }
      const diffDays = Math.round((previous - ts) / MS_PER_DAY);
      if (diffDays === 0) {
        continue;
      }
      if (diffDays === 1) {
        current += 1;
        previous = ts;
      } else {
        break;
      }
    }

    return { current, best };
  }

  function normalizeCheckinHistory(data) {
    if (!Array.isArray(data)) return [];
    return data.map(item => {
      const day = item?.day ? String(item.day) : '';
      const date = item?.date ? String(item.date) : '';
      const parsed = parseDateValue(date || day);
      const timestamp = parsed ? parsed.getTime() : (typeof item?.timestamp === 'number' && !Number.isNaN(item.timestamp) ? item.timestamp : null);
      return {
        day,
        date,
        xp: Number(item?.xp || 0),
        timestamp: Number.isFinite(timestamp) ? timestamp : null
      };
    });
  }

  function normalizeActivityHistory(data) {
    if (!Array.isArray(data)) return [];
    return data.map(item => {
      const day = item?.day ? String(item.day) : '';
      const date = item?.date ? String(item.date) : '';
      const parsed = parseDateValue(date || day);
      const timestampCandidate = typeof item?.timestamp === 'number' && !Number.isNaN(item.timestamp)
        ? item.timestamp
        : (parsed ? parsed.getTime() : null);
      return {
        moduleId: Number(item?.moduleId || item?.module || 0),
        earnedXP: Number(item?.earnedXP || item?.xp || 0),
        scorePct: Math.round(Number(item?.scorePct || item?.score || 0)),
        progressPct: Math.max(0, Math.min(100, Math.round(Number(item?.progressPct || item?.progress || 0)))),
        day,
        date,
        timestamp: Number.isFinite(timestampCandidate) ? timestampCandidate : null
      };
    });
  }

  function loadHistoryForCurrentUser() {
    if (!currentUser || !currentUser.id) return;

    const token = getSessionToken();
    if (!token) {
      expireSession(SESSION_EXPIRED_FALLBACK);
      return;
    }

    const expectedUserId = currentUser.id;
    historyState.loading.checkins = true;
    historyState.errors.checkins = '';
    historyState.loading.activities = true;
    historyState.errors.activities = '';
    renderHistory();

    google.script.run
      .withFailureHandler(err => {
        if (handleSessionExpiredError(err, {
          onHandled: message => {
            historyState.loading.checkins = false;
            historyState.errors.checkins = message;
            historyState.checkins = [];
            historyState.streak = { current: 0, best: 0 };
            renderHistory();
          }
        })) {
          return;
        }
        if (!currentUser || currentUser.id !== expectedUserId) return;
        historyState.loading.checkins = false;
        historyState.errors.checkins = err?.message || 'Não foi possível carregar o histórico de check-ins.';
        historyState.checkins = [];
        historyState.streak = { current: 0, best: 0 };
        renderHistory();
      })
      .withSuccessHandler(data => {
        if (!currentUser || currentUser.id !== expectedUserId) return;
        historyState.loading.checkins = false;
        historyState.checkins = normalizeCheckinHistory(data);
        historyState.streak = computeCheckinStreak(historyState.checkins);
        historyState.errors.checkins = '';
        updateCheckinStreakInfo({
          checkinCurrentStreak: historyState.streak.current,
          checkinBestStreak: historyState.streak.best,
          totalCheckins: historyState.checkins.length
        });
        updateStudentStoryState({
          checkinToday: hasCheckinToday(),
          metrics: {
            checkinCurrentStreak: historyState.streak.current,
            checkinBestStreak: historyState.streak.best,
            totalCheckins: historyState.checkins.length
          }
        });
        renderHistory();
      })
      .getCheckinHistory({ token, userId: currentUser.id });

    google.script.run
      .withFailureHandler(err => {
        if (handleSessionExpiredError(err, {
          onHandled: message => {
            historyState.loading.activities = false;
            historyState.errors.activities = message;
            historyState.activities = [];
            updateHistoryModuleFilterOptions();
            renderHistory();
          }
        })) {
          return;
        }
        if (!currentUser || currentUser.id !== expectedUserId) return;
        historyState.loading.activities = false;
        historyState.errors.activities = err?.message || 'Não foi possível carregar o histórico de atividades.';
        historyState.activities = [];
        updateHistoryModuleFilterOptions();
        renderHistory();
      })
      .withSuccessHandler(data => {
        if (!currentUser || currentUser.id !== expectedUserId) return;
        historyState.loading.activities = false;
        historyState.activities = normalizeActivityHistory(data);
        historyState.errors.activities = '';
        updateHistoryModuleFilterOptions();
        renderHistory();
      })
      .getActivityHistory({ token, userId: currentUser.id });
  }

  const signupMessageEl = $('#signupMsg');
  const loginMessageEl  = $('#loginMsg');

  function renderCardMessage(el, type, message) {
    if (!el) return;
    const text = (message || '').toString();
    el.textContent = text;
    el.classList.remove('feedback-error', 'feedback-success');
    if (!text) {
      el.classList.add('hidden');
      return;
    }
    el.classList.remove('hidden');
    el.classList.add(type === 'success' ? 'feedback-success' : 'feedback-error');
  }

  function clearCardMessage(el) {
    renderCardMessage(el, '', '');
  }

  function resetConfirmationCountdown() {
    if (confirmationTimer) {
      clearInterval(confirmationTimer);
      confirmationTimer = null;
    }
    if (confirmationCountdownEl) confirmationCountdownEl.textContent = '';
  }

  function startConfirmationCountdown() {
    resetConfirmationCountdown();
    if (!pendingConfirmation || !pendingConfirmation.expiresAt || !confirmationCountdownEl) return;
    const expires = new Date(pendingConfirmation.expiresAt);
    if (Number.isNaN(expires.getTime())) return;
    const updateCountdown = () => {
      const remaining = expires.getTime() - Date.now();
      if (remaining <= 0) {
        confirmationCountdownEl.textContent = 'Código expirado — solicite um novo envio.';
        resetConfirmationCountdown();
        return;
      }
      const minutes = Math.floor(remaining / 60000);
      const seconds = Math.floor((remaining % 60000) / 1000);
      confirmationCountdownEl.textContent = `Código expira em ${minutes}m ${String(seconds).padStart(2, '0')}s`;
    };
    updateCountdown();
    confirmationTimer = setInterval(updateCountdown, 1000);
  }

  function showAuthView(mode = 'login') {
    const normalized = mode === 'signup' || mode === 'confirm' ? mode : 'login';
    currentAuthMode = normalized;
    if (loginCardEl) loginCardEl.classList.toggle('hidden', normalized !== 'login');
    if (signupCardEl) signupCardEl.classList.toggle('hidden', normalized !== 'signup');
    if (confirmCardEl) confirmCardEl.classList.toggle('hidden', normalized !== 'confirm');
    if (normalized !== 'confirm') {
      resetConfirmationCountdown();
      if (normalized === 'login') {
        pendingConfirmation = null;
      }
    } else {
      startConfirmationCountdown();
    }
    if (normalized === 'login' && loginEmailInput) {
      setTimeout(() => loginEmailInput.focus(), 60);
    } else if (normalized === 'signup' && signupFields.name.input) {
      setTimeout(() => signupFields.name.input.focus(), 60);
    } else if (normalized === 'confirm' && confirmCodeInput) {
      setTimeout(() => confirmCodeInput.focus(), 60);
    }
  }

  function openConfirmationView(confirmation, options = {}) {
    const remember = options && Object.prototype.hasOwnProperty.call(options, 'remember')
      ? !!options.remember
      : rememberPreference;
    rememberPreference = remember;
    if (rememberMeCheckbox) {
      rememberMeCheckbox.checked = rememberPreference;
    }
    pendingConfirmation = {
      email: confirmation && confirmation.email ? confirmation.email : (pendingConfirmation && pendingConfirmation.email) || '',
      userId: confirmation && confirmation.userId ? confirmation.userId : (pendingConfirmation && pendingConfirmation.userId) || '',
      expiresAt: confirmation && confirmation.expiresAt ? confirmation.expiresAt : (pendingConfirmation && pendingConfirmation.expiresAt) || '',
      remember
    };
    if (confirmEmailInput) confirmEmailInput.value = pendingConfirmation.email || '';
    if (confirmCodeInput) confirmCodeInput.value = '';
    clearCardMessage(confirmMsgEl);
    showAuthView('confirm');
  }

  const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  const requiredSignupKeys = ['name','email','password'];
  const signupFields = {
    name: {
      input: $('#rName'),
      error: $('#rNameError'),
      touched: false,
      customError: null,
      validator: value => {
        if (!value) return { valid:false, message:'Informe o nome completo.' };
        if (value.length < 3) return { valid:false, message:'O nome deve ter pelo menos 3 caracteres.' };
        return { valid:true, message:'' };
      }
    },
    email: {
      input: $('#rEmail'),
      error: $('#rEmailError'),
      touched: false,
      customError: null,
      validator: value => {
        if (!value) return { valid:false, message:'Informe o e-mail.' };
        if (!emailPattern.test(value)) return { valid:false, message:'Formato de e-mail inválido.' };
        return { valid:true, message:'' };
      }
    },
    password: {
      input: $('#rPass'),
      error: $('#rPassError'),
      touched: false,
      customError: null,
      validator: value => {
        const missing = [];
        if (value.length < 8) missing.push('no mínimo 8 caracteres');
        if (!/[A-Z]/.test(value)) missing.push('uma letra maiúscula');
        if (!/[a-z]/.test(value)) missing.push('uma letra minúscula');
        if (!/\d/.test(value)) missing.push('um número');
        if (!/[^A-Za-z0-9]/.test(value)) missing.push('um símbolo');
        if (missing.length) {
          const last = missing.pop();
          const message = missing.length ? `A senha deve conter ${missing.join(', ')} e ${last}.` : `A senha deve conter ${last}.`;
          return { valid:false, message };
        }
        return { valid:true, message:'' };
      }
    },
    adminCode: {
      input: $('#rAdminCode'),
      error: $('#rAdminCodeError'),
      touched: false,
      customError: null,
      validator: () => ({ valid:true, message:'' })
    }
  };

  const btnSignup = $('#btnSignup');
  const loginEmailInput = $('#lEmail');
  const loginPasswordInput = $('#lPass');
  const btnLogin = $('#btnLogin');
  let isSignupSubmitting = false;
  let isLoginSubmitting = false;
  let isConfirmSubmitting = false;

  function evaluateField(key, opts = {}) {
    const field = signupFields[key];
    if (!field || !field.input) return true;
    const rawValue = field.input.value || '';
    const value = rawValue.trim();
    const shouldShow = opts.force || field.touched || rawValue.length > 0;

    if (field.customError) {
      if (field.error) field.error.textContent = shouldShow ? field.customError : '';
      return false;
    }

    const result = field.validator(value, rawValue);
    if (field.error) field.error.textContent = shouldShow ? result.message : '';
    return !!result.valid;
  }

  function updateSignupButton() {
    const allValid = requiredSignupKeys.every(key => evaluateField(key));
    if (btnSignup) btnSignup.disabled = !allValid || isSignupSubmitting;
  }

  function updateLoginButton() {
    if (!btnLogin) return;
    btnLogin.disabled = !!isLoginSubmitting;
    btnLogin.textContent = isLoginSubmitting ? 'Entrando...' : 'Entrar';
  }

  function updateConfirmButton() {
    if (!btnConfirmSignup) return;
    btnConfirmSignup.disabled = !!isConfirmSubmitting;
    btnConfirmSignup.textContent = isConfirmSubmitting ? 'Confirmando...' : 'Confirmar acesso';
  }

  Object.entries(signupFields).forEach(([key, field]) => {
    if (!field.input) return;
    field.input.addEventListener('input', () => {
      field.customError = null;
      clearCardMessage(signupMessageEl);
      evaluateField(key);
      updateSignupButton();
    });
    field.input.addEventListener('blur', () => {
      field.touched = true;
      evaluateField(key, { force: true });
      updateSignupButton();
    });
  });

  updateSignupButton();
  updateLoginButton();
  updateConfirmButton();

  if (toggleSignupBtn) {
    toggleSignupBtn.addEventListener('click', () => {
      clearCardMessage(loginMessageEl);
      showAuthView('signup');
    });
  }
  if (toggleLoginBtn) {
    toggleLoginBtn.addEventListener('click', () => {
      clearCardMessage(signupMessageEl);
      showAuthView('login');
    });
  }
  if (confirmBackToLoginBtn) {
    confirmBackToLoginBtn.addEventListener('click', () => {
      clearCardMessage(confirmMsgEl);
      showAuthView('login');
    });
  }
  if (rememberMeCheckbox) {
    rememberMeCheckbox.addEventListener('change', () => {
      rememberPreference = !!rememberMeCheckbox.checked;
    });
  }

  [loginEmailInput, loginPasswordInput].forEach(input => {
    if (!input) return;
    input.addEventListener('input', () => clearCardMessage(loginMessageEl));
  });

  if (communityTextarea) {
    communityTextarea.addEventListener('input', () => {
      showCommunityError('');
      updateCommunityCounter();
      syncMentionsFromText();
      updateCommunityPublishState();
    });
  }

  if (communityAttachmentInput) {
    communityAttachmentInput.addEventListener('change', event => {
      const input = event.target;
      const files = input && input.files ? Array.from(input.files) : [];
      if (files.length) {
        files.forEach(file => uploadCommunityAttachmentFile(file));
      }
      if (input) {
        input.value = '';
      }
    });
  }

  if (communityMentionToggle) {
    communityMentionToggle.setAttribute('aria-expanded', 'false');
    communityMentionToggle.addEventListener('click', event => {
      event.preventDefault();
      if (!currentUser) {
        showToast({ message: 'Faça login para marcar colegas na publicação.', type: 'warning' });
        return;
      }
      toggleMentionPicker();
    });
  }

  if (communityModeButtons.length) {
    communityModeButtons.forEach(button => {
      if (!button) return;
      button.addEventListener('click', () => {
        const mode = button.getAttribute('data-community-mode');
        setCommunityMode(mode);
      });
    });
  }
  setCommunityMode(forumState.mode);

  if (forumInfoToggle && forumInfoPanel) {
    forumInfoToggle.addEventListener('click', () => {
      const expanded = forumInfoToggle.getAttribute('aria-expanded') === 'true';
      forumInfoToggle.setAttribute('aria-expanded', expanded ? 'false' : 'true');
      forumInfoPanel.classList.toggle('hidden', expanded);
    });
  }

  if (forumIdeaForm) {
    forumIdeaForm.addEventListener('submit', event => {
      event.preventDefault();
      if (!currentUser) {
        showToast({ message: 'Faça login para registrar uma ideia.', type: 'warning' });
        return;
      }
      const token = getSessionToken();
      if (!token) {
        expireSession(SESSION_EXPIRED_FALLBACK);
        return;
      }
      const title = forumIdeaTitleInput ? forumIdeaTitleInput.value.trim() : '';
      const summary = forumIdeaSummaryInput ? forumIdeaSummaryInput.value.trim() : '';
      const benefit = forumIdeaBenefitInput ? forumIdeaBenefitInput.value.trim() : '';
      const impact = forumIdeaImpactSelect ? forumIdeaImpactSelect.value : 'Alto';
      const tags = forumIdeaTagsInput ? forumIdeaTagsInput.value.trim() : '';
      const visibility = forumIdeaVisibilitySelect ? forumIdeaVisibilitySelect.value : 'public';
      const targetIds = forumIdeaTargetsSelect
        ? Array.from(forumIdeaTargetsSelect.selectedOptions || []).map(option => option.value).filter(Boolean)
        : [];
      if (!title) {
        showIdeaFormError('Informe o título da ideia.');
        return;
      }
      if (!summary) {
        showIdeaFormError('Descreva a ideia antes de enviar.');
        return;
      }
      if (visibility === 'private' && !targetIds.length) {
        showIdeaFormError('Selecione ao menos um convidado para ideias privadas.');
        return;
      }
      showIdeaFormError('');
      if (btnSubmitIdea) {
        btnSubmitIdea.disabled = true;
        btnSubmitIdea.setAttribute('aria-busy', 'true');
      }
      google.script.run
        .withFailureHandler(err => {
          if (btnSubmitIdea) {
            btnSubmitIdea.disabled = false;
            btnSubmitIdea.removeAttribute('aria-busy');
          }
          if (handleSessionExpiredError(err)) return;
          showIdeaFormError(err?.message || 'Não foi possível registrar a ideia agora.');
        })
        .withSuccessHandler(() => {
          if (btnSubmitIdea) {
            btnSubmitIdea.disabled = false;
            btnSubmitIdea.removeAttribute('aria-busy');
          }
          resetIdeaForm();
          showToast({ message: 'Ideia registrada com sucesso!', type: 'success' });
          loadForumIdeas();
        })
        .submitForumIdea({
          token,
          title,
          summary,
          benefit,
          impact,
          tags,
          visibility,
          targetUserIds: visibility === 'private' ? targetIds : []
        });
    });
  }

  if (forumIdeaTargetsSelect && forumIdeaVisibilitySelect) {
    forumIdeaTargetsSelect.addEventListener('change', () => {
      const hasSelection = Array.from(forumIdeaTargetsSelect.selectedOptions || []).some(option => option.value);
      if (hasSelection) forumIdeaVisibilitySelect.value = 'private';
    });
    forumIdeaVisibilitySelect.addEventListener('change', () => {
      if (forumIdeaVisibilitySelect.value !== 'private') {
        Array.from(forumIdeaTargetsSelect.options || []).forEach(option => { option.selected = false; });
      }
    });
  }

  if (forumIdeaListEl) {
    forumIdeaListEl.addEventListener('click', event => {
      const button = event.target instanceof HTMLElement
        ? event.target.closest('[data-action="idea-feedback"]')
        : null;
      if (!button) return;
      event.preventDefault();
      const ideaId = button.getAttribute('data-id') || '';
      const type = button.getAttribute('data-type') || '';
      if (!ideaId || !type) return;
      handleIdeaFeedback(ideaId, type, { button });
    });
    forumIdeaListEl.addEventListener('submit', event => {
      const form = event.target instanceof HTMLFormElement
        ? event.target.closest('[data-action="idea-comment"]')
        : null;
      if (!form) return;
      event.preventDefault();
      const ideaId = form.getAttribute('data-id') || '';
      if (!ideaId) return;
      const textarea = form.querySelector('textarea');
      const message = textarea ? textarea.value.trim() : '';
      if (!message) {
        showToast({ message: 'Escreva um comentário antes de enviar.', type: 'warning' });
        return;
      }
      const submitBtn = form.querySelector('button[type="submit"]');
      handleIdeaFeedback(ideaId, 'comment', { message, button: submitBtn, textarea });
    });
  }

  resetIdeaForm();
  resetPollForm();
  resetQuestionForm();

  if (btnAddPollOption) {
    btnAddPollOption.addEventListener('click', event => {
      event.preventDefault();
      addPollOptionRow();
    });
  }

  if (forumPollForm) {
    forumPollForm.addEventListener('submit', event => {
      event.preventDefault();
      if (!currentUser) {
        showToast({ message: 'Faça login para publicar enquetes.', type: 'warning' });
        return;
      }
      const token = getSessionToken();
      if (!token) {
        expireSession(SESSION_EXPIRED_FALLBACK);
        return;
      }
      const question = forumPollQuestionInput ? forumPollQuestionInput.value.trim() : '';
      const description = forumPollDescriptionInput ? forumPollDescriptionInput.value.trim() : '';
      const optionInputs = forumPollOptionsWrap
        ? Array.from(forumPollOptionsWrap.querySelectorAll('input'))
        : [];
      const options = optionInputs.map(input => input.value.trim()).filter(Boolean);
      if (!question) {
        showPollFormError('Informe a pergunta da enquete.');
        return;
      }
      if (options.length < 2) {
        showPollFormError('A enquete precisa de pelo menos duas alternativas.');
        return;
      }
      const audience = forumPollAudienceSelect ? forumPollAudienceSelect.value : 'all';
      const closesAt = forumPollClosingInput ? forumPollClosingInput.value : '';
      const allowMultiple = forumPollAllowMultiple ? !!forumPollAllowMultiple.checked : false;
      const allowUpdates = forumPollAllowUpdate ? !!forumPollAllowUpdate.checked : true;
      const visibility = forumPollVisibilitySelect ? forumPollVisibilitySelect.value : 'public';
      const targetIds = forumPollTargetsSelect
        ? Array.from(forumPollTargetsSelect.selectedOptions || []).map(option => option.value).filter(Boolean)
        : [];
      if (visibility === 'private' && !targetIds.length) {
        showPollFormError('Selecione participantes para enquetes privadas.');
        return;
      }
      showPollFormError('');
      if (btnSubmitPoll) {
        btnSubmitPoll.disabled = true;
        btnSubmitPoll.setAttribute('aria-busy', 'true');
      }
      google.script.run
        .withFailureHandler(err => {
          if (btnSubmitPoll) {
            btnSubmitPoll.disabled = false;
            btnSubmitPoll.removeAttribute('aria-busy');
          }
          if (handleSessionExpiredError(err)) return;
          showPollFormError(err?.message || 'Não foi possível publicar a enquete agora.');
        })
        .withSuccessHandler(() => {
          if (btnSubmitPoll) {
            btnSubmitPoll.disabled = false;
            btnSubmitPoll.removeAttribute('aria-busy');
          }
          resetPollForm();
          showToast({ message: 'Enquete publicada para a turma!', type: 'success' });
          loadForumPolls();
        })
        .createForumPoll({
          token,
          question,
          description,
          options,
          audience,
          closesAt,
          allowMultiple,
          allowUpdates,
          visibility,
          targetUserIds: visibility === 'private' ? targetIds : []
        });
    });
  }

  if (forumPollTargetsSelect && forumPollVisibilitySelect) {
    forumPollTargetsSelect.addEventListener('change', () => {
      const hasSelection = Array.from(forumPollTargetsSelect.selectedOptions || []).some(option => option.value);
      if (hasSelection) forumPollVisibilitySelect.value = 'private';
    });
    forumPollVisibilitySelect.addEventListener('change', () => {
      if (forumPollVisibilitySelect.value !== 'private') {
        Array.from(forumPollTargetsSelect.options || []).forEach(option => { option.selected = false; });
      }
    });
  }

  if (forumQuestionForm) {
    forumQuestionForm.addEventListener('submit', event => {
      event.preventDefault();
      if (!currentUser) {
        showToast({ message: 'Faça login para enviar dúvidas.', type: 'warning' });
        return;
      }
      const token = getSessionToken();
      if (!token) {
        expireSession(SESSION_EXPIRED_FALLBACK);
        return;
      }
      const subject = forumQuestionSubjectInput ? forumQuestionSubjectInput.value.trim() : '';
      const details = forumQuestionDetailsInput ? forumQuestionDetailsInput.value.trim() : '';
      const scopeRadio = forumQuestionScopeRadios.find(radio => radio && radio.checked);
      const scope = scopeRadio ? scopeRadio.value : 'community';
      const visibility = forumQuestionVisibilitySelect ? forumQuestionVisibilitySelect.value : 'public';
      const targetIds = forumQuestionTargetsSelect
        ? Array.from(forumQuestionTargetsSelect.selectedOptions || []).map(option => option.value).filter(Boolean)
        : [];
      if (!subject) {
        showQuestionFormError('Informe o assunto da dúvida.');
        return;
      }
      if (!details) {
        showQuestionFormError('Descreva a dúvida com mais detalhes.');
        return;
      }
      if (visibility === 'private' && scope !== 'admin' && !targetIds.length) {
        showQuestionFormError('Convide pessoas para dúvidas privadas destinadas à comunidade.');
        return;
      }
      showQuestionFormError('');
      if (btnSubmitQuestion) {
        btnSubmitQuestion.disabled = true;
        btnSubmitQuestion.setAttribute('aria-busy', 'true');
      }
      google.script.run
        .withFailureHandler(err => {
          if (btnSubmitQuestion) {
            btnSubmitQuestion.disabled = false;
            btnSubmitQuestion.removeAttribute('aria-busy');
          }
          if (handleSessionExpiredError(err)) return;
          showQuestionFormError(err?.message || 'Não foi possível registrar a dúvida agora.');
        })
        .withSuccessHandler(() => {
          if (btnSubmitQuestion) {
            btnSubmitQuestion.disabled = false;
            btnSubmitQuestion.removeAttribute('aria-busy');
          }
          resetQuestionForm();
          showToast({ message: 'Dúvida enviada com sucesso!', type: 'success' });
          loadForumQuestions();
        })
        .submitForumQuestion({
          token,
          subject,
          details,
          scope,
          visibility,
          targetUserIds: visibility === 'private' ? targetIds : []
        });
    });
  }

  if (forumQuestionTargetsSelect && forumQuestionVisibilitySelect) {
    forumQuestionTargetsSelect.addEventListener('change', () => {
      const hasSelection = Array.from(forumQuestionTargetsSelect.selectedOptions || []).some(option => option.value);
      if (hasSelection) forumQuestionVisibilitySelect.value = 'private';
    });
    forumQuestionVisibilitySelect.addEventListener('change', () => {
      if (forumQuestionVisibilitySelect.value !== 'private') {
        Array.from(forumQuestionTargetsSelect.options || []).forEach(option => { option.selected = false; });
      }
    });
  }

  if (btnForumNotificationsRead) {
    btnForumNotificationsRead.addEventListener('click', () => markForumNotificationsRead());
  }

  if (communityMentionSearch) {
    communityMentionSearch.addEventListener('input', event => {
      const value = event && event.target ? event.target.value : '';
      communityState.mentionSearch = (value || '').toString();
      renderCommunityMentionOptions();
    });
    communityMentionSearch.addEventListener('keydown', event => {
      if (event && event.key === 'Escape') {
        setMentionPickerVisible(false);
      }
    });
  }

  if (communityMentionList) {
    communityMentionList.addEventListener('click', event => {
      const target = event.target instanceof HTMLElement
        ? event.target.closest('[data-mention-id]')
        : null;
      if (!target) return;
      event.preventDefault();
      const id = target.getAttribute('data-mention-id') || '';
      if (!id) return;
      const user = (communityState.shareableUsers || []).find(item => item && item.id === id);
      if (user) addCommunityMention(user);
    });
  }

  if (communityMentionChips) {
    communityMentionChips.addEventListener('click', event => {
      const target = event.target instanceof HTMLElement
        ? event.target.closest('[data-action="remove-mention"]')
        : null;
      if (!target) return;
      event.preventDefault();
      const id = target.getAttribute('data-id') || target.getAttribute('data-mention-id') || '';
      if (id) removeCommunityMention(id);
    });
  }

  document.addEventListener('click', event => {
    if (!communityState.mentionPickerOpen) return;
    const node = event.target instanceof Node ? event.target : null;
    const wrap = communityMentionWrap;
    if (wrap && node && wrap.contains(node)) return;
    setMentionPickerVisible(false);
  });

  document.addEventListener('keydown', event => {
    if (event && event.key === 'Escape' && communityState.mentionPickerOpen) {
      setMentionPickerVisible(false);
    }
  });

  if (communityPrivacySelect) {
    communityPrivacySelect.addEventListener('change', event => {
      const value = event && event.target ? event.target.value : communityState.privacy;
      setCommunityPrivacy(value);
    });
  }

  if (communityTargetsSelect) {
    communityTargetsSelect.addEventListener('change', () => {
      updateCommunityPublishState();
    });
  }

  if (communityPublishBtn) {
    communityPublishBtn.addEventListener('click', () => {
      if (!currentUser) {
        showToast({ message: 'Entre com sua conta para publicar no mural.', type: 'warning' });
        return;
      }
      const token = getSessionToken();
      if (!token) {
        expireSession(SESSION_EXPIRED_FALLBACK);
        return;
      }
      const message = communityTextarea ? communityTextarea.value.trim() : '';
      const attachments = communityState.attachments
        .map(att => att && att.id ? att.id : '')
        .filter(Boolean);
      const visibility = communityState.privacy === 'private' ? 'private' : 'public';
      const selectedTargets = getSelectedCommunityTargets();
      const mentionIds = getCommunityMentionIds();
      const combinedTargets = visibility === 'private'
        ? Array.from(new Set([...selectedTargets, ...mentionIds]))
        : [];
      if (!message) {
        showCommunityError('Escreva uma mensagem para publicar.');
        if (communityTextarea) {
          try { communityTextarea.focus({ preventScroll: true }); } catch (err) { communityTextarea.focus(); }
        }
        return;
      }
      if (message.length > communityCharLimit) {
        showCommunityError(`A mensagem deve ter até ${communityCharLimit} caracteres.`);
        return;
      }
      if (visibility === 'private' && combinedTargets.length === 0) {
        showCommunityError('Selecione ao menos um destinatário para a publicação privada.');
        if (communityTargetsSelect) {
          try { communityTargetsSelect.focus({ preventScroll: true }); } catch (err) { communityTargetsSelect.focus(); }
        }
        return;
      }
      isPublishingCommunity = true;
      updateCommunityPublishState();
      showCommunityError('');
      google.script.run
        .withFailureHandler(err => {
          isPublishingCommunity = false;
          updateCommunityPublishState();
          if (handleSessionExpiredError(err, { onHandled: message => showCommunityError(message) })) {
            return;
          }
          showCommunityError(err?.message || 'Não foi possível publicar agora.');
        })
        .withSuccessHandler(() => {
          isPublishingCommunity = false;
          updateCommunityPublishState();
          if (communityTextarea) communityTextarea.value = '';
          communityState.attachments = [];
          communityState.mentions = [];
          renderCommunityAttachments();
          renderCommunityMentionChips();
          renderCommunityMentionOptions();
          setMentionPickerVisible(false);
          if (visibility === 'private' && communityTargetsSelect) {
            Array.from(communityTargetsSelect.options || []).forEach(option => { option.selected = false; });
          }
          updateCommunityCounter();
          updateCommunityPublishState();
          showCommunityError('');
          showToast({ message: 'Mensagem publicada no mural!', type: 'success' });
          refreshCommunityWall();
        })
        .addCommunityWallEntry({
          token,
          message,
          visibility,
          attachments,
          targetUserIds: visibility === 'private' ? combinedTargets : [],
          mentionUserIds: mentionIds
        });
    });
  }

  if (communityListEl) {
    communityListEl.addEventListener('click', event => {
      const reactionBtn = event.target instanceof HTMLElement
        ? event.target.closest('[data-action="toggle-reaction"]')
        : null;
      if (reactionBtn) {
        event.preventDefault();
        handleReactionToggle(reactionBtn);
        return;
      }
      const target = event.target instanceof HTMLElement
        ? event.target.closest('[data-action="remove-wall-entry"]')
        : null;
      if (!target) return;
      event.preventDefault();
      if (!currentUser?.isAdmin) {
        showToast({ message: 'Apenas administradores podem remover publicações.', type: 'error' });
        return;
      }
      const postId = target.getAttribute('data-id') || '';
      if (!postId) return;
      const token = getSessionToken();
      if (!token) {
        expireSession(SESSION_EXPIRED_FALLBACK);
        return;
      }
      const button = target instanceof HTMLButtonElement ? target : target.closest('button');
      if (button) {
        button.disabled = true;
        button.setAttribute('aria-busy', 'true');
      }
      google.script.run
        .withFailureHandler(err => {
          if (button) {
            button.disabled = false;
            button.removeAttribute('aria-busy');
          }
          if (handleSessionExpiredError(err)) {
            return;
          }
          showToast({ message: err?.message || 'Não foi possível remover agora.', type: 'error' });
        })
        .withSuccessHandler(() => {
          showToast({ message: 'Publicação removida do mural.', type: 'success' });
          refreshCommunityWall();
        })
        .removeCommunityWallEntry({ token, postId });
    });
  }

  attachNavListeners(document);
  setActiveSubPageButtons(activeSubPage);
  renderStudentHero();
  updateCommunityCounter();
  renderCommunityAttachments();
  renderCommunityTargetsOptions();

  // UI switches
  function updateUI(options = {}) {
    const keepLevelIndicator = !!(options && options.keepLevelIndicator);
    const skipAchievements = !!(options && options.skipAchievements);
    const skipCommunity = !!(options && options.skipCommunity);
    const achievementsData = options && options.achievementsData;
    const achievementsUnlocked = options && options.achievementsUnlocked;
    const achievementsSilent = !!(options && options.silentAchievements);
    syncNavAvailability();
    ensureRouteAfterAuthChange();

    const activeUserId = currentUser?.id ?? null;
    const hasUserChanged = activeUserId !== lastPanelPollUserId;
    if (!currentUser || hasUserChanged) {
      forumState.pollSelections = {};
    }
    lastPanelPollUserId = activeUserId;

    if (!currentUser) {
      $('#authSection').classList.remove('hidden');
      showAuthView('login');
      $('#dashSection').classList.add('hidden');
      $('#userInfo').textContent = 'Visitante';
      $('#btnLogout').classList.add('hidden');
      hasLoadedEmbeds = false;
      if (excelFrameEl) excelFrameEl.removeAttribute('src');
      if (pptFrameEl) pptFrameEl.removeAttribute('src');
      if (resourcesListEl) resourcesListEl.innerHTML = '';
      if (resourcesEmptyEl) {
        resourcesEmptyEl.textContent = 'Faça login com seu e-mail corporativo para visualizar os materiais compartilhados.';
        resourcesEmptyEl.classList.remove('hidden');
      }
      if (eventsListEl) eventsListEl.innerHTML = '';
      if (eventsEmptyEl) {
        eventsEmptyEl.textContent = 'Faça login com seu e-mail corporativo para acompanhar os próximos eventos.';
        eventsEmptyEl.classList.remove('hidden');
      }
      if (adminExcelListEl) adminExcelListEl.innerHTML = '';
      if (adminExcelEmptyEl) {
        adminExcelEmptyEl.textContent = adminExcelEmptyDefaultText || 'Nenhum material publicado ainda.';
        adminExcelEmptyEl.classList.remove('hidden');
      }
      if (adminPptListEl) adminPptListEl.innerHTML = '';
      if (adminPptEmptyEl) {
        adminPptEmptyEl.textContent = adminPptEmptyDefaultText || 'Nenhuma apresentação compartilhada ainda.';
        adminPptEmptyEl.classList.remove('hidden');
      }
      if (userExcelListEl) userExcelListEl.innerHTML = '';
      if (userExcelEmptyEl) {
        userExcelEmptyEl.textContent = 'Faça login para enviar suas planilhas.';
        userExcelEmptyEl.classList.remove('hidden');
      }
      if (userPptListEl) userPptListEl.innerHTML = '';
      if (userPptEmptyEl) {
        userPptEmptyEl.textContent = 'Faça login para enviar suas apresentações.';
        userPptEmptyEl.classList.remove('hidden');
      }
      if (userFolderLinkEl) userFolderLinkEl.classList.add('hidden');
      if (userFolderHintEl) userFolderHintEl.textContent = userFolderHintDefaultText;
      renderCommunityWall([]);
      if (communityEmptyEl) {
        communityEmptyEl.textContent = 'Faça login com sua conta corporativa para visualizar o mural da turma.';
        communityEmptyEl.classList.remove('hidden');
      }
      forumState.polls = [];
      forumState.pollSelections = {};
      forumState.pollRespondedCount = 0;
      forumState.ideas = [];
      forumState.questions = [];
      forumState.notifications = [];
      forumState.notificationsUnread = 0;
      forumState.latestEntries = [];
      forumState.latestMaxTimestamp = 0;
      renderForumPolls();
      renderForumIdeas();
      renderForumQuestions();
      renderForumNotifications();
      renderForumLatest();
      resetStudentStoryState();
      openStudentSubPage('home');
      resetHistorySection();
      resetLevelIndicator();
      resetAchievementsUI();
      syncAdminVisibility();
      updateCommunityAccess();
      syncHeaderContext();
      renderForumPolls();
      renderAdminBulletin();
      renderAdminMissionList();
      if (achievementsAdminNoticeEl) {
        if (achievementsAdminNoticeDefaultText) {
          achievementsAdminNoticeEl.textContent = achievementsAdminNoticeDefaultText;
        }
        achievementsAdminNoticeEl.classList.remove('hidden');
      }
      if (achievementsLeaderboardEl) achievementsLeaderboardEl.classList.add('hidden');
      if (achievementsPodiumEl) achievementsPodiumEl.innerHTML = '';
      if (achievementsLeaderboardTableEl) achievementsLeaderboardTableEl.innerHTML = '';
      if (achievementsRankingBadgeEl) achievementsRankingBadgeEl.textContent = 'Restrito à coordenação';
      return;
    }

    $('#authSection').classList.add('hidden');
    $('#dashSection').classList.remove('hidden');
    $('#btnLogout').classList.remove('hidden');
    $('#userInfo').textContent = currentUser.name + (currentUser.isAdmin ? ' (Admin)' : '');
    if (resourcesEmptyEl && resourcesEmptyDefaultText) resourcesEmptyEl.textContent = resourcesEmptyDefaultText;
    if (eventsEmptyEl && eventsEmptyDefaultText) eventsEmptyEl.textContent = eventsEmptyDefaultText;
    if (communityEmptyEl && communityEmptyDefaultHtml) communityEmptyEl.innerHTML = communityEmptyDefaultHtml;
    if (!hasLoadedEmbeds) {
      loadEmbeds();
    }
    setActiveSubPageButtons(activeSubPage);
    syncHeaderContext();
    renderForumPolls();
    loadShareableUsers();

    if (!keepLevelIndicator) {
      setLevelIndicatorLoading();
    }

    if (achievementsData) {
      applyAchievementsUpdate(achievementsData, achievementsUnlocked || [], { silent: achievementsSilent });
    } else if (!skipAchievements) {
      loadAchievementsOverview();
    }

    const token = getSessionToken();
    if (!token) {
      expireSession(SESSION_EXPIRED_FALLBACK);
      return;
    }

    google.script.run
      .withFailureHandler(err => {
        if (handleSessionExpiredError(err, {
          onHandled: message => {
            if (!keepLevelIndicator) {
              if (nextLevelTextEl) nextLevelTextEl.textContent = message;
              if (nextLevelPctEl) nextLevelPctEl.textContent = '—';
            }
          }
        })) {
          return;
        }
        console.error('Falha ao obter estado do usuário:', err);
        if (!keepLevelIndicator) {
          if (nextLevelTextEl) nextLevelTextEl.textContent = 'Não foi possível carregar o progresso agora.';
          if (nextLevelPctEl) nextLevelPctEl.textContent = '—';
        }
      })
      .withSuccessHandler(s => {
        $('#xpBox').textContent = s.xp;
        $('#lvlBox').textContent = s.level;
        $('#doneBox').textContent = s.concluidos;
        const pct = Math.round((s.concluidos / TOTAL_MODULES) * 100);
        $('#pctBox').textContent = pct + '%';
        $('#barBox').style.width = pct + '%';
        updateLevelIndicator(s);
        updateStudentStoryState({
          xp: s.xp,
          level: s.level,
          modulesCompleted: s.concluidos,
          metrics: { xpTotal: s.xp, modulesCompleted: s.concluidos }
        });
      })
      .getUserState({ token, userId: currentUser.id });

    loadHistoryForCurrentUser();
    refreshRanking();
    $('#adminPanel').classList.toggle('hidden', !currentUser.isAdmin);
    syncAdminVisibility();
    renderAdminBulletin();
    renderAdminMissionList();
    updateCommunityAccess();
    if (!skipCommunity) refreshCommunityWall();
    if (currentAppRoute === 'forum') {
      loadForumPolls();
      loadForumIdeas();
      loadForumQuestions();
      loadForumNotifications();
    }
  }

  function refreshRanking() {
    const simpleWrap = $('#rankWrap');
    const adminWrap = $('#adminRank');
    const isAdmin = !!(currentUser && currentUser.isAdmin);

    const renderSimpleList = entries => {
      if (simpleWrap) {
        simpleWrap.innerHTML = '';
        if (!entries.length) {
          const empty = document.createElement('div');
          empty.className = 'text-xs text-slate-500 dark:text-slate-400';
          empty.textContent = 'Ranking ainda não disponível.';
          simpleWrap.appendChild(empty);
        } else {
          entries.slice(0, 5).forEach(item => {
            const row = document.createElement('div');
            row.textContent = `${item.pos}º — ${item.name || 'Participante'} • ${formatNumber(item.xp)} XP`;
            simpleWrap.appendChild(row);
          });
        }
      }
      if (adminWrap) {
        adminWrap.innerHTML = '';
        if (!entries.length) {
          const empty = document.createElement('div');
          empty.className = 'text-xs text-slate-500 dark:text-slate-400';
          empty.textContent = 'Ranking ainda não disponível.';
          adminWrap.appendChild(empty);
        } else {
          entries.forEach(item => {
            const row = document.createElement('div');
            row.textContent = `${item.pos}º — ${item.name || 'Participante'} • ${formatNumber(item.xp)} XP`;
            adminWrap.appendChild(row);
          });
        }
      }
    };

    const renderAdminLeaderboard = entries => {
      if (achievementsRankingBadgeEl) {
        let label = 'Atualizado agora';
        if (timeFormatter) {
          try {
            label = `Atualizado às ${timeFormatter.format(new Date())}`;
          } catch (err) {
            label = 'Atualizado agora';
          }
        }
        achievementsRankingBadgeEl.textContent = label;
      }

      if (achievementsPodiumEl) {
        achievementsPodiumEl.innerHTML = '';
        const podiumByRank = {};
        entries.forEach(item => {
          if (item && item.pos && item.pos <= 3 && !podiumByRank[item.pos]) {
            podiumByRank[item.pos] = item;
          }
        });
        const order = [2, 1, 3];
        order.forEach(rank => {
          const entry = podiumByRank[rank];
          if (!entry) return;
          const card = document.createElement('div');
          let classes = 'podium-card';
          if (rank === 1) classes += ' podium-card-first';
          else if (rank === 2) classes += ' podium-card-second';
          else if (rank === 3) classes += ' podium-card-third';
          card.className = classes;
          const rankLabel = document.createElement('div');
          rankLabel.className = 'podium-rank';
          rankLabel.textContent = `${rank}º lugar`;
          const nameEl = document.createElement('div');
          nameEl.className = 'podium-name';
          nameEl.textContent = entry.name || 'Participante';
          const scoreEl = document.createElement('div');
          scoreEl.className = 'podium-score';
          scoreEl.textContent = `Nível ${formatNumber(entry.level)} • ${formatNumber(entry.xp)} XP`;
          card.append(rankLabel, nameEl, scoreEl);
          achievementsPodiumEl.appendChild(card);
        });
        if (!achievementsPodiumEl.children.length) {
          const empty = document.createElement('p');
          empty.className = 'text-sm text-slate-500 dark:text-slate-300';
          empty.textContent = 'Ranking ainda não possui participantes suficientes.';
          achievementsPodiumEl.appendChild(empty);
        }
      }

      if (achievementsLeaderboardTableEl) {
        achievementsLeaderboardTableEl.innerHTML = '';
        if (!entries.length) {
          const tr = document.createElement('tr');
          const td = document.createElement('td');
          td.colSpan = 2;
          td.className = 'px-4 py-4 text-sm text-slate-500 dark:text-slate-300';
          td.textContent = 'Nenhum aluno ranqueado ainda.';
          tr.appendChild(td);
          achievementsLeaderboardTableEl.appendChild(tr);
        } else {
          entries.forEach(entry => {
            const tr = document.createElement('tr');
            const infoTd = document.createElement('td');
            infoTd.className = 'px-4 py-3 align-middle';
            const nameDiv = document.createElement('div');
            nameDiv.className = 'leaderboard-name';
            nameDiv.textContent = `${entry.pos}º — ${entry.name || 'Participante'}`;
            const metaDiv = document.createElement('div');
            metaDiv.className = 'leaderboard-meta';
            metaDiv.textContent = `Nível ${formatNumber(entry.level)} • ${formatNumber(entry.xp)} XP`;
            infoTd.append(nameDiv, metaDiv);
            const xpTd = document.createElement('td');
            xpTd.className = 'px-4 py-3 text-right align-middle font-semibold text-slate-600 dark:text-slate-200';
            xpTd.textContent = `${formatNumber(entry.xp)} XP`;
            tr.append(infoTd, xpTd);
            achievementsLeaderboardTableEl.appendChild(tr);
          });
        }
      }

      if (achievementsLeaderboardEl) {
        achievementsLeaderboardEl.classList.remove('hidden');
      }
      if (achievementsRankingBadgeEl && !entries.length) {
        achievementsRankingBadgeEl.textContent = 'Sem participantes';
      }
    };

    const resetAdminNotice = () => {
      if (!achievementsAdminNoticeEl) return;
      if (achievementsAdminNoticeDefaultText) {
        achievementsAdminNoticeEl.textContent = achievementsAdminNoticeDefaultText;
      }
    };

    resetAdminNotice();
    if (!isAdmin) {
      if (achievementsAdminNoticeEl) achievementsAdminNoticeEl.classList.remove('hidden');
      if (achievementsLeaderboardEl) achievementsLeaderboardEl.classList.add('hidden');
      if (achievementsPodiumEl) achievementsPodiumEl.innerHTML = '';
      if (achievementsLeaderboardTableEl) achievementsLeaderboardTableEl.innerHTML = '';
      if (achievementsRankingBadgeEl) achievementsRankingBadgeEl.textContent = 'Restrito à coordenação';
    } else {
      if (achievementsAdminNoticeEl) achievementsAdminNoticeEl.classList.add('hidden');
      if (achievementsLeaderboardEl) achievementsLeaderboardEl.classList.remove('hidden');
      if (achievementsPodiumEl) {
        achievementsPodiumEl.innerHTML = '';
        const placeholder = document.createElement('p');
        placeholder.className = 'text-sm text-slate-500 dark:text-slate-300';
        placeholder.textContent = 'Carregando ranking...';
        achievementsPodiumEl.appendChild(placeholder);
      }
      if (achievementsLeaderboardTableEl) achievementsLeaderboardTableEl.innerHTML = '';
      if (achievementsRankingBadgeEl) achievementsRankingBadgeEl.textContent = 'Atualizando...';
    }

    google.script.run
      .withFailureHandler(err => {
        renderSimpleList([]);
        if (isAdmin) {
          if (achievementsLeaderboardEl) achievementsLeaderboardEl.classList.add('hidden');
          if (achievementsAdminNoticeEl) {
            achievementsAdminNoticeEl.textContent = err?.message || 'Não foi possível carregar o ranking agora.';
            achievementsAdminNoticeEl.classList.remove('hidden');
          }
          if (achievementsRankingBadgeEl) achievementsRankingBadgeEl.textContent = 'Falha ao atualizar';
        }
        console.error('Falha ao carregar ranking:', err);
      })
      .withSuccessHandler(list => {
        const entries = Array.isArray(list) ? list : [];
        renderSimpleList(entries);
        if (isAdmin) {
          if (achievementsAdminNoticeEl) achievementsAdminNoticeEl.classList.add('hidden');
          renderAdminLeaderboard(entries);
        }
      })
      .getRanking();
  }

  // AUTH
  if (btnSignup) {
    btnSignup.addEventListener('click', () => {
      clearCardMessage(signupMessageEl);
      Object.values(signupFields).forEach(field => { field.touched = true; });
      const isValid = requiredSignupKeys.every(key => evaluateField(key, { force: true }));
      updateSignupButton();
      if (!isValid) {
        renderCardMessage(signupMessageEl, 'error', 'Revise os campos destacados.');
        return;
      }

      const payload = {
        name: signupFields.name.input.value.trim(),
        email: signupFields.email.input.value.trim(),
        password: signupFields.password.input.value,
        adminCode: signupFields.adminCode.input.value.trim()
      };

      isSignupSubmitting = true;
      updateSignupButton();
      const loader = createActionLoader('Criando conta...');

      google.script.run
        .withFailureHandler(err => {
          isSignupSubmitting = false;
          loader.finish();
          renderCardMessage(signupMessageEl, 'error', err.message || err);
          updateSignupButton();
        })
        .withSuccessHandler(res => {
          isSignupSubmitting = false;
          loader.finish();
          updateSignupButton();

          if (res && res.ok && res.requiresConfirmation && res.confirmation) {
            renderCardMessage(signupMessageEl, 'success', res.message || 'Enviamos um código de confirmação para o seu e-mail.');
            openConfirmationView(res.confirmation, { remember: rememberPreference });
            renderCardMessage(confirmMsgEl, 'success', res.message || 'Insira o código enviado para ativar sua conta.');
            return;
          }

          if (res && res.ok && res.user && res.token) {
            clearCardMessage(signupMessageEl);
            currentUser = res.user;
            persistSession(res.token, res.user, { remember: rememberPreference });
            updateUI();
            return;
          }

          if (res && res.errors) {
            Object.entries(res.errors).forEach(([fieldKey, message]) => {
              const field = signupFields[fieldKey];
              if (field) {
                field.touched = true;
                field.customError = message;
                evaluateField(fieldKey, { force: true });
              }
            });
          }

          let messageText = 'Revise os campos destacados.';
          if (res && res.message) {
            messageText = res.message;
          } else if (!res || !res.errors || Object.keys(res.errors).length === 0) {
            messageText = 'Não foi possível criar a conta. Tente novamente.';
          }
          renderCardMessage(signupMessageEl, 'error', messageText);
        })
        .registerUser(payload);
    });
  }

  function handleLoginSubmit() {
    if (isLoginSubmitting) return;
    clearCardMessage(loginMessageEl);
    const email = loginEmailInput ? loginEmailInput.value.trim() : '';
    const password = loginPasswordInput ? loginPasswordInput.value.trim() : '';
    rememberPreference = !!(rememberMeCheckbox && rememberMeCheckbox.checked);
    if (!email || !password) {
      renderCardMessage(loginMessageEl, 'error', 'Informe e-mail e senha.');
      return;
    }

    isLoginSubmitting = true;
    updateLoginButton();
    const loader = createActionLoader('Entrando...');

    google.script.run
      .withFailureHandler(err => {
        isLoginSubmitting = false;
        loader.finish();
        updateLoginButton();
        renderCardMessage(loginMessageEl, 'error', err.message || err);
      })
      .withSuccessHandler(res => {
        isLoginSubmitting = false;
        loader.finish();
        updateLoginButton();
        if (res && res.ok && res.user && res.token) {
          clearCardMessage(loginMessageEl);
          currentUser = res.user;
          persistSession(res.token, res.user, { remember: rememberPreference });
          updateUI();
          return;
        }
        if (res && res.requiresConfirmation && res.confirmation) {
          renderCardMessage(loginMessageEl, 'success', res.message || 'Confirme o código enviado para ativar seu acesso.');
          openConfirmationView(res.confirmation, { remember: rememberPreference });
          renderCardMessage(confirmMsgEl, 'success', 'Digite o código enviado para concluir o login.');
          return;
        }
        renderCardMessage(loginMessageEl, 'error', (res && res.message) || 'Não foi possível entrar. Tente novamente.');
      })
      .loginUser({ email, password });
  }

  if (loginForm) {
    loginForm.addEventListener('submit', event => {
      event.preventDefault();
      handleLoginSubmit();
    });
  }

  if (confirmForm) {
    confirmForm.addEventListener('submit', event => {
      event.preventDefault();
      if (isConfirmSubmitting) return;
      if (!pendingConfirmation || !pendingConfirmation.email) {
        renderCardMessage(confirmMsgEl, 'error', 'Solicite o cadastro novamente para receber um novo código.');
        return;
      }
      const codeValue = confirmCodeInput ? confirmCodeInput.value.trim() : '';
      if (!codeValue) {
        renderCardMessage(confirmMsgEl, 'error', 'Informe o código enviado por e-mail.');
        return;
      }
      isConfirmSubmitting = true;
      updateConfirmButton();
      const loader = createActionLoader('Confirmando acesso...');
      google.script.run
        .withFailureHandler(err => {
          isConfirmSubmitting = false;
          loader.finish();
          updateConfirmButton();
          renderCardMessage(confirmMsgEl, 'error', err.message || err);
        })
        .withSuccessHandler(res => {
          isConfirmSubmitting = false;
          loader.finish();
          updateConfirmButton();
          if (res && res.ok && res.user && res.token) {
            clearCardMessage(confirmMsgEl);
            const remember = pendingConfirmation && Object.prototype.hasOwnProperty.call(pendingConfirmation, 'remember')
              ? !!pendingConfirmation.remember
              : rememberPreference;
            currentUser = res.user;
            persistSession(res.token, res.user, { remember });
            pendingConfirmation = null;
            resetConfirmationCountdown();
            updateUI();
            return;
          }
          if (res && res.alreadyConfirmed && res.user && res.token) {
            clearCardMessage(confirmMsgEl);
            const remember = pendingConfirmation && Object.prototype.hasOwnProperty.call(pendingConfirmation, 'remember')
              ? !!pendingConfirmation.remember
              : rememberPreference;
            currentUser = res.user;
            persistSession(res.token, res.user, { remember });
            pendingConfirmation = null;
            resetConfirmationCountdown();
            updateUI();
            return;
          }
          if (res && res.expired) {
            renderCardMessage(confirmMsgEl, 'error', res.message || 'O código informado expirou. Solicite um novo envio.');
            return;
          }
          renderCardMessage(confirmMsgEl, 'error', (res && res.message) || 'Não foi possível confirmar o cadastro. Tente novamente.');
        })
        .confirmUserRegistration({ email: pendingConfirmation.email, code: codeValue });
    });
  }

  if (btnResendConfirmation) {
    btnResendConfirmation.addEventListener('click', () => {
      if (!pendingConfirmation || !pendingConfirmation.email) {
        renderCardMessage(confirmMsgEl, 'error', 'Cadastre-se novamente para gerar um novo código.');
        return;
      }
      const originalLabel = btnResendConfirmation.textContent;
      btnResendConfirmation.disabled = true;
      btnResendConfirmation.textContent = 'Reenviando...';
      const loader = createActionLoader('Gerando novo código...');
      google.script.run
        .withFailureHandler(err => {
          btnResendConfirmation.disabled = false;
          btnResendConfirmation.textContent = originalLabel;
          loader.finish();
          renderCardMessage(confirmMsgEl, 'error', err.message || err);
        })
        .withSuccessHandler(res => {
          btnResendConfirmation.disabled = false;
          btnResendConfirmation.textContent = originalLabel;
          loader.finish();
          if (res && res.ok && res.confirmation) {
            openConfirmationView(res.confirmation, { remember: pendingConfirmation && pendingConfirmation.remember });
            renderCardMessage(confirmMsgEl, 'success', 'Enviamos um novo código de confirmação para seu e-mail.');
            return;
          }
          if (res && res.alreadyConfirmed && currentUser) {
            renderCardMessage(confirmMsgEl, 'info', 'Este acesso já foi confirmado. Faça login normalmente.');
            showAuthView('login');
            return;
          }
          renderCardMessage(confirmMsgEl, 'error', (res && res.message) || 'Não foi possível reenviar o código agora.');
        })
        .resendConfirmationCode({ email: pendingConfirmation.email });
    });
  }

  $('#btnLogout').onclick = () => {
    const stored = getStoredSession();
    const token = stored && stored.token;
    if (!token) {
      clearStoredSession();
      currentUser = null;
      sessionExpiryNotified = false;
      updateUI();
      return;
    }
    const loader = createActionLoader('Saindo...');
    const finish = () => {
      clearStoredSession();
      currentUser = null;
      sessionExpiryNotified = false;
      loader.finish();
      updateUI();
    };
    google.script.run
      .withFailureHandler(() => finish())
      .withSuccessHandler(() => finish())
      .logout(token);
  };

  // Check-in
  $('#btnCheckin').onclick = ()=>{
    if (!currentUser) return showToast({ message: 'Faça login primeiro.', type: 'warning' });
    const token = getSessionToken();
    if (!token) {
      expireSession(SESSION_EXPIRED_FALLBACK);
      return;
    }
    const loader = createActionLoader('Registrando presença...');
    google.script.run
      .withFailureHandler(err => {
        loader.finish();
        if (handleSessionExpiredError(err, { onHandled: () => { $('#checkinMsg').textContent = ''; } })) {
          return;
        }
        showToast({ message: err?.message || err, type: 'error' });
      })
      .withSuccessHandler(res=>{
        loader.finish();
        if (res && res.ok) {
          const bonusXP = Number(res.achievementBonusXP || 0);
          const unlockedAchievements = Array.isArray(res.achievementsUnlocked) ? res.achievementsUnlocked : [];
          if (res.achievementsOverview) {
            applyAchievementsUpdate(res.achievementsOverview, unlockedAchievements);
          } else if (unlockedAchievements.length) {
            handleAchievementToasts(unlockedAchievements);
          }
          updateStudentStoryState({ checkinToday: true });
          const extra = formatLevelProgressMessage(res);
          const totalXP = Number.isFinite(Number(res.totalXP)) ? Number(res.totalXP) : res.totalXP;
          const bonusText = bonusXP > 0 ? ` Bônus de conquistas: +${bonusXP} XP.` : '';
          $('#checkinMsg').textContent = `Presença registrada (+${res.xpGanho} XP).${bonusText} Total: ${totalXP} XP.${extra}`;
          if (Number.isFinite(Number(totalXP))) $('#xpBox').textContent = totalXP;
          if (Number.isFinite(Number(res.level))) $('#lvlBox').textContent = res.level;
          updateLevelIndicator(res);
          updateUI({ keepLevelIndicator: true, skipAchievements: true, skipCommunity: true });
        } else {
          $('#checkinMsg').textContent = res?.msg || 'Não foi possível registrar o check-in.';
        }
        setTimeout(()=> $('#checkinMsg').textContent='', 3000);
      })
      .checkin({ token, userId: currentUser.id });
  };

  if (btnUploadExcel && uploadExcelInput) {
    btnUploadExcel.addEventListener('click', () => uploadExcelInput.click());
    uploadExcelInput.addEventListener('change', () => {
      const file = uploadExcelInput.files && uploadExcelInput.files[0];
      handleUserMaterialUpload(file, 'excel');
      uploadExcelInput.value = '';
    });
  }

  if (btnUploadPpt && uploadPptInput) {
    btnUploadPpt.addEventListener('click', () => uploadPptInput.click());
    uploadPptInput.addEventListener('change', () => {
      const file = uploadPptInput.files && uploadPptInput.files[0];
      handleUserMaterialUpload(file, 'ppt');
      uploadPptInput.value = '';
    });
  }

  // Embeds
  if (btnSaveEmbeds) {
    btnSaveEmbeds.addEventListener('click', () => {
      if (!currentUser?.isAdmin) {
        showToast({ message: 'Somente administradores podem atualizar os materiais.', type: 'warning' });
        return;
      }
      const token = getSessionToken();
      if (!token) {
        expireSession(SESSION_EXPIRED_FALLBACK);
        return;
      }
      const excel = excelLinkInput ? excelLinkInput.value.trim() : '';
      const ppt = pptLinkInput ? pptLinkInput.value.trim() : '';
      const recommendedResources = collectTextareaList(resourcesInputEl);
      const upcomingEvents = collectTextareaList(eventsInputEl);
      const loader = createActionLoader('Salvando materiais...');
      google.script.run
        .withFailureHandler(err => {
          loader.finish();
          if (handleSessionExpiredError(err)) {
            return;
          }
          showToast({ message: err?.message || err, type: 'error' });
        })
        .withSuccessHandler(() => {
          loader.finish();
          showToast({ message: 'Materiais atualizados com sucesso.', type: 'success' });
          loadEmbeds();
        })
        .saveEmbeds({ excel, ppt, token, recommendedResources, upcomingEvents });
    });
  }
  if (btnLoadEmbeds) {
    btnLoadEmbeds.addEventListener('click', () => loadEmbeds({ showLoader: true }));
  }
  function loadEmbeds(options = {}) {
    if (!currentUser) return;
    const token = getSessionToken();
    if (!token) {
      expireSession(SESSION_EXPIRED_FALLBACK);
      return;
    }
    const loader = options && options.showLoader ? createActionLoader('Carregando materiais...') : null;
    google.script.run
      .withFailureHandler(err => {
        if (loader) loader.finish();
        if (handleSessionExpiredError(err)) {
          return;
        }
        console.error('Falha ao carregar materiais compartilhados:', err);
        showToast({ message: err?.message || 'Não foi possível carregar os materiais agora.', type: 'error' });
      })
      .withSuccessHandler(data => {
        if (loader) loader.finish();
        hasLoadedEmbeds = true;
        if (excelFrameEl) excelFrameEl.src = normalizeEmbed(data?.excel || '');
        if (pptFrameEl) pptFrameEl.src = normalizeEmbed(data?.ppt || '');
        if (excelLinkInput) excelLinkInput.value = data?.excel || '';
        if (pptLinkInput) pptLinkInput.value = data?.ppt || '';
        if (resourcesEmptyEl && resourcesEmptyDefaultText) resourcesEmptyEl.textContent = resourcesEmptyDefaultText;
        if (eventsEmptyEl && eventsEmptyDefaultText) eventsEmptyEl.textContent = eventsEmptyDefaultText;
        renderHighlightList(resourcesListEl, data?.recommendedResources, resourcesEmptyEl);
        renderHighlightList(eventsListEl, data?.upcomingEvents, eventsEmptyEl);
        if (resourcesInputEl) {
          const list = Array.isArray(data?.recommendedResources) ? data.recommendedResources : [];
          resourcesInputEl.value = list.join('\n');
        }
        if (eventsInputEl) {
          const list = Array.isArray(data?.upcomingEvents) ? data.upcomingEvents : [];
          eventsInputEl.value = list.join('\n');
        }
        if (adminExcelEmptyEl && adminExcelEmptyDefaultText) adminExcelEmptyEl.textContent = adminExcelEmptyDefaultText;
        if (adminPptEmptyEl && adminPptEmptyDefaultText) adminPptEmptyEl.textContent = adminPptEmptyDefaultText;
        renderMaterialList(adminExcelListEl, data?.adminMaterials?.excel, adminExcelEmptyEl, { icon: '📊', emptyText: adminExcelEmptyDefaultText });
        renderMaterialList(adminPptListEl, data?.adminMaterials?.ppt, adminPptEmptyEl, { icon: '📽️', emptyText: adminPptEmptyDefaultText });
        if (userExcelEmptyEl && userExcelEmptyDefaultText) userExcelEmptyEl.textContent = userExcelEmptyDefaultText;
        if (userPptEmptyEl && userPptEmptyDefaultText) userPptEmptyEl.textContent = userPptEmptyDefaultText;
        renderMaterialList(userExcelListEl, data?.userMaterials?.excel, userExcelEmptyEl, { icon: '📊', showMeta: true, emptyText: userExcelEmptyDefaultText });
        renderMaterialList(userPptListEl, data?.userMaterials?.ppt, userPptEmptyEl, { icon: '📽️', showMeta: true, emptyText: userPptEmptyDefaultText });
        if (userFolderLinkEl) {
          if (data?.userFolder && data.userFolder.url) {
            userFolderLinkEl.href = data.userFolder.url;
            userFolderLinkEl.classList.remove('hidden');
          } else {
            userFolderLinkEl.classList.add('hidden');
          }
        }
        if (userFolderHintEl) {
          userFolderHintEl.textContent = data?.userFolderMessage || userFolderHintDefaultText;
        }
        if (currentUser) {
          if (data?.userFolder?.id) currentUser.folderId = data.userFolder.id;
          if (data?.userFolder?.url) currentUser.folderUrl = data.userFolder.url;
        }
      })
      .getEmbeds({ token, userId: currentUser.id });
  }

  if (btnSaveBulletinEl) {
    btnSaveBulletinEl.addEventListener('click', () => {
      if (!currentUser?.isAdmin) {
        showToast({ message: 'Somente administradores podem publicar informativos.', type: 'warning' });
        return;
      }
      const text = adminBulletinInputEl ? adminBulletinInputEl.value.trim() : '';
      adminBulletinState = {
        content: text,
        updatedAt: new Date()
      };
      renderAdminBulletin();
      showToast({ message: 'Informativo atualizado para toda a turma.', type: 'success' });
    });
  }

  if (btnDiscardBulletinEl) {
    btnDiscardBulletinEl.addEventListener('click', () => {
      if (!currentUser?.isAdmin) return;
      if (adminBulletinInputEl) adminBulletinInputEl.value = adminBulletinState?.content || '';
      showToast({ message: 'Rascunho restaurado.', type: 'info' });
    });
  }

  if (btnResetMission) {
    btnResetMission.addEventListener('click', () => {
      if (missionTitleInput) missionTitleInput.value = '';
      if (missionDescriptionInput) missionDescriptionInput.value = '';
      if (missionXPInput) missionXPInput.value = '';
      if (missionValidityInput) missionValidityInput.value = '';
      if (missionAudienceSelect) missionAudienceSelect.value = 'all';
      if (missionAttachmentsInput) missionAttachmentsInput.value = '';
    });
  }

  if (btnLaunchMission) {
    btnLaunchMission.addEventListener('click', () => {
      if (!currentUser?.isAdmin) {
        showToast({ message: 'Somente administradores podem lançar missões.', type: 'warning' });
        return;
      }
      const title = missionTitleInput ? missionTitleInput.value.trim() : '';
      const description = missionDescriptionInput ? missionDescriptionInput.value.trim() : '';
      const xpValue = missionXPInput ? Number(missionXPInput.value) : NaN;
      const validity = missionValidityInput ? missionValidityInput.value : '';
      const audience = missionAudienceSelect ? missionAudienceSelect.value : 'all';
      const attachments = collectTextareaList(missionAttachmentsInput);
      if (!title) {
        showToast({ message: 'Informe um título para a missão.', type: 'error' });
        return;
      }
      if (!Number.isFinite(xpValue) || xpValue < 5 || xpValue > 60) {
        showToast({ message: 'Defina um XP entre 5 e 60 pontos.', type: 'error' });
        return;
      }
      const mission = {
        id: `mission-${Date.now()}`,
        title,
        description,
        xp: Math.round(xpValue),
        audience,
        validity,
        attachments
      };
      adminMissionsState.unshift(mission);
      renderAdminMissionList();
      if (btnResetMission) btnResetMission.click();
      showToast({ message: 'Missão lançada para a turma!', type: 'success' });
    });
  }

  // Boot
  (function init(){
    bootstrapRouter();
    syncAdminVisibility();
    updateCommunityAccess();
    syncNavAvailability();
    renderAdminBulletin();
    renderAdminMissionList();
    renderForumPage();
    const stored = getStoredSession();
    if (stored && stored.token) {
      currentSessionToken = stored.token;
    }
    const authSection = $('#authSection');
    if (authSection) authSection.classList.add('hidden');

    if (stored && stored.token) {
      google.script.run
        .withFailureHandler(() => {
          clearStoredSession();
          updateUI();
        })
        .withSuccessHandler(user => {
          if (user && user.id) {
            currentUser = user;
            persistSession(stored.token, user);
          } else {
            clearStoredSession();
          }
          updateUI();
        })
        .resumeSession(stored.token);
    } else {
      updateUI();
    }
  })();
</script>
</body>
</html>
