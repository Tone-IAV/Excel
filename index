<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width,initial-scale=1"/>
  <title>Plataforma Gamificada — Curso de Excel</title>

  <!-- Tailwind via CDN -->
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      theme: { extend: {
        colors: { primary:'#007BFF', accent:'#00C9A7' },
        boxShadow: { soft:'0 10px 30px rgba(0,0,0,.08)' },
        borderRadius: { '2xl':'1.25rem' }
      }},
      darkMode: 'class'
    }
  </script>
  <style>
    .card { border-radius:1rem; box-shadow:0 10px 30px rgba(0,0,0,.08); background:#fff; padding:1rem; }
    .dark .card { background:#0f172a; }
    .btn { display:inline-flex; align-items:center; gap:.5rem; padding:.5rem .9rem; border-radius:.7rem; border:1px solid transparent; font-weight:600; }
    .btn-primary { background:#007BFF; color:#fff; }
    .btn-ghost { background:transparent; color:#334155; }
    .dark .btn-ghost { color:#e2e8f0; }
    .input { width:100%; padding:.55rem .75rem; border-radius:.7rem; border:1px solid #e5e7eb; }
    .dark .input { background:#0f172a; color:#e5e7eb; border-color:#475569; }
    .pill { font-size:.75rem; padding:.2rem .6rem; border-radius:9999px; background:#f1f5f9; color:#475569; }
    .dark .pill { background:#334155; color:#e2e8f0; }
    .hidden-admin { opacity:.6; font-size:.8rem; }
    .feedback { font-size:.85rem; padding:.5rem .75rem; border-radius:.75rem; border:1px solid transparent; }
    .feedback-error { background:#fee2e2; color:#b91c1c; border-color:#fecaca; }
    .feedback-success { background:#dcfce7; color:#166534; border-color:#bbf7d0; }
    .dark .feedback-error { background:rgba(239,68,68,.15); color:#fecaca; border-color:rgba(248,113,113,.4); }
    .dark .feedback-success { background:rgba(34,197,94,.18); color:#bbf7d0; border-color:rgba(134,239,172,.4); }
    .error-text { font-size:.75rem; color:#dc2626; min-height:1rem; }
    .dark .error-text { color:#fca5a5; }
    .hint { font-size:.7rem; color:#64748b; }
    .dark .hint { color:#94a3b8; }
    .btn[disabled] { opacity:.6; cursor:not-allowed; }
    .aspect-video { position:relative; padding-top:56.25%; }
    .aspect-video > iframe { position:absolute; inset:0; width:100%; height:100%; border:0; }
    .history-tab { padding:.35rem .75rem; border-radius:9999px; border:1px solid rgba(148,163,184,.4); background:#f8fafc; color:#475569; font-size:.75rem; font-weight:600; transition:background-color .2s ease,color .2s ease,border-color .2s ease; }
    .history-tab:hover { background:#e2e8f0; }
    .history-tab-active { background:#007BFF; color:#fff; border-color:#007BFF; }
    .dark .history-tab { background:rgba(15,23,42,.9); color:#e2e8f0; border-color:rgba(148,163,184,.35); }
    .dark .history-tab:hover { background:rgba(148,163,184,.2); }
    .dark .history-tab-active { background:#2563eb; border-color:#2563eb; color:#fff; }
    .input-sm { font-size:.85rem; padding:.35rem .6rem; }
    .history-empty { font-size:.85rem; color:#64748b; background:#f8fafc; padding:1rem; border-radius:1rem; border:1px dashed rgba(148,163,184,.4); text-align:center; }
    .dark .history-empty { color:#cbd5f5; background:rgba(15,23,42,.6); border-color:rgba(148,163,184,.25); }
    .level-highlight { transition:transform .3s ease, box-shadow .3s ease; }
    .level-highlight:hover { transform:translateY(-2px); box-shadow:0 18px 32px rgba(249,115,22,.15); }
    .level-label { color:#92400e; letter-spacing:.08em; }
    .dark .level-label { color:#fde68a; }
    .milestone-badge { display:inline-flex; align-items:center; gap:.35rem; padding:.2rem .6rem; border-radius:9999px; font-size:.65rem; font-weight:700; background:rgba(251,191,36,.3); color:#78350f; text-transform:uppercase; letter-spacing:.08em; box-shadow:0 2px 8px rgba(249,115,22,.25); }
    .dark .milestone-badge { background:rgba(251,191,36,.2); color:#fde68a; box-shadow:0 2px 8px rgba(251,191,36,.25); }
    .milestone-celebrate { background:linear-gradient(135deg,#fcd34d 0%,#f97316 100%); color:#fff; box-shadow:0 22px 45px rgba(249,115,22,.35); }
    .milestone-celebrate #lvlBox { color:#fff; }
    .milestone-celebrate .level-label { color:#fff; }
    .milestone-celebrate .milestone-badge { background:rgba(255,255,255,.35); color:#7c2d12; box-shadow:0 6px 18px rgba(249,115,22,.35); }
    .dark .milestone-celebrate { background:linear-gradient(135deg,#92400e 0%,#f59e0b 100%); box-shadow:0 22px 45px rgba(234,179,8,.35); }
    .dark .milestone-celebrate .milestone-badge { background:rgba(255,255,255,.85); color:#7c2d12; }
    .milestone-chip { display:inline-flex; align-items:center; gap:.35rem; padding:.35rem .75rem; border-radius:9999px; font-weight:600; font-size:.75rem; background:rgba(226,232,240,.85); color:#1f2937; box-shadow:0 3px 12px rgba(15,23,42,.1); }
    .milestone-chip span { display:inline-flex; align-items:center; }
    .milestone-chip-achieved { background:rgba(134,239,172,.45); color:#047857; box-shadow:0 6px 16px rgba(16,185,129,.3); }
    .milestone-chip-next { background:rgba(253,224,71,.55); color:#92400e; box-shadow:0 6px 16px rgba(251,191,36,.35); }
    .dark .milestone-chip { background:rgba(30,41,59,.65); color:#e2e8f0; box-shadow:0 3px 12px rgba(15,23,42,.25); }
    .dark .milestone-chip-achieved { background:rgba(34,197,94,.3); color:#bbf7d0; }
    .dark .milestone-chip-next { background:rgba(250,204,21,.25); color:#fde68a; }
    #nextLevelBar { transition:width .45s ease; }
    .achievements-scroll { display:flex; gap:1rem; overflow-x:auto; padding-bottom:.5rem; scroll-snap-type:x mandatory; }
    .achievements-scroll::-webkit-scrollbar { height:6px; }
    .achievement-card { min-width:200px; scroll-snap-align:start; border-radius:1rem; padding:1rem; border:1px solid rgba(148,163,184,.25); background:rgba(248,250,252,.95); box-shadow:0 6px 16px rgba(15,23,42,.08); transition:transform .25s ease, box-shadow .25s ease; }
    .achievement-card:hover { transform:translateY(-2px); box-shadow:0 14px 32px rgba(15,23,42,.15); }
    .achievement-card-unlocked { background:linear-gradient(135deg,rgba(34,197,94,.18),rgba(16,185,129,.25)); border-color:rgba(34,197,94,.3); color:#064e3b; }
    .achievement-card-unlocked .achievement-xp { background:rgba(255,255,255,.4); color:#047857; }
    .achievement-card-locked { background:linear-gradient(135deg,rgba(148,163,184,.18),rgba(226,232,240,.45)); color:#1f2937; }
    .achievement-card-ready { border-color:rgba(251,191,36,.65); box-shadow:0 18px 38px rgba(251,191,36,.25); }
    .achievement-card-ready .achievement-progress-bar { background:linear-gradient(135deg,#fbbf24,#f97316); }
    .dark .achievement-card { background:rgba(15,23,42,.85); border-color:rgba(51,65,85,.6); box-shadow:0 8px 24px rgba(15,23,42,.4); color:#e2e8f0; }
    .dark .achievement-card-unlocked { background:linear-gradient(135deg,rgba(16,185,129,.35),rgba(5,150,105,.45)); border-color:rgba(16,185,129,.5); color:#d1fae5; }
    .dark .achievement-card-unlocked .achievement-xp { background:rgba(15,23,42,.35); color:#6ee7b7; }
    .dark .achievement-card-locked { background:linear-gradient(135deg,rgba(30,41,59,.7),rgba(51,65,85,.7)); color:#e2e8f0; }
    .achievement-icon { font-size:1.75rem; line-height:1; }
    .achievement-xp { font-size:.7rem; font-weight:700; padding:.25rem .6rem; border-radius:9999px; background:rgba(255,255,255,.65); color:#1e293b; text-transform:uppercase; letter-spacing:.08em; }
    .achievements-grid { display:grid; gap:1rem; grid-template-columns:repeat(auto-fit,minmax(220px,1fr)); }
    .achievement-progress-track { height:6px; border-radius:9999px; background:rgba(148,163,184,.35); overflow:hidden; }
    .achievement-progress-bar { height:100%; border-radius:9999px; background:linear-gradient(135deg,#38bdf8,#2563eb); transition:width .35s ease; }
    .dark .achievement-progress-track { background:rgba(71,85,105,.55); }
    .dark .achievement-progress-bar { background:linear-gradient(135deg,#38bdf8,#1d4ed8); }
  </style>
</head>
<body class="bg-slate-50 dark:bg-slate-900 text-slate-900 dark:text-slate-100 min-h-screen">

  <div id="toastContainer" class="fixed top-4 right-4 z-50 flex w-full max-w-sm flex-col gap-3"></div>

<header class="sticky top-0 z-20 bg-white/70 dark:bg-slate-900/70 backdrop-blur border-b border-slate-200 dark:border-slate-700">
  <div class="max-w-5xl mx-auto px-4 py-3 flex items-center gap-3">
    <h1 class="text-lg font-bold">Plataforma — Curso de Excel</h1>
    <div class="ml-auto flex items-center gap-2">
      <span id="userInfo" class="pill">Visitante</span>
      <button id="btnLogout" class="btn btn-ghost hidden">Sair</button>
    </div>
  </div>
</header>

<main class="max-w-5xl mx-auto px-4 py-6 space-y-6">
  <!-- AUTH -->
  <section id="authSection" class="grid md:grid-cols-2 gap-4">
    <div class="card" id="signupCard">
      <h2 class="text-xl font-semibold mb-2">Criar conta</h2>
      <div id="signupMsg" class="feedback hidden"></div>
      <div class="grid gap-3">
        <div class="space-y-1">
          <input id="rName" class="input" placeholder="Nome completo" />
          <p id="rNameError" class="error-text"></p>
        </div>
        <div class="space-y-1">
          <input id="rEmail" class="input" placeholder="E-mail" title="Utilize um endereço válido (ex.: nome@empresa.com)." />
          <p class="hint">Utilize um endereço válido (ex.: nome@empresa.com).</p>
          <p id="rEmailError" class="error-text"></p>
        </div>
        <div class="space-y-1">
          <input id="rPass" type="password" class="input" placeholder="Senha" title="Mínimo de 8 caracteres com letras maiúsculas, minúsculas, números e símbolos." />
          <p class="hint">Mínimo de 8 caracteres com letras maiúsculas, minúsculas, números e símbolos.</p>
          <p id="rPassError" class="error-text"></p>
        </div>
        <div class="hidden-admin space-y-1">
          <label class="text-xs block">Código de segurança (somente para Administrador)</label>
          <input id="rAdminCode" class="input" placeholder="(opcional)" />
          <p id="rAdminCodeError" class="error-text"></p>
        </div>
        <button id="btnSignup" class="btn btn-primary" disabled>Criar conta</button>
        <p class="text-xs text-slate-500">Obs.: Administrador só é criado com código válido.</p>
      </div>
    </div>

    <div class="card">
      <h2 class="text-xl font-semibold mb-2">Entrar</h2>
      <div id="loginMsg" class="feedback hidden"></div>
      <div class="grid gap-2">
        <input id="lEmail" class="input" placeholder="E-mail" />
        <input id="lPass" type="password" class="input" placeholder="Senha" />
        <button id="btnLogin" class="btn btn-ghost">Entrar</button>
      </div>
    </div>
  </section>

  <!-- DASHBOARD -->
  <section id="dashSection" class="hidden">
    <div class="grid md:grid-cols-3 gap-4">
      <div class="card md:col-span-2">
        <h3 class="text-lg font-semibold mb-2">Sua evolução</h3>
        <div class="grid sm:grid-cols-3 gap-3">
          <div class="rounded-2xl p-4 bg-primary/10">
            <div class="text-xs uppercase tracking-wide text-primary/70">XP total</div>
            <div id="xpBox" class="text-3xl font-bold text-primary">0</div>
          </div>
          <div class="rounded-2xl p-4 bg-emerald-100">
            <div class="text-xs uppercase tracking-wide text-emerald-700/80">Módulos concluídos</div>
            <div id="doneBox" class="text-3xl font-bold text-emerald-900">0</div>
          </div>
          <div id="levelCard" class="rounded-2xl p-4 bg-amber-100 level-highlight relative overflow-hidden">
            <div class="flex items-start justify-between gap-2">
              <div id="levelLabel" class="level-label text-xs uppercase tracking-wide font-semibold">Nível</div>
              <span id="levelBadge" class="milestone-badge hidden">🏆 Marco!</span>
            </div>
            <div id="lvlBox" class="text-3xl font-bold text-amber-900 mt-1">1</div>
          </div>
        </div>
        <div class="mt-4 space-y-4">
          <div id="nextLevelCard" class="rounded-2xl border border-amber-200/70 bg-amber-50/80 px-4 py-4 dark:border-amber-500/40 dark:bg-amber-500/10 space-y-3">
            <div class="flex flex-wrap items-center justify-between gap-3 text-sm">
              <div class="flex items-center gap-2 font-semibold text-amber-700 dark:text-amber-200">
                <span class="inline-flex h-9 w-9 items-center justify-center rounded-full bg-amber-200/80 text-lg shadow-sm dark:bg-amber-500/30">⚡</span>
                <span id="nextLevelText">Faltam 0 XP para o nível 2</span>
              </div>
              <span id="nextLevelPct" class="text-xs font-semibold text-amber-700/80 dark:text-amber-200/80">0% do nível atual</span>
            </div>
            <div class="h-2.5 rounded-full bg-amber-200/70 dark:bg-amber-500/30 overflow-hidden">
              <div id="nextLevelBar" class="h-full rounded-full bg-amber-500 dark:bg-amber-400" style="width:0%"></div>
            </div>
            <div id="milestoneWrap" class="flex flex-wrap gap-2 text-xs"></div>
          </div>
          <div>
            <div class="flex items-center justify-between text-sm mb-1">
              <span>Progresso nos 24 módulos</span><span id="pctBox">0%</span>
            </div>
            <div class="h-3 rounded-full bg-slate-200 dark:bg-slate-700 overflow-hidden">
              <div id="barBox" class="h-3 bg-primary dark:bg-blue-500" style="width:0%"></div>
            </div>
          </div>
        </div>
      </div>

      <div class="card">
        <h3 class="text-lg font-semibold mb-2">Check-in diário</h3>
        <p class="text-sm text-slate-500 mb-2">Ganhe +XP 1x ao dia.</p>
        <button id="btnCheckin" class="btn btn-primary">Confirmar presença</button>
        <div id="checkinStreakInfo" class="mt-3 text-xs text-slate-500 dark:text-slate-300 leading-relaxed"></div>
        <div id="checkinMsg" class="text-xs text-emerald-600 mt-2"></div>
      </div>
    </div>

    <div id="achievementsCard" class="card">
      <div class="flex flex-wrap items-center justify-between gap-2 mb-3">
        <h3 class="text-lg font-semibold">Conquistas</h3>
        <span id="achievementsSummary" class="text-xs text-slate-500 dark:text-slate-400"></span>
      </div>
      <div id="achievementsLoading" class="text-sm text-slate-500 dark:text-slate-300">Carregando conquistas...</div>
      <div id="achievementsError" class="text-sm text-rose-600 dark:text-rose-300 hidden"></div>
      <div id="achievementsContent" class="space-y-5 hidden">
        <div>
          <div class="flex items-center justify-between text-sm mb-2">
            <span class="font-semibold">Desbloqueadas</span>
            <span class="text-xs text-slate-500 dark:text-slate-400">Celebre suas conquistas recentes</span>
          </div>
          <div id="achievementsUnlocked" class="achievements-scroll"></div>
          <p id="achievementsUnlockedEmpty" class="text-xs text-slate-500 dark:text-slate-300">Faça login para desbloquear suas primeiras conquistas.</p>
        </div>
        <div>
          <div class="flex items-center justify-between text-sm mb-2">
            <span class="font-semibold">Próximas metas</span>
            <span class="text-xs text-slate-500 dark:text-slate-400">Acompanhe o progresso e continue evoluindo</span>
          </div>
          <div id="achievementsUpcoming" class="achievements-grid"></div>
          <p id="achievementsUpcomingEmpty" class="text-xs text-slate-500 dark:text-slate-300">Participe de check-ins e atividades para liberar novas medalhas.</p>
        </div>
      </div>
    </div>

    <div class="card" id="historyCard">
      <div class="flex flex-wrap items-center gap-3 mb-3">
        <h3 class="text-lg font-semibold">Histórico de XP</h3>
        <div id="historyStreakWrap" class="flex flex-wrap items-center gap-2 text-xs hidden">
          <span id="historyStreakCurrent" class="pill"></span>
          <span id="historyStreakBest" class="pill"></span>
        </div>
      </div>
      <div class="flex flex-wrap items-center gap-3 mb-4">
        <div class="inline-flex gap-2 bg-slate-100 dark:bg-slate-800/60 p-1 rounded-full">
          <button type="button" class="history-tab history-tab-active" data-history-tab="checkins">Check-ins</button>
          <button type="button" class="history-tab" data-history-tab="activities">Atividades</button>
        </div>
        <div class="ml-auto flex flex-wrap items-center gap-2 text-xs">
          <label for="historyPeriodFilter" class="uppercase tracking-wide text-slate-500 dark:text-slate-400">Período</label>
          <select id="historyPeriodFilter" class="input input-sm">
            <option value="7">7 dias</option>
            <option value="30" selected>30 dias</option>
            <option value="90">90 dias</option>
            <option value="365">1 ano</option>
            <option value="all">Todo o período</option>
          </select>
        </div>
        <div id="historyModuleFilterWrap" class="flex flex-wrap items-center gap-2 text-xs hidden">
          <label for="historyModuleFilter" class="uppercase tracking-wide text-slate-500 dark:text-slate-400">Módulo</label>
          <select id="historyModuleFilter" class="input input-sm">
            <option value="all" selected>Todos os módulos</option>
          </select>
        </div>
      </div>
      <div id="historyList" class="grid gap-2 text-sm"></div>
    </div>

    <div class="card">
      <h3 class="text-lg font-semibold mb-2">Enviar atividade (exemplo)</h3>
      <div class="grid md:grid-cols-4 gap-2 items-end">
        <div>
          <label class="text-xs">Módulo</label>
          <input id="aModule" class="input" type="number" min="1" max="24" value="1"/>
        </div>
        <div>
          <label class="text-xs">% de acerto</label>
          <input id="aScore" class="input" type="number" min="0" max="100" value="80"/>
        </div>
        <div>
          <label class="text-xs">XP máximo do módulo</label>
          <input id="aMaxXP" class="input" type="number" min="0" value="40"/>
        </div>
        <button id="btnSubmitActivity" class="btn btn-ghost">Enviar resultado</button>
      </div>
      <div id="activityMsg" class="text-xs mt-2"></div>
    </div>

    <div class="grid md:grid-cols-2 gap-4">
      <div class="card">
        <h3 class="text-lg font-semibold mb-2">Ranking</h3>
        <div id="rankWrap" class="space-y-2 text-sm"></div>
      </div>
      <div class="card">
        <div class="flex flex-wrap items-start justify-between gap-3 mb-3">
          <h3 class="text-lg font-semibold">Central de materiais</h3>
          <span class="pill" id="embedAdminTag" data-admin-only aria-hidden="true">Modo administrador</span>
        </div>
        <div id="embedAdminControls" class="grid gap-3 mb-4 hidden" data-admin-only aria-hidden="true">
          <div class="grid gap-2">
            <input id="excelLink" class="input" placeholder="Cole link compartilhado do Excel (OneDrive/SharePoint/Drive)"/>
            <input id="pptLink" class="input" placeholder="Cole link compartilhado do PowerPoint"/>
          </div>
          <div class="grid md:grid-cols-2 gap-3">
            <div class="space-y-2">
              <label class="text-xs font-semibold uppercase tracking-wide text-slate-500 dark:text-slate-400" for="resourcesInput">Recursos recomendados</label>
              <textarea id="resourcesInput" class="input min-h-[120px] resize-y" placeholder="Liste cada recurso em uma linha"></textarea>
            </div>
            <div class="space-y-2">
              <label class="text-xs font-semibold uppercase tracking-wide text-slate-500 dark:text-slate-400" for="eventsInput">Próximos eventos</label>
              <textarea id="eventsInput" class="input min-h-[120px] resize-y" placeholder="Adicione eventos futuros, um por linha"></textarea>
            </div>
          </div>
          <div class="flex flex-wrap gap-2 justify-end">
            <button id="btnSaveEmbeds" class="btn btn-primary">Salvar</button>
            <button id="btnLoadEmbeds" class="btn btn-ghost">Atualizar</button>
          </div>
        </div>
        <div class="grid md:grid-cols-2 gap-3">
          <div>
            <div class="text-xs mb-1">Excel</div>
            <div class="aspect-video bg-slate-200 rounded">
              <iframe id="excelFrame"></iframe>
            </div>
          </div>
          <div>
            <div class="text-xs mb-1">PowerPoint</div>
            <div class="aspect-video bg-slate-200 rounded">
              <iframe id="pptFrame"></iframe>
            </div>
          </div>
        </div>
        <div class="mt-4 grid md:grid-cols-2 gap-4">
          <div>
            <div class="flex items-center justify-between mb-2">
              <h4 class="text-sm font-semibold">Recursos recomendados</h4>
            </div>
            <p id="resourcesEmpty" class="text-xs text-slate-500 hidden">Nenhum recurso cadastrado ainda.</p>
            <ul id="resourcesList" class="space-y-2 text-sm list-none p-0 m-0"></ul>
          </div>
          <div>
            <div class="flex items-center justify-between mb-2">
              <h4 class="text-sm font-semibold">Próximos eventos</h4>
            </div>
            <p id="eventsEmpty" class="text-xs text-slate-500 hidden">Nenhum evento informado no momento.</p>
            <ul id="eventsList" class="space-y-2 text-sm list-none p-0 m-0"></ul>
          </div>
        </div>
      </div>
    </div>

    <div class="card" id="communityWallCard">
      <div class="flex flex-wrap items-start justify-between gap-3 mb-3">
        <div>
          <h3 class="text-lg font-semibold">Mural da comunidade</h3>
          <p class="text-xs text-slate-500 dark:text-slate-400">Compartilhe dicas rápidas e conquistas com a turma.</p>
        </div>
        <span id="communityLimitBadge" class="pill">Até 240 caracteres</span>
      </div>
      <div id="communityFormWrap" class="space-y-2 mb-4 hidden">
        <textarea id="communityMessage" class="input min-h-[96px] resize-y" maxlength="240" placeholder="Escreva uma dica ou atualização rápida..."></textarea>
        <div class="flex items-center justify-between gap-3 text-xs text-slate-500">
          <span id="communityFormFeedback" class="text-rose-500 hidden" aria-live="polite"></span>
          <span id="communityCounter">0/240</span>
        </div>
        <div class="flex justify-end">
          <button id="btnCommunityPublish" class="btn btn-primary">Publicar no mural</button>
        </div>
      </div>
      <p id="communityGuestNotice" class="text-sm text-slate-500 mb-4 hidden">Entre com sua conta para participar do mural.</p>
      <div id="communityWallList" class="grid gap-3 text-sm"></div>
      <p id="communityWallEmpty" class="history-empty hidden">Ainda não há recados por aqui. Seja o primeiro a compartilhar!</p>
    </div>

    <!-- Admin -->
    <div id="adminPanel" class="card hidden">
      <h3 class="text-lg font-semibold mb-2">Painel do Administrador</h3>
      <p class="text-sm text-slate-500 mb-2">Ranking consolidado (apenas alunos). Use para premiações.</p>
      <div id="adminRank" class="space-y-2 text-sm"></div>
    </div>
  </section>
</main>

<script>
  // Estado simples no front
  let currentUser = null;
  let currentSessionToken = null;
  const STORAGE_KEY = 'excelPlatformSession';

  function persistSession(token, user) {
    if (!token || !user || !user.id) return;
    currentSessionToken = token;
    const payload = {
      token,
      userId: user.id,
      name: user.name,
      isAdmin: !!user.isAdmin,
    };
    try {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(payload));
    } catch (err) {
      console.warn('Não foi possível salvar sessão local:', err);
    }
  }

  function clearStoredSession() {
    currentSessionToken = null;
    try {
      localStorage.removeItem(STORAGE_KEY);
    } catch (err) {
      console.warn('Não foi possível limpar sessão local:', err);
    }
  }

  function getSessionToken() {
    if (currentSessionToken) return currentSessionToken;
    const stored = getStoredSession();
    if (stored && stored.token) {
      currentSessionToken = stored.token;
      return currentSessionToken;
    }
    return null;
  }

  function getStoredSession() {
    try {
      const raw = localStorage.getItem(STORAGE_KEY);
      if (!raw) return null;
      const parsed = JSON.parse(raw);
      if (!parsed || typeof parsed !== 'object') return null;
      if (!parsed.token) return null;
      return parsed;
    } catch (err) {
      console.warn('Não foi possível ler sessão local:', err);
      return null;
    }
  }

  // Helpers
  const $ = s => document.querySelector(s);
  const normalizeEmbed = url => {
    if (!url) return '';
    if (url.includes('onedrive') || url.includes('sharepoint')) {
      if (url.includes('embed')) return url;
      return 'https://view.officeapps.live.com/op/embed.aspx?src=' + encodeURIComponent(url);
    }
    if (url.includes('drive.google.com')) {
      return url.replace('/view?usp=sharing','/preview');
    }
    return url;
  };

  const adminOnlyElements = Array.from(document.querySelectorAll('[data-admin-only]'));
  const excelLinkInput = $('#excelLink');
  const pptLinkInput = $('#pptLink');
  const excelFrameEl = $('#excelFrame');
  const pptFrameEl = $('#pptFrame');
  const btnSaveEmbeds = $('#btnSaveEmbeds');
  const btnLoadEmbeds = $('#btnLoadEmbeds');
  const resourcesInputEl = $('#resourcesInput');
  const eventsInputEl = $('#eventsInput');
  const resourcesListEl = $('#resourcesList');
  const resourcesEmptyEl = $('#resourcesEmpty');
  const eventsListEl = $('#eventsList');
  const eventsEmptyEl = $('#eventsEmpty');
  const communityFormWrap = $('#communityFormWrap');
  const communityGuestNotice = $('#communityGuestNotice');
  const communityTextarea = $('#communityMessage');
  const communityCounterEl = $('#communityCounter');
  const communityFeedbackEl = $('#communityFormFeedback');
  const communityPublishBtn = $('#btnCommunityPublish');
  const communityListEl = $('#communityWallList');
  const communityEmptyEl = $('#communityWallEmpty');
  const communityLimitBadge = $('#communityLimitBadge');
  let communityCharLimit = 240;
  let isPublishingCommunity = false;
  const communityDateFormatter = typeof Intl !== 'undefined'
    ? new Intl.DateTimeFormat('pt-BR', { dateStyle: 'short', timeStyle: 'short' })
    : null;

  const toastContainer = $('#toastContainer');
  const toastVariants = {
    success: {
      toast: 'bg-emerald-600 text-white focus-visible:ring-emerald-200',
      close: 'bg-white/20 text-white hover:bg-white/30 focus-visible:ring-white'
    },
    error: {
      toast: 'bg-rose-600 text-white focus-visible:ring-rose-200',
      close: 'bg-white/20 text-white hover:bg-white/30 focus-visible:ring-white'
    },
    warning: {
      toast: 'bg-amber-500 text-slate-900 focus-visible:ring-amber-200',
      close: 'bg-black/10 text-slate-900 hover:bg-black/20 focus-visible:ring-amber-700'
    }
  };

  function syncAdminVisibility() {
    const isAdmin = !!(currentUser && currentUser.isAdmin);
    adminOnlyElements.forEach(el => {
      if (!el) return;
      el.classList.toggle('hidden', !isAdmin);
      if (isAdmin) {
        el.removeAttribute('aria-hidden');
      } else {
        el.setAttribute('aria-hidden', 'true');
      }
    });
  }

  function renderHighlightList(listEl, items, emptyEl) {
    if (!listEl) return;
    listEl.innerHTML = '';
    const data = Array.isArray(items) ? items.map(item => (item || '').toString().trim()).filter(Boolean) : [];
    if (!data.length) {
      if (emptyEl) emptyEl.classList.remove('hidden');
      return;
    }
    if (emptyEl) emptyEl.classList.add('hidden');
    data.forEach(text => {
      const li = document.createElement('li');
      li.className = 'rounded-xl bg-slate-100 dark:bg-slate-800/70 px-3 py-2 shadow-sm';
      li.textContent = text;
      listEl.appendChild(li);
    });
  }

  function collectTextareaList(textarea) {
    if (!textarea) return [];
    const lines = textarea.value.split('\n');
    const result = [];
    lines.forEach(line => {
      const text = line.trim();
      if (!text) return;
      if (!result.includes(text)) result.push(text);
    });
    return result;
  }

  function setCommunityLimit(limit) {
    const numeric = Number(limit);
    if (!Number.isFinite(numeric) || numeric <= 0) return;
    communityCharLimit = numeric;
    if (communityLimitBadge) communityLimitBadge.textContent = `Até ${numeric} caracteres`;
    if (communityTextarea) communityTextarea.maxLength = numeric;
    updateCommunityCounter();
  }

  function updateCommunityCounter() {
    if (!communityCounterEl) return;
    const value = communityTextarea ? communityTextarea.value : '';
    const length = value ? value.length : 0;
    communityCounterEl.textContent = `${length}/${communityCharLimit}`;
    communityCounterEl.classList.toggle('text-rose-500', length > communityCharLimit);
  }

  function showCommunityError(message) {
    if (!communityFeedbackEl) return;
    const text = (message || '').toString().trim();
    communityFeedbackEl.textContent = text;
    communityFeedbackEl.classList.toggle('hidden', !text);
  }

  function updateCommunityPublishState() {
    if (!communityPublishBtn) return;
    const message = communityTextarea ? communityTextarea.value.trim() : '';
    const disabled = !currentUser || !message || message.length > communityCharLimit || isPublishingCommunity;
    communityPublishBtn.disabled = disabled;
  }

  function updateCommunityAccess() {
    const loggedIn = !!currentUser;
    if (communityFormWrap) communityFormWrap.classList.toggle('hidden', !loggedIn);
    if (communityGuestNotice) communityGuestNotice.classList.toggle('hidden', loggedIn);
    if (!loggedIn && communityTextarea) {
      communityTextarea.value = '';
      showCommunityError('');
      updateCommunityCounter();
    }
    updateCommunityPublishState();
  }

  function formatCommunityDate(value) {
    if (!value) return '';
    const date = new Date(value);
    if (Number.isNaN(date.getTime())) return '';
    if (communityDateFormatter) {
      try {
        return communityDateFormatter.format(date);
      } catch (err) {
        // fallback para toLocaleString
      }
    }
    try {
      return date.toLocaleString('pt-BR');
    } catch (err) {
      return date.toISOString();
    }
  }

  function renderCommunityWall(entries) {
    if (!communityListEl) return;
    communityListEl.innerHTML = '';
    const list = Array.isArray(entries) ? entries : [];
    if (!list.length) {
      if (communityEmptyEl) communityEmptyEl.classList.remove('hidden');
      return;
    }
    if (communityEmptyEl) communityEmptyEl.classList.add('hidden');

    list.forEach(entry => {
      const card = document.createElement('article');
      card.className = 'rounded-2xl border border-slate-200 dark:border-slate-700 bg-white/80 dark:bg-slate-800/70 p-4 shadow-sm flex flex-col gap-2';
      card.dataset.id = entry && entry.id ? entry.id : '';

      const header = document.createElement('div');
      header.className = 'flex items-start justify-between gap-3';

      const meta = document.createElement('div');
      meta.className = 'flex flex-col';

      const nameEl = document.createElement('span');
      nameEl.className = 'font-semibold text-slate-700 dark:text-slate-100';
      nameEl.textContent = (entry && entry.authorName) ? entry.authorName : 'Participante';
      meta.appendChild(nameEl);

      const timeEl = document.createElement('span');
      timeEl.className = 'text-xs text-slate-500 dark:text-slate-400';
      timeEl.textContent = formatCommunityDate(entry && entry.createdAt) || 'Agora mesmo';
      meta.appendChild(timeEl);

      header.appendChild(meta);

      if (currentUser?.isAdmin) {
        const removeBtn = document.createElement('button');
        removeBtn.type = 'button';
        removeBtn.dataset.action = 'remove-wall-entry';
        removeBtn.dataset.id = entry && entry.id ? entry.id : '';
        removeBtn.className = 'text-xs font-semibold text-rose-600 hover:text-rose-500 focus:outline-none focus-visible:ring-2 focus-visible:ring-rose-400 rounded px-2 py-1 transition';
        removeBtn.textContent = 'Remover';
        header.appendChild(removeBtn);
      }

      const messageEl = document.createElement('p');
      messageEl.className = 'text-sm text-slate-700 dark:text-slate-200 whitespace-pre-line leading-relaxed';
      messageEl.textContent = (entry && entry.message) ? entry.message : '';

      card.appendChild(header);
      card.appendChild(messageEl);
      communityListEl.appendChild(card);
    });
  }

  function refreshCommunityWall() {
    if (!communityListEl) return;
    google.script.run
      .withFailureHandler(err => {
        console.error('Falha ao carregar mural:', err);
      })
      .withSuccessHandler(res => {
        if (res && typeof res.limit === 'number') {
          setCommunityLimit(res.limit);
        }
        const entries = res && Array.isArray(res.entries) ? res.entries : [];
        renderCommunityWall(entries);
      })
      .listCommunityWallEntries();
  }

  const achievementsState = {
    loading: false,
    error: '',
    achievements: [],
    summary: { total: 0, unlocked: 0 },
    metrics: {}
  };

  function showToast({ message, type = 'success', duration = 4000 } = {}) {
    const text = (message ?? '').toString().trim();
    if (!toastContainer || !text) return;

    const variant = toastVariants[type] ? type : 'success';
    const activeElement = document.activeElement;
    const returnFocusTo = activeElement instanceof HTMLElement
      && activeElement !== document.body
      && !toastContainer.contains(activeElement)
      ? activeElement
      : null;
    const toast = document.createElement('div');
    toast.setAttribute('role', variant === 'error' ? 'alert' : 'status');
    toast.setAttribute('aria-live', variant === 'error' ? 'assertive' : 'polite');
    toast.setAttribute('aria-atomic', 'true');
    toast.setAttribute('tabindex', '-1');
    toast.className = [
      'pointer-events-auto',
      'flex items-start gap-3 rounded-xl px-4 py-3 text-sm shadow-lg ring-1 ring-slate-900/10 transition duration-200 ease-out',
      'focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2',
      'dark:ring-white/10',
      'dark:focus-visible:ring-offset-slate-900',
      toastVariants[variant].toast
    ].join(' ');
    toast.classList.add('opacity-0');

    const textWrapper = document.createElement('div');
    textWrapper.className = 'flex-1 leading-snug';
    textWrapper.textContent = text;
    toast.appendChild(textWrapper);

    const closeBtn = document.createElement('button');
    closeBtn.type = 'button';
    closeBtn.setAttribute('aria-label', 'Fechar notificação');
    closeBtn.className = [
      'flex h-7 w-7 flex-none items-center justify-center rounded-full text-base transition focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2',
      toastVariants[variant].close
    ].join(' ');
    closeBtn.innerHTML = '<span aria-hidden="true">&times;</span>';
    toast.appendChild(closeBtn);

    toastContainer.appendChild(toast);

    const removeToast = () => {
      if (!toast.isConnected) return;
      if (hideTimer) {
        window.clearTimeout(hideTimer);
        hideTimer = null;
      }
      let fallbackTimer = null;
      const handleTransitionEnd = () => {
        toast.removeEventListener('transitionend', handleTransitionEnd);
        if (fallbackTimer) {
          window.clearTimeout(fallbackTimer);
          fallbackTimer = null;
        }
        if (toast.parentElement) toast.parentElement.removeChild(toast);
        if (returnFocusTo && returnFocusTo.isConnected) {
          try {
            returnFocusTo.focus({ preventScroll: true });
          } catch (err) {
            returnFocusTo.focus();
          }
        }
      };
      const wasVisible = toast.classList.contains('opacity-100');
      toast.classList.remove('opacity-100');
      toast.classList.add('opacity-0');
      if (!wasVisible) {
        handleTransitionEnd();
        return;
      }
      fallbackTimer = window.setTimeout(handleTransitionEnd, 250);
      toast.addEventListener('transitionend', handleTransitionEnd);
    };

    let hideTimer = null;
    const durationMs = Number(duration);
    if (!Number.isNaN(durationMs) && durationMs > 0) {
      hideTimer = window.setTimeout(() => removeToast(), durationMs);
    }

    closeBtn.addEventListener('click', () => {
      if (hideTimer) window.clearTimeout(hideTimer);
      removeToast();
    });

    toast.addEventListener('keydown', event => {
      if (event.key === 'Escape' || event.key === 'Esc') {
        event.preventDefault();
        if (hideTimer) window.clearTimeout(hideTimer);
        removeToast();
      }
    });

    requestAnimationFrame(() => {
      toast.classList.remove('opacity-0');
      toast.classList.add('opacity-100');
      try {
        toast.focus({ preventScroll: true });
      } catch (err) {
        toast.focus();
      }
    });
  }

  const nextLevelTextEl = $('#nextLevelText');
  const nextLevelPctEl = $('#nextLevelPct');
  const nextLevelBarEl = $('#nextLevelBar');
  const milestoneWrap = $('#milestoneWrap');
  const levelCardEl = $('#levelCard');
  const levelBadgeEl = $('#levelBadge');
  const achievementsCardEl = $('#achievementsCard');
  const achievementsSummaryEl = $('#achievementsSummary');
  const achievementsUnlockedWrap = $('#achievementsUnlocked');
  const achievementsUnlockedEmpty = $('#achievementsUnlockedEmpty');
  const achievementsUpcomingWrap = $('#achievementsUpcoming');
  const achievementsUpcomingEmpty = $('#achievementsUpcomingEmpty');
  const achievementsLoadingEl = $('#achievementsLoading');
  const achievementsErrorEl = $('#achievementsError');
  const achievementsContentEl = $('#achievementsContent');
  const checkinStreakInfoEl = $('#checkinStreakInfo');

  function resetLevelIndicator() {
    if (nextLevelTextEl) nextLevelTextEl.textContent = 'Faça login para acompanhar seus marcos.';
    if (nextLevelPctEl) nextLevelPctEl.textContent = '0% do nível atual';
    if (nextLevelBarEl) nextLevelBarEl.style.width = '0%';
    if (milestoneWrap) milestoneWrap.innerHTML = '';
    if (levelCardEl) levelCardEl.classList.remove('milestone-celebrate');
    if (levelBadgeEl) {
      levelBadgeEl.classList.add('hidden');
      levelBadgeEl.textContent = '';
    }
  }

  function setLevelIndicatorLoading() {
    if (nextLevelTextEl) nextLevelTextEl.textContent = 'Calculando progresso de nível...';
    if (nextLevelPctEl) nextLevelPctEl.textContent = '...';
    if (nextLevelBarEl) nextLevelBarEl.style.width = '0%';
    if (milestoneWrap) milestoneWrap.innerHTML = '';
    if (levelCardEl) levelCardEl.classList.remove('milestone-celebrate');
    if (levelBadgeEl) {
      levelBadgeEl.classList.add('hidden');
      levelBadgeEl.textContent = '';
    }
  }

  function renderMilestoneBadges(level, nextLevel) {
    if (!milestoneWrap) return;
    milestoneWrap.innerHTML = '';
    const step = 5;
    const minMilestones = 3;
    const safeLevel = Number.isFinite(level) ? level : 0;
    const safeNext = Number.isFinite(nextLevel) ? nextLevel : safeLevel + 1;
    const target = Math.max(safeLevel, safeNext);
    const highest = Math.max(step * minMilestones, Math.ceil((target + step) / step) * step);
    let nextHighlighted = false;
    for (let milestone = step; milestone <= highest; milestone += step) {
      const chip = document.createElement('span');
      chip.className = 'milestone-chip';
      if (milestone <= safeLevel) {
        const icon = milestone % 10 === 0 ? '🌟' : '🏆';
        chip.classList.add('milestone-chip-achieved');
        chip.innerHTML = `<span>${icon}</span><span>Nível ${milestone}</span>`;
      } else if (!nextHighlighted) {
        nextHighlighted = true;
        const icon = milestone % 10 === 0 ? '🚀' : '🎯';
        const label = milestone % 10 === 0 ? `Rumo ao ${milestone}` : `Meta: ${milestone}`;
        chip.classList.add('milestone-chip-next');
        chip.innerHTML = `<span>${icon}</span><span>${label}</span>`;
      } else {
        chip.innerHTML = `<span>Nível ${milestone}</span>`;
      }
      milestoneWrap.appendChild(chip);
    }
    if (!milestoneWrap.children.length) {
      const span = document.createElement('span');
      span.className = 'text-xs text-slate-500 dark:text-slate-300';
      span.textContent = 'Conquiste níveis para desbloquear marcos!';
      milestoneWrap.appendChild(span);
    }
  }

  function formatNumber(value) {
    const numeric = Number(value);
    if (!Number.isFinite(numeric)) return value;
    try {
      return new Intl.NumberFormat('pt-BR').format(numeric);
    } catch (err) {
      return numeric.toString();
    }
  }

  function formatAchievementDate(value) {
    const parsed = parseDateValue(value);
    if (!parsed) return 'agora mesmo';
    try {
      return new Intl.DateTimeFormat('pt-BR', { day: '2-digit', month: 'short', year: 'numeric' }).format(parsed);
    } catch (err) {
      return parsed.toLocaleDateString('pt-BR');
    }
  }

  function getAchievementTimestamp(value) {
    if (!value) return 0;
    const parsed = parseDateValue(value);
    if (parsed) return parsed.getTime();
    const date = new Date(value);
    const time = date.getTime();
    return Number.isNaN(time) ? 0 : time;
  }

  function normalizeAchievementsResponse(data) {
    if (!data || typeof data !== 'object') {
      return {
        achievements: [],
        summary: { total: 0, unlocked: 0 },
        metrics: {}
      };
    }
    const achievements = Array.isArray(data.achievements)
      ? data.achievements.map(item => ({
          id: item?.id || '',
          title: item?.title || '',
          description: item?.description || '',
          category: item?.category || '',
          icon: item?.icon || '',
          rewardXP: Number(item?.rewardXP || 0),
          unlocked: !!item?.unlocked,
          achieved: !!item?.achieved,
          unlockedAt: item?.unlockedAt ? String(item.unlockedAt) : '',
          target: Number(item?.target || 0),
          progressValue: Number(item?.progressValue || item?.progress || 0),
          progress: Number(item?.progress || item?.progressValue || 0),
          progressPct: Math.max(0, Math.min(100, Number(item?.progressPct || 0))),
          progressLabel: item?.progressLabel || '',
          readyToUnlock: !!item?.readyToUnlock,
          extra: item?.extra || {}
        }))
      : [];
    const summary = {
      total: Number(data.summary?.total || achievements.length || 0),
      unlocked: Number(data.summary?.unlocked || achievements.filter(a => a.unlocked).length || 0)
    };
    const metrics = data.metrics && typeof data.metrics === 'object' ? data.metrics : {};
    return { achievements, summary, metrics };
  }

  function createUnlockedAchievementBadge(item) {
    const badge = document.createElement('div');
    badge.className = 'achievement-card achievement-card-unlocked';
    const icon = item?.icon || '🏆';
    const reward = Number(item?.rewardXP || 0);
    const rewardLabel = reward > 0 ? `+${formatNumber(reward)} XP` : 'Badge';
    const unlockedLabel = item?.unlockedAt ? formatAchievementDate(item.unlockedAt) : 'agora mesmo';
    badge.innerHTML = `
      <div class="flex items-center justify-between mb-3">
        <span class="achievement-icon">${icon}</span>
        <span class="achievement-xp">${rewardLabel}</span>
      </div>
      <div class="text-sm font-semibold leading-snug mb-1">${item?.title || 'Conquista desbloqueada'}</div>
      <p class="text-xs leading-relaxed opacity-80">${item?.description || 'Continue participando para acumular ainda mais.'}</p>
      <div class="text-[0.65rem] uppercase tracking-wide mt-3 opacity-70">Desbloqueada em ${unlockedLabel}</div>
    `;
    return badge;
  }

  function createUpcomingAchievementCard(item) {
    const card = document.createElement('div');
    const classes = ['achievement-card', 'achievement-card-locked'];
    if (item?.readyToUnlock) classes.push('achievement-card-ready');
    card.className = classes.join(' ');
    const icon = item?.icon || '🎯';
    const reward = Number(item?.rewardXP || 0);
    const rewardLabel = reward > 0 ? `+${formatNumber(reward)} XP` : 'Meta';
    const progressPct = Math.max(0, Math.min(100, Number(item?.progressPct || 0)));
    const progressLabel = item?.progressLabel || '';
    const encouragement = item?.readyToUnlock
      ? 'Pronto! Realize a próxima ação para conquistar.'
      : 'Continue acumulando progresso para desbloquear.';
    card.innerHTML = `
      <div class="flex items-center justify-between mb-3">
        <span class="achievement-icon">${icon}</span>
        <span class="achievement-xp">${rewardLabel}</span>
      </div>
      <div class="text-sm font-semibold leading-snug mb-1">${item?.title || 'Próxima meta'}</div>
      <p class="text-xs leading-relaxed opacity-80 mb-3">${item?.description || ''}</p>
      <div class="space-y-1">
        <div class="flex items-center justify-between text-[0.65rem] uppercase tracking-wide opacity-75">
          <span>${progressLabel}</span>
          <span>${progressPct}%</span>
        </div>
        <div class="achievement-progress-track">
          <div class="achievement-progress-bar" style="width:${progressPct}%"></div>
        </div>
      </div>
      <div class="text-[0.65rem] mt-3 opacity-70">${encouragement}</div>
    `;
    return card;
  }

  function updateCheckinStreakInfo(metrics) {
    if (!checkinStreakInfoEl) return;
    if (!currentUser) {
      checkinStreakInfoEl.textContent = 'Faça login para iniciar sua sequência de check-ins.';
      checkinStreakInfoEl.classList.remove('text-emerald-600', 'dark:text-emerald-300', 'font-semibold');
      checkinStreakInfoEl.classList.add('text-slate-500', 'dark:text-slate-300');
      return;
    }
    const current = Number(metrics?.checkinCurrentStreak || metrics?.current || 0);
    const best = Number(metrics?.checkinBestStreak || metrics?.best || 0);
    const total = Number(metrics?.totalCheckins || metrics?.total || 0);
    if (!current && !best && !total) {
      checkinStreakInfoEl.textContent = 'Registre seu primeiro check-in para iniciar uma sequência!';
      checkinStreakInfoEl.classList.remove('text-emerald-600', 'dark:text-emerald-300', 'font-semibold');
      checkinStreakInfoEl.classList.add('text-slate-500', 'dark:text-slate-300');
      return;
    }
    const parts = [];
    if (current > 0) {
      parts.push(`🔥 Streak atual: ${current} dia${current > 1 ? 's' : ''}`);
    } else {
      parts.push('Sem streak ativo no momento.');
    }
    if (best > 0) {
      parts.push(`Recorde: ${best} dia${best > 1 ? 's' : ''}`);
    }
    if (total > 0) {
      parts.push(`${total} check-in${total > 1 ? 's' : ''} no total`);
    }
    checkinStreakInfoEl.textContent = parts.join(' • ');
    const highlight = current >= 3;
    if (highlight) {
      checkinStreakInfoEl.classList.add('text-emerald-600', 'dark:text-emerald-300', 'font-semibold');
      checkinStreakInfoEl.classList.remove('text-slate-500', 'dark:text-slate-300');
    } else {
      checkinStreakInfoEl.classList.remove('text-emerald-600', 'dark:text-emerald-300', 'font-semibold');
      checkinStreakInfoEl.classList.add('text-slate-500', 'dark:text-slate-300');
    }
  }

  function renderAchievements() {
    if (!achievementsCardEl) return;

    if (!currentUser) {
      if (achievementsSummaryEl) {
        achievementsSummaryEl.textContent = 'Faça login para acompanhar suas conquistas.';
      }
      if (achievementsContentEl) achievementsContentEl.classList.add('hidden');
      if (achievementsLoadingEl) achievementsLoadingEl.classList.add('hidden');
      if (achievementsErrorEl) achievementsErrorEl.classList.add('hidden');
      if (achievementsUnlockedWrap) achievementsUnlockedWrap.innerHTML = '';
      if (achievementsUpcomingWrap) achievementsUpcomingWrap.innerHTML = '';
      if (achievementsUnlockedEmpty) achievementsUnlockedEmpty.classList.remove('hidden');
      if (achievementsUpcomingEmpty) achievementsUpcomingEmpty.classList.remove('hidden');
      updateCheckinStreakInfo(null);
      return;
    }

    const { loading, error, achievements, summary, metrics } = achievementsState;
    if (achievementsLoadingEl) achievementsLoadingEl.classList.toggle('hidden', !loading);
    if (achievementsErrorEl) {
      achievementsErrorEl.textContent = error || '';
      achievementsErrorEl.classList.toggle('hidden', !error);
    }
    const canShowContent = !loading && !error;
    if (achievementsContentEl) achievementsContentEl.classList.toggle('hidden', !canShowContent);

    const total = Number(summary?.total || achievements.length || 0);
    const unlockedCount = Number(summary?.unlocked || achievements.filter(item => item.unlocked).length || 0);
    if (achievementsSummaryEl) {
      achievementsSummaryEl.textContent = total > 0
        ? `${unlockedCount}/${total} desbloqueadas`
        : 'Nenhuma conquista cadastrada ainda.';
    }

    updateCheckinStreakInfo(metrics);

    if (!canShowContent) {
      if (achievementsUnlockedWrap) achievementsUnlockedWrap.innerHTML = '';
      if (achievementsUpcomingWrap) achievementsUpcomingWrap.innerHTML = '';
      if (achievementsUnlockedEmpty) achievementsUnlockedEmpty.classList.toggle('hidden', !!loading || !!error);
      if (achievementsUpcomingEmpty) achievementsUpcomingEmpty.classList.toggle('hidden', !!loading || !!error);
      return;
    }

    const unlocked = achievements
      .filter(item => item.unlocked)
      .sort((a, b) => getAchievementTimestamp(b.unlockedAt) - getAchievementTimestamp(a.unlockedAt));
    const upcoming = achievements
      .filter(item => !item.unlocked)
      .sort((a, b) => Number(b.progressPct || 0) - Number(a.progressPct || 0));
    const upcomingLimited = upcoming.slice(0, 6);

    if (achievementsUnlockedWrap) {
      achievementsUnlockedWrap.innerHTML = '';
      unlocked.forEach(item => achievementsUnlockedWrap.appendChild(createUnlockedAchievementBadge(item)));
      achievementsUnlockedWrap.classList.toggle('hidden', unlocked.length === 0);
    }
    if (achievementsUnlockedEmpty) {
      achievementsUnlockedEmpty.textContent = unlocked.length > 0
        ? ''
        : 'Ainda sem conquistas desbloqueadas. Faça check-ins e conclua atividades para começar!';
      achievementsUnlockedEmpty.classList.toggle('hidden', unlocked.length > 0);
    }

    if (achievementsUpcomingWrap) {
      achievementsUpcomingWrap.innerHTML = '';
      upcomingLimited.forEach(item => achievementsUpcomingWrap.appendChild(createUpcomingAchievementCard(item)));
      achievementsUpcomingWrap.classList.toggle('hidden', upcomingLimited.length === 0);
    }
    if (achievementsUpcomingEmpty) {
      let message = 'Participe de check-ins e atividades para liberar novas medalhas.';
      if (!upcomingLimited.length && achievements.length > 0) {
        message = 'Todas as conquistas disponíveis foram desbloqueadas! 🎉';
      }
      achievementsUpcomingEmpty.textContent = message;
      achievementsUpcomingEmpty.classList.toggle('hidden', upcomingLimited.length > 0);
    }
  }

  function handleAchievementToasts(list) {
    if (!Array.isArray(list) || !list.length) return;
    list.forEach(item => {
      const icon = item?.icon || '🏆';
      const reward = Number(item?.rewardXP || 0);
      const rewardText = reward > 0 ? ` +${formatNumber(reward)} XP` : '';
      const title = item?.title || 'Nova conquista';
      showToast({ message: `${icon} Conquista desbloqueada: ${title}!${rewardText}`, type: 'success' });
    });
  }

  function applyAchievementsUpdate(overview, unlockedList = [], options = {}) {
    if (!overview) return;
    const normalized = normalizeAchievementsResponse(overview);
    achievementsState.loading = false;
    achievementsState.error = '';
    achievementsState.achievements = normalized.achievements;
    achievementsState.summary = normalized.summary;
    achievementsState.metrics = normalized.metrics || {};
    renderAchievements();
    if (!options?.silent && Array.isArray(unlockedList) && unlockedList.length) {
      handleAchievementToasts(unlockedList);
    }
  }

  function resetAchievementsUI() {
    achievementsState.loading = false;
    achievementsState.error = '';
    achievementsState.achievements = [];
    achievementsState.summary = { total: 0, unlocked: 0 };
    achievementsState.metrics = {};
    renderAchievements();
  }

  function loadAchievementsOverview() {
    if (!currentUser || !currentUser.id) {
      resetAchievementsUI();
      return;
    }
    const expectedUserId = currentUser.id;
    achievementsState.loading = true;
    achievementsState.error = '';
    renderAchievements();
    google.script.run
      .withFailureHandler(err => {
        if (!currentUser || currentUser.id !== expectedUserId) return;
        achievementsState.loading = false;
        achievementsState.error = err?.message || 'Não foi possível carregar as conquistas.';
        achievementsState.metrics = {};
        renderAchievements();
      })
      .withSuccessHandler(data => {
        if (!currentUser || currentUser.id !== expectedUserId) return;
        const normalized = normalizeAchievementsResponse(data);
        achievementsState.loading = false;
        achievementsState.error = '';
        achievementsState.achievements = normalized.achievements;
        achievementsState.summary = normalized.summary;
        achievementsState.metrics = normalized.metrics || {};
        renderAchievements();
      })
      .getUserAchievementsOverview({ userId: currentUser.id });
  }

  function updateLevelIndicator(state) {
    if (!state) return;
    const levelValue = Number(state.level || 1);
    const nextLevelValue = Number.isFinite(Number(state.nextLevel)) ? Number(state.nextLevel) : levelValue + 1;
    const xpPerLevelRaw = Number(state.xpPerLevel);
    const xpPerLevel = Number.isFinite(xpPerLevelRaw) && xpPerLevelRaw > 0 ? xpPerLevelRaw : null;
    const xpToNextRaw = Number(state.xpToNextLevel);
    const xpToNext = Number.isFinite(xpToNextRaw) ? Math.max(0, Math.round(xpToNextRaw)) : null;
    const xpIntoLevel = xpPerLevel !== null && xpToNext !== null ? Math.max(0, xpPerLevel - xpToNext) : 0;
    const pct = xpPerLevel !== null && xpPerLevel > 0 && xpToNext !== null
      ? Math.round((xpIntoLevel / xpPerLevel) * 100)
      : 0;
    const pctClamped = Math.max(0, Math.min(100, pct));

    if (nextLevelTextEl) {
      if (xpToNext === null) {
        nextLevelTextEl.textContent = 'Progresso de nível indisponível no momento.';
      } else if (xpToNext === 0) {
        nextLevelTextEl.textContent = `Pronto para alcançar o nível ${nextLevelValue}!`;
      } else {
        const xpLabel = xpToNext === 1 ? 'Falta 1 XP' : `Faltam ${xpToNext} XP`;
        nextLevelTextEl.textContent = `${xpLabel} para o nível ${nextLevelValue}`;
      }
    }
    if (nextLevelPctEl) {
      nextLevelPctEl.textContent = `${pctClamped}% do nível atual`;
    }
    if (nextLevelBarEl) {
      nextLevelBarEl.style.width = `${pctClamped}%`;
    }

    if (levelCardEl) {
      const isMilestone = levelValue > 0 && levelValue % 5 === 0;
      levelCardEl.classList.toggle('milestone-celebrate', isMilestone);
    }
    if (levelBadgeEl) {
      const isMilestone = levelValue > 0 && levelValue % 5 === 0;
      if (isMilestone) {
        const isEpic = levelValue % 10 === 0;
        levelBadgeEl.classList.remove('hidden');
        levelBadgeEl.textContent = isEpic ? '🌟 Nível épico!' : '🏆 Marco!';
      } else {
        levelBadgeEl.classList.add('hidden');
        levelBadgeEl.textContent = '';
      }
    }

    renderMilestoneBadges(levelValue, nextLevelValue);
  }

  function formatLevelProgressMessage(info) {
    if (!info) return '';
    const xpToNextRaw = Number(info.xpToNextLevel ?? info.remainingXP);
    const nextLevelRaw = Number(info.nextLevel);
    const levelRaw = Number(info.level);
    const nextLevelValue = Number.isFinite(nextLevelRaw)
      ? nextLevelRaw
      : (Number.isFinite(levelRaw) ? levelRaw + 1 : null);
    if (!Number.isFinite(xpToNextRaw) || xpToNextRaw < 0 || !Number.isFinite(nextLevelValue)) {
      return '';
    }
    const xpToNext = Math.max(0, Math.round(xpToNextRaw));
    if (xpToNext === 0) {
      return ` Você está pronto(a) para alcançar o nível ${nextLevelValue}!`;
    }
    const xpLabel = xpToNext === 1 ? 'Falta 1 XP' : `Faltam ${xpToNext} XP`;
    return ` ${xpLabel} para o nível ${nextLevelValue}.`;
  }

  resetLevelIndicator();

  const historyTabs = Array.from(document.querySelectorAll('[data-history-tab]'));
  const historyListEl = $('#historyList');
  const historyPeriodSelect = $('#historyPeriodFilter');
  const historyModuleSelect = $('#historyModuleFilter');
  const historyModuleWrap = $('#historyModuleFilterWrap');
  const historyStreakWrap = $('#historyStreakWrap');
  const historyStreakCurrent = $('#historyStreakCurrent');
  const historyStreakBest = $('#historyStreakBest');
  const MS_PER_DAY = 24 * 60 * 60 * 1000;

  const historyState = {
    checkins: [],
    activities: [],
    streak: { current: 0, best: 0 },
    loading: { checkins: false, activities: false },
    errors: { checkins: '', activities: '' }
  };
  let activeHistoryTab = 'checkins';

  historyTabs.forEach(button => {
    button.addEventListener('click', () => {
      const tab = button.getAttribute('data-history-tab') || 'checkins';
      if (tab === activeHistoryTab) return;
      activeHistoryTab = tab;
      historyTabs.forEach(btn => {
        const btnTab = btn.getAttribute('data-history-tab');
        btn.classList.toggle('history-tab-active', btnTab === activeHistoryTab);
      });
      renderHistory();
    });
  });

  if (historyPeriodSelect) {
    historyPeriodSelect.addEventListener('change', () => renderHistory());
  }

  if (historyModuleSelect) {
    historyModuleSelect.addEventListener('change', () => renderHistory());
  }

  function resetHistorySection() {
    historyState.checkins = [];
    historyState.activities = [];
    historyState.streak = { current: 0, best: 0 };
    historyState.loading.checkins = false;
    historyState.loading.activities = false;
    historyState.errors.checkins = '';
    historyState.errors.activities = '';
    activeHistoryTab = 'checkins';
    if (historyPeriodSelect) historyPeriodSelect.value = '30';
    if (historyModuleSelect) historyModuleSelect.value = 'all';
    historyTabs.forEach(btn => {
      const tab = btn.getAttribute('data-history-tab');
      btn.classList.toggle('history-tab-active', tab === activeHistoryTab);
    });
    updateHistoryModuleFilterOptions();
    renderHistory();
  }

  function renderHistory() {
    if (!historyListEl) return;
    if (!currentUser) {
      historyListEl.innerHTML = '<p class="history-empty">Faça login para acompanhar seu histórico.</p>';
      if (historyModuleWrap) historyModuleWrap.classList.add('hidden');
      if (historyStreakWrap) historyStreakWrap.classList.add('hidden');
      return;
    }

    if (historyModuleWrap) {
      historyModuleWrap.classList.toggle('hidden', activeHistoryTab !== 'activities');
    }

    const stateKey = activeHistoryTab === 'activities' ? 'activities' : 'checkins';
    const isLoading = historyState.loading[stateKey];
    const errorMessage = historyState.errors[stateKey];
    const periodValue = historyPeriodSelect ? historyPeriodSelect.value : 'all';
    const moduleValue = historyModuleSelect ? historyModuleSelect.value : 'all';

    if (activeHistoryTab !== 'activities' && historyModuleWrap) {
      historyModuleWrap.classList.add('hidden');
    } else if (activeHistoryTab === 'activities') {
      updateHistoryModuleFilterOptions();
    }

    historyListEl.innerHTML = '';

    if (isLoading) {
      const loadingText = activeHistoryTab === 'activities' ? 'Carregando atividades...' : 'Carregando check-ins...';
      historyListEl.innerHTML = `<p class="history-empty">${loadingText}</p>`;
      renderStreakInfo();
      return;
    }

    if (errorMessage) {
      historyListEl.innerHTML = `<p class="history-empty text-rose-600 dark:text-rose-300">${errorMessage}</p>`;
      renderStreakInfo();
      return;
    }

    let items = (historyState[stateKey] || []).slice();

    if (periodValue !== 'all') {
      const days = Number(periodValue);
      if (!Number.isNaN(days) && days > 0) {
        const now = Date.now();
        items = items.filter(item => {
          const ts = getItemTimestamp(item);
          if (!Number.isFinite(ts)) return false;
          const diffDays = Math.floor((now - ts) / MS_PER_DAY);
          return diffDays < days;
        });
      }
    }

    if (activeHistoryTab === 'activities' && moduleValue !== 'all') {
      items = items.filter(item => String(item.moduleId || '') === moduleValue);
    }

    items.sort((a, b) => {
      const aTime = getItemTimestamp(a);
      const bTime = getItemTimestamp(b);
      return (Number.isFinite(bTime) ? bTime : -Infinity) - (Number.isFinite(aTime) ? aTime : -Infinity);
    });

    if (!items.length) {
      const emptyText = activeHistoryTab === 'activities'
        ? 'Nenhuma atividade registrada para os filtros selecionados.'
        : 'Ainda não há check-ins no período selecionado. Registre sua presença para começar um streak!';
      historyListEl.innerHTML = `<p class="history-empty">${emptyText}</p>`;
      renderStreakInfo();
      return;
    }

    items.forEach(item => {
      historyListEl.appendChild(
        activeHistoryTab === 'activities' ? renderActivityItem(item) : renderCheckinItem(item)
      );
    });

    renderStreakInfo();
  }

  function renderStreakInfo() {
    if (!historyStreakWrap) return;
    if (activeHistoryTab !== 'checkins' || historyState.loading.checkins || historyState.errors.checkins || !currentUser) {
      historyStreakWrap.classList.add('hidden');
      return;
    }
    if (!historyState.checkins.length) {
      historyStreakWrap.classList.add('hidden');
      return;
    }

    const { current, best } = historyState.streak;
    historyStreakWrap.classList.remove('hidden');

    if (historyStreakCurrent) {
      historyStreakCurrent.textContent = current > 0
        ? `🔥 Streak atual: ${current} dia${current > 1 ? 's' : ''}`
        : 'Sem streak ativo';
      historyStreakCurrent.classList.toggle('bg-emerald-100', current >= 3);
      historyStreakCurrent.classList.toggle('text-emerald-700', current >= 3);
      historyStreakCurrent.classList.toggle('dark:bg-emerald-500/10', current >= 3);
      historyStreakCurrent.classList.toggle('dark:text-emerald-300', current >= 3);
    }

    if (historyStreakBest) {
      historyStreakBest.textContent = best > 0
        ? `Recorde: ${best} dia${best > 1 ? 's' : ''}`
        : '';
      historyStreakBest.classList.toggle('hidden', best <= 0);
    }
  }

  function getItemTimestamp(item) {
    if (!item) return NaN;
    if (typeof item.timestamp === 'number' && !Number.isNaN(item.timestamp)) return item.timestamp;
    const parsed = parseDateValue(item.date || item.day);
    return parsed ? parsed.getTime() : NaN;
  }

  function parseDateValue(value) {
    if (!value) return null;
    if (value instanceof Date) return value;
    const str = String(value).trim();
    if (!str) return null;
    const normalized = str.length === 10 ? `${str}T00:00:00Z` : str;
    const date = new Date(normalized);
    return Number.isNaN(date.getTime()) ? null : date;
  }

  function formatHistoryDate(item) {
    const ts = getItemTimestamp(item);
    if (!Number.isFinite(ts)) {
      const day = item && item.day ? String(item.day) : '';
      return day ? day.split('-').reverse().join('/') : 'Data indisponível';
    }
    try {
      return new Intl.DateTimeFormat('pt-BR', { day: '2-digit', month: 'short', year: 'numeric' }).format(new Date(ts));
    } catch (err) {
      return new Date(ts).toLocaleDateString('pt-BR');
    }
  }

  function renderCheckinItem(item) {
    const element = document.createElement('div');
    element.className = 'flex flex-wrap items-center justify-between gap-3 rounded-xl border border-slate-200 dark:border-slate-700/70 bg-white dark:bg-slate-900/60 px-4 py-3';
    const xpValue = Number(item?.xp || 0);
    element.innerHTML = `
      <div class="flex-1">
        <div class="font-semibold">${formatHistoryDate(item)}</div>
        <div class="text-xs text-slate-500 dark:text-slate-400">Check-in diário</div>
      </div>
      <div class="text-sm font-semibold text-emerald-600 dark:text-emerald-400">+${xpValue} XP</div>
    `;
    return element;
  }

  function renderActivityItem(item) {
    const element = document.createElement('div');
    element.className = 'flex flex-wrap items-center justify-between gap-3 rounded-xl border border-slate-200 dark:border-slate-700/70 bg-white dark:bg-slate-900/60 px-4 py-3';
    const moduleLabel = Number.isFinite(item?.moduleId) && item.moduleId > 0 ? `Módulo ${item.moduleId}` : 'Atividade';
    const xpValue = Number(item?.earnedXP || 0);
    const scoreValue = Number(item?.scorePct || 0);
    const progressValue = Number(item?.progressPct || 0);
    element.innerHTML = `
      <div class="flex-1">
        <div class="font-semibold">${moduleLabel}</div>
        <div class="text-xs text-slate-500 dark:text-slate-400">${formatHistoryDate(item)}</div>
      </div>
      <div class="flex flex-col items-end gap-1 text-xs text-slate-500 dark:text-slate-400">
        <span class="text-sm font-semibold text-primary dark:text-blue-400">+${xpValue} XP</span>
        <span>Nota: ${scoreValue}%</span>
        <span>Evolução: ${progressValue}% do curso</span>
      </div>
    `;
    return element;
  }

  function updateHistoryModuleFilterOptions() {
    if (!historyModuleSelect) return;
    const previousValue = historyModuleSelect.value;
    historyModuleSelect.innerHTML = '';

    const optionAll = document.createElement('option');
    optionAll.value = 'all';
    optionAll.textContent = 'Todos os módulos';
    historyModuleSelect.appendChild(optionAll);

    const modules = Array.from(new Set(historyState.activities
      .map(item => Number(item?.moduleId || 0))
      .filter(id => Number.isFinite(id) && id > 0)))
      .sort((a, b) => a - b);

    modules.forEach(id => {
      const opt = document.createElement('option');
      opt.value = String(id);
      opt.textContent = `Módulo ${id}`;
      historyModuleSelect.appendChild(opt);
    });

    if (modules.includes(Number(previousValue))) {
      historyModuleSelect.value = previousValue;
    } else {
      historyModuleSelect.value = 'all';
    }

    if (historyModuleWrap) {
      historyModuleWrap.classList.toggle('hidden', activeHistoryTab !== 'activities' || modules.length === 0);
    }
  }

  function computeCheckinStreak(items) {
    if (!Array.isArray(items) || !items.length) return { current: 0, best: 0 };
    const timestamps = Array.from(new Set(items
      .map(entry => getItemTimestamp(entry))
      .filter(ts => Number.isFinite(ts)))).sort((a, b) => a - b);
    if (!timestamps.length) return { current: 0, best: 0 };

    let best = 1;
    let streak = 1;
    for (let i = 1; i < timestamps.length; i++) {
      const diffDays = Math.round((timestamps[i] - timestamps[i - 1]) / MS_PER_DAY);
      if (diffDays === 0) {
        continue;
      } else if (diffDays === 1) {
        streak += 1;
      } else {
        if (streak > best) best = streak;
        streak = 1;
      }
    }
    if (streak > best) best = streak;

    const desc = timestamps.slice().sort((a, b) => b - a);
    let current = 0;
    let previous = null;
    for (let i = 0; i < desc.length; i++) {
      const ts = desc[i];
      if (i === 0) {
        current = 1;
        previous = ts;
        continue;
      }
      const diffDays = Math.round((previous - ts) / MS_PER_DAY);
      if (diffDays === 0) {
        continue;
      }
      if (diffDays === 1) {
        current += 1;
        previous = ts;
      } else {
        break;
      }
    }

    return { current, best };
  }

  function normalizeCheckinHistory(data) {
    if (!Array.isArray(data)) return [];
    return data.map(item => {
      const day = item?.day ? String(item.day) : '';
      const date = item?.date ? String(item.date) : '';
      const parsed = parseDateValue(date || day);
      const timestamp = parsed ? parsed.getTime() : (typeof item?.timestamp === 'number' && !Number.isNaN(item.timestamp) ? item.timestamp : null);
      return {
        day,
        date,
        xp: Number(item?.xp || 0),
        timestamp: Number.isFinite(timestamp) ? timestamp : null
      };
    });
  }

  function normalizeActivityHistory(data) {
    if (!Array.isArray(data)) return [];
    return data.map(item => {
      const day = item?.day ? String(item.day) : '';
      const date = item?.date ? String(item.date) : '';
      const parsed = parseDateValue(date || day);
      const timestampCandidate = typeof item?.timestamp === 'number' && !Number.isNaN(item.timestamp)
        ? item.timestamp
        : (parsed ? parsed.getTime() : null);
      return {
        moduleId: Number(item?.moduleId || item?.module || 0),
        earnedXP: Number(item?.earnedXP || item?.xp || 0),
        scorePct: Math.round(Number(item?.scorePct || item?.score || 0)),
        progressPct: Math.max(0, Math.min(100, Math.round(Number(item?.progressPct || item?.progress || 0)))),
        day,
        date,
        timestamp: Number.isFinite(timestampCandidate) ? timestampCandidate : null
      };
    });
  }

  function loadHistoryForCurrentUser() {
    if (!currentUser || !currentUser.id) return;

    const expectedUserId = currentUser.id;
    historyState.loading.checkins = true;
    historyState.errors.checkins = '';
    historyState.loading.activities = true;
    historyState.errors.activities = '';
    renderHistory();

    google.script.run
      .withFailureHandler(err => {
        if (!currentUser || currentUser.id !== expectedUserId) return;
        historyState.loading.checkins = false;
        historyState.errors.checkins = err?.message || 'Não foi possível carregar o histórico de check-ins.';
        historyState.checkins = [];
        historyState.streak = { current: 0, best: 0 };
        renderHistory();
      })
      .withSuccessHandler(data => {
        if (!currentUser || currentUser.id !== expectedUserId) return;
        historyState.loading.checkins = false;
        historyState.checkins = normalizeCheckinHistory(data);
        historyState.streak = computeCheckinStreak(historyState.checkins);
        historyState.errors.checkins = '';
        updateCheckinStreakInfo({
          checkinCurrentStreak: historyState.streak.current,
          checkinBestStreak: historyState.streak.best,
          totalCheckins: historyState.checkins.length
        });
        renderHistory();
      })
      .getCheckinHistory(currentUser.id);

    google.script.run
      .withFailureHandler(err => {
        if (!currentUser || currentUser.id !== expectedUserId) return;
        historyState.loading.activities = false;
        historyState.errors.activities = err?.message || 'Não foi possível carregar o histórico de atividades.';
        historyState.activities = [];
        updateHistoryModuleFilterOptions();
        renderHistory();
      })
      .withSuccessHandler(data => {
        if (!currentUser || currentUser.id !== expectedUserId) return;
        historyState.loading.activities = false;
        historyState.activities = normalizeActivityHistory(data);
        historyState.errors.activities = '';
        updateHistoryModuleFilterOptions();
        renderHistory();
      })
      .getActivityHistory(currentUser.id);
  }

  const signupMessageEl = $('#signupMsg');
  const loginMessageEl  = $('#loginMsg');

  function renderCardMessage(el, type, message) {
    if (!el) return;
    const text = (message || '').toString();
    el.textContent = text;
    el.classList.remove('feedback-error', 'feedback-success');
    if (!text) {
      el.classList.add('hidden');
      return;
    }
    el.classList.remove('hidden');
    el.classList.add(type === 'success' ? 'feedback-success' : 'feedback-error');
  }

  function clearCardMessage(el) {
    renderCardMessage(el, '', '');
  }

  const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  const requiredSignupKeys = ['name','email','password'];
  const signupFields = {
    name: {
      input: $('#rName'),
      error: $('#rNameError'),
      touched: false,
      customError: null,
      validator: value => {
        if (!value) return { valid:false, message:'Informe o nome completo.' };
        if (value.length < 3) return { valid:false, message:'O nome deve ter pelo menos 3 caracteres.' };
        return { valid:true, message:'' };
      }
    },
    email: {
      input: $('#rEmail'),
      error: $('#rEmailError'),
      touched: false,
      customError: null,
      validator: value => {
        if (!value) return { valid:false, message:'Informe o e-mail.' };
        if (!emailPattern.test(value)) return { valid:false, message:'Formato de e-mail inválido.' };
        return { valid:true, message:'' };
      }
    },
    password: {
      input: $('#rPass'),
      error: $('#rPassError'),
      touched: false,
      customError: null,
      validator: value => {
        const missing = [];
        if (value.length < 8) missing.push('no mínimo 8 caracteres');
        if (!/[A-Z]/.test(value)) missing.push('uma letra maiúscula');
        if (!/[a-z]/.test(value)) missing.push('uma letra minúscula');
        if (!/\d/.test(value)) missing.push('um número');
        if (!/[^A-Za-z0-9]/.test(value)) missing.push('um símbolo');
        if (missing.length) {
          const last = missing.pop();
          const message = missing.length ? `A senha deve conter ${missing.join(', ')} e ${last}.` : `A senha deve conter ${last}.`;
          return { valid:false, message };
        }
        return { valid:true, message:'' };
      }
    },
    adminCode: {
      input: $('#rAdminCode'),
      error: $('#rAdminCodeError'),
      touched: false,
      customError: null,
      validator: () => ({ valid:true, message:'' })
    }
  };

  const btnSignup = $('#btnSignup');
  const loginEmailInput = $('#lEmail');
  const loginPasswordInput = $('#lPass');
  const btnLogin = $('#btnLogin');
  let isSignupSubmitting = false;

  function evaluateField(key, opts = {}) {
    const field = signupFields[key];
    if (!field || !field.input) return true;
    const rawValue = field.input.value || '';
    const value = rawValue.trim();
    const shouldShow = opts.force || field.touched || rawValue.length > 0;

    if (field.customError) {
      if (field.error) field.error.textContent = shouldShow ? field.customError : '';
      return false;
    }

    const result = field.validator(value, rawValue);
    if (field.error) field.error.textContent = shouldShow ? result.message : '';
    return !!result.valid;
  }

  function updateSignupButton() {
    const allValid = requiredSignupKeys.every(key => evaluateField(key));
    if (btnSignup) btnSignup.disabled = !allValid || isSignupSubmitting;
  }

  Object.entries(signupFields).forEach(([key, field]) => {
    if (!field.input) return;
    field.input.addEventListener('input', () => {
      field.customError = null;
      clearCardMessage(signupMessageEl);
      evaluateField(key);
      updateSignupButton();
    });
    field.input.addEventListener('blur', () => {
      field.touched = true;
      evaluateField(key, { force: true });
      updateSignupButton();
    });
  });

  updateSignupButton();

  [loginEmailInput, loginPasswordInput].forEach(input => {
    if (!input) return;
    input.addEventListener('input', () => clearCardMessage(loginMessageEl));
  });

  if (communityTextarea) {
    communityTextarea.addEventListener('input', () => {
      showCommunityError('');
      updateCommunityCounter();
      updateCommunityPublishState();
    });
  }

  if (communityPublishBtn) {
    communityPublishBtn.addEventListener('click', () => {
      if (!currentUser) {
        showToast({ message: 'Entre com sua conta para publicar no mural.', type: 'warning' });
        return;
      }
      const token = getSessionToken();
      if (!token) {
        showToast({ message: 'Sessão expirada. Faça login novamente.', type: 'error' });
        return;
      }
      const message = communityTextarea ? communityTextarea.value.trim() : '';
      if (!message) {
        showCommunityError('Escreva uma mensagem para publicar.');
        if (communityTextarea) {
          try { communityTextarea.focus({ preventScroll: true }); } catch (err) { communityTextarea.focus(); }
        }
        return;
      }
      if (message.length > communityCharLimit) {
        showCommunityError(`A mensagem deve ter até ${communityCharLimit} caracteres.`);
        return;
      }
      isPublishingCommunity = true;
      updateCommunityPublishState();
      showCommunityError('');
      google.script.run
        .withFailureHandler(err => {
          isPublishingCommunity = false;
          updateCommunityPublishState();
          showCommunityError(err?.message || 'Não foi possível publicar agora.');
        })
        .withSuccessHandler(() => {
          isPublishingCommunity = false;
          updateCommunityPublishState();
          if (communityTextarea) communityTextarea.value = '';
          updateCommunityCounter();
          showCommunityError('');
          showToast({ message: 'Mensagem publicada no mural!', type: 'success' });
          refreshCommunityWall();
        })
        .addCommunityWallEntry({ token, message });
    });
  }

  if (communityListEl) {
    communityListEl.addEventListener('click', event => {
      const target = event.target instanceof HTMLElement
        ? event.target.closest('[data-action="remove-wall-entry"]')
        : null;
      if (!target) return;
      event.preventDefault();
      if (!currentUser?.isAdmin) {
        showToast({ message: 'Apenas administradores podem remover publicações.', type: 'error' });
        return;
      }
      const postId = target.getAttribute('data-id') || '';
      if (!postId) return;
      const token = getSessionToken();
      if (!token) {
        showToast({ message: 'Sessão expirada. Faça login novamente.', type: 'error' });
        return;
      }
      const button = target instanceof HTMLButtonElement ? target : target.closest('button');
      if (button) {
        button.disabled = true;
        button.setAttribute('aria-busy', 'true');
      }
      google.script.run
        .withFailureHandler(err => {
          if (button) {
            button.disabled = false;
            button.removeAttribute('aria-busy');
          }
          showToast({ message: err?.message || 'Não foi possível remover agora.', type: 'error' });
        })
        .withSuccessHandler(() => {
          showToast({ message: 'Publicação removida do mural.', type: 'success' });
          refreshCommunityWall();
        })
        .removeCommunityWallEntry({ token, postId });
    });
  }

  updateCommunityCounter();

  // UI switches
  function updateUI(options = {}) {
    const keepLevelIndicator = !!(options && options.keepLevelIndicator);
    const skipAchievements = !!(options && options.skipAchievements);
    const skipCommunity = !!(options && options.skipCommunity);
    const achievementsData = options && options.achievementsData;
    const achievementsUnlocked = options && options.achievementsUnlocked;
    const achievementsSilent = !!(options && options.silentAchievements);
    if (!currentUser) {
      $('#authSection').classList.remove('hidden');
      $('#dashSection').classList.add('hidden');
      $('#userInfo').textContent = 'Visitante';
      $('#btnLogout').classList.add('hidden');
      resetHistorySection();
      resetLevelIndicator();
       resetAchievementsUI();
      syncAdminVisibility();
      updateCommunityAccess();
      if (!skipCommunity) refreshCommunityWall();
      return;
    }
    $('#authSection').classList.add('hidden');
    $('#dashSection').classList.remove('hidden');
    $('#btnLogout').classList.remove('hidden');
    $('#userInfo').textContent = currentUser.name + (currentUser.isAdmin ? ' (Admin)' : '');
    loadHistoryForCurrentUser();
    if (!keepLevelIndicator) {
      setLevelIndicatorLoading();
    }
    if (achievementsData) {
      applyAchievementsUpdate(achievementsData, achievementsUnlocked || [], { silent: achievementsSilent });
    } else if (!skipAchievements) {
      loadAchievementsOverview();
    }
    // estado
    google.script.run
      .withFailureHandler(err => {
        console.error('Falha ao obter estado do usuário:', err);
        if (!keepLevelIndicator) {
          if (nextLevelTextEl) nextLevelTextEl.textContent = 'Não foi possível carregar o progresso agora.';
          if (nextLevelPctEl) nextLevelPctEl.textContent = '—';
        }
      })
      .withSuccessHandler(s=>{
        $('#xpBox').textContent  = s.xp;
        $('#lvlBox').textContent = s.level;
        $('#doneBox').textContent = s.concluidos;
        const pct = Math.round((s.concluidos/24)*100);
        $('#pctBox').textContent = pct + '%';
        $('#barBox').style.width = pct + '%';
        updateLevelIndicator(s);
      }).getUserState({ userId: currentUser.id });

    // ranking
    refreshRanking();
    // admin panel
    $('#adminPanel').classList.toggle('hidden', !currentUser.isAdmin);
    syncAdminVisibility();
    updateCommunityAccess();
    if (!skipCommunity) refreshCommunityWall();
  }

  function refreshRanking() {
    google.script.run.withSuccessHandler(list=>{
      const wrap = $('#rankWrap');
      wrap.innerHTML = '';
      list.forEach(r=>{
        const div = document.createElement('div');
        div.innerHTML = `<b>${r.pos}º</b> — ${r.name} • XP ${r.xp} • Nível ${r.level}`;
        wrap.appendChild(div);
      });
      if (currentUser?.isAdmin) {
        const adm = $('#adminRank');
        adm.innerHTML = wrap.innerHTML;
      }
    }).getRanking();
  }

  // AUTH
  if (btnSignup) {
    btnSignup.addEventListener('click', () => {
      clearCardMessage(signupMessageEl);
      Object.values(signupFields).forEach(field => { field.touched = true; });
      const isValid = requiredSignupKeys.every(key => evaluateField(key, { force: true }));
      updateSignupButton();
      if (!isValid) {
        renderCardMessage(signupMessageEl, 'error', 'Revise os campos destacados.');
        return;
      }

      const payload = {
        name: signupFields.name.input.value.trim(),
        email: signupFields.email.input.value.trim(),
        password: signupFields.password.input.value,
        adminCode: signupFields.adminCode.input.value.trim()
      };

      isSignupSubmitting = true;
      updateSignupButton();

      google.script.run
        .withFailureHandler(err => {
          isSignupSubmitting = false;
          renderCardMessage(signupMessageEl, 'error', err.message || err);
          updateSignupButton();
        })
        .withSuccessHandler(res => {
          isSignupSubmitting = false;

          if (res && res.ok && res.user && res.token) {
            clearCardMessage(signupMessageEl);
            currentUser = res.user;
            persistSession(res.token, res.user);
            updateUI();
            updateSignupButton();
            return;
          }

          if (res && res.errors) {
            Object.entries(res.errors).forEach(([fieldKey, message]) => {
              const field = signupFields[fieldKey];
              if (field) {
                field.touched = true;
                field.customError = message;
                evaluateField(fieldKey, { force: true });
              }
            });
          }

          let messageText = 'Revise os campos destacados.';
          if (res && res.message) {
            messageText = res.message;
          } else if (!res || !res.errors || Object.keys(res.errors).length === 0) {
            messageText = 'Não foi possível criar a conta. Tente novamente.';
          }
          renderCardMessage(signupMessageEl, 'error', messageText);
          updateSignupButton();
        })
        .registerUser(payload);
    });
  }

  if (btnLogin) {
    btnLogin.addEventListener('click', () => {
      clearCardMessage(loginMessageEl);
      const email = loginEmailInput ? loginEmailInput.value.trim() : '';
      const password = loginPasswordInput ? loginPasswordInput.value.trim() : '';
      if (!email || !password) {
        renderCardMessage(loginMessageEl, 'error', 'Informe e-mail e senha.');
        return;
      }

      google.script.run
        .withFailureHandler(err => {
          renderCardMessage(loginMessageEl, 'error', err.message || err);
        })
        .withSuccessHandler(res => {
          const user = res && res.user;
          const token = res && res.token;
          if (user && user.id && token) {
            clearCardMessage(loginMessageEl);
            currentUser = user;
            persistSession(token, user);
            updateUI();
          } else {
            renderCardMessage(loginMessageEl, 'error', 'Não foi possível entrar. Tente novamente.');
          }
        })
        .loginUser({ email, password });
    });
  }

  $('#btnLogout').onclick = () => {
    const finish = () => {
      clearStoredSession();
      currentUser = null;
      updateUI();
    };
    const stored = getStoredSession();
    const token = stored && stored.token;
    if (!token) {
      finish();
      return;
    }
    google.script.run
      .withFailureHandler(() => finish())
      .withSuccessHandler(() => finish())
      .logout(token);
  };

  // Check-in
  $('#btnCheckin').onclick = ()=>{
    if (!currentUser) return showToast({ message: 'Faça login primeiro.', type: 'warning' });
    google.script.run
      .withFailureHandler(err=> showToast({ message: err?.message || err, type: 'error' }))
      .withSuccessHandler(res=>{
        if (res && res.ok) {
          const bonusXP = Number(res.achievementBonusXP || 0);
          const unlockedAchievements = Array.isArray(res.achievementsUnlocked) ? res.achievementsUnlocked : [];
          if (res.achievementsOverview) {
            applyAchievementsUpdate(res.achievementsOverview, unlockedAchievements);
          } else if (unlockedAchievements.length) {
            handleAchievementToasts(unlockedAchievements);
          }
          const extra = formatLevelProgressMessage(res);
          const totalXP = Number.isFinite(Number(res.totalXP)) ? Number(res.totalXP) : res.totalXP;
          const bonusText = bonusXP > 0 ? ` Bônus de conquistas: +${bonusXP} XP.` : '';
          $('#checkinMsg').textContent = `Presença registrada (+${res.xpGanho} XP).${bonusText} Total: ${totalXP} XP.${extra}`;
          if (Number.isFinite(Number(totalXP))) $('#xpBox').textContent = totalXP;
          if (Number.isFinite(Number(res.level))) $('#lvlBox').textContent = res.level;
          updateLevelIndicator(res);
          updateUI({ keepLevelIndicator: true, skipAchievements: true, skipCommunity: true });
        } else {
          $('#checkinMsg').textContent = res?.msg || 'Não foi possível registrar o check-in.';
        }
        setTimeout(()=> $('#checkinMsg').textContent='', 3000);
      })
      .checkin({ userId: currentUser.id });
  };

  // Submit activity (exemplo)
  $('#btnSubmitActivity').onclick = ()=>{
    if (!currentUser) return showToast({ message: 'Faça login primeiro.', type: 'warning' });
    const payload = {
      userId: currentUser.id,
      moduleId: Number($('#aModule').value||1),
      scorePct: Number($('#aScore').value||0),
      maxXP: Number($('#aMaxXP').value||0)
    };
    google.script.run
      .withFailureHandler(err=> showToast({ message: err?.message || err, type: 'error' }))
      .withSuccessHandler(res=>{
        if (!res || !res.ok) {
          $('#activityMsg').textContent = 'Não foi possível registrar a atividade agora.';
          setTimeout(()=> $('#activityMsg').textContent='', 4000);
          return;
        }
        const bonusXP = Number(res.achievementBonusXP || 0);
        const unlockedAchievements = Array.isArray(res.achievementsUnlocked) ? res.achievementsUnlocked : [];
        if (res.achievementsOverview) {
          applyAchievementsUpdate(res.achievementsOverview, unlockedAchievements);
        } else if (unlockedAchievements.length) {
          handleAchievementToasts(unlockedAchievements);
        }
        const deltaXP = Number.isFinite(Number(res.deltaXP)) ? Number(res.deltaXP) : 0;
        const deltaText = deltaXP > 0 ? `Você ganhou +${deltaXP} XP.` : 'Sem XP adicional desta vez.';
        const totalXP = Number.isFinite(Number(res.totalXP)) ? Number(res.totalXP) : res.totalXP;
        const levelInfo = Number.isFinite(Number(res.level)) ? ` (Nível ${res.level})` : '';
        const extra = formatLevelProgressMessage(res);
        const bonusText = bonusXP > 0 ? ` Bônus de conquistas: +${bonusXP} XP.` : '';
        $('#activityMsg').textContent = `Enviado! ${deltaText}${bonusText} Total: ${totalXP} XP${levelInfo}.${extra}`;
        if (Number.isFinite(Number(totalXP))) $('#xpBox').textContent = totalXP;
        if (Number.isFinite(Number(res.level))) $('#lvlBox').textContent = res.level;
        updateLevelIndicator(res);
        updateUI({ keepLevelIndicator: true, skipAchievements: true, skipCommunity: true });
        setTimeout(()=> $('#activityMsg').textContent='', 4000);
      })
      .submitActivity(payload);
  };

  // Embeds
  if (btnSaveEmbeds) {
    btnSaveEmbeds.addEventListener('click', () => {
      if (!currentUser?.isAdmin) {
        showToast({ message: 'Somente administradores podem atualizar os materiais.', type: 'warning' });
        return;
      }
      const token = getSessionToken();
      if (!token) {
        showToast({ message: 'Sessão expirada. Faça login novamente.', type: 'error' });
        return;
      }
      const excel = excelLinkInput ? excelLinkInput.value.trim() : '';
      const ppt = pptLinkInput ? pptLinkInput.value.trim() : '';
      const recommendedResources = collectTextareaList(resourcesInputEl);
      const upcomingEvents = collectTextareaList(eventsInputEl);
      google.script.run
        .withFailureHandler(err => showToast({ message: err?.message || err, type: 'error' }))
        .withSuccessHandler(() => {
          showToast({ message: 'Materiais atualizados com sucesso.', type: 'success' });
          loadEmbeds();
        })
        .saveEmbeds({ excel, ppt, token, recommendedResources, upcomingEvents });
    });
  }
  if (btnLoadEmbeds) {
    btnLoadEmbeds.addEventListener('click', () => loadEmbeds());
  }
  function loadEmbeds() {
    google.script.run.withSuccessHandler(data => {
      if (excelFrameEl) excelFrameEl.src = normalizeEmbed(data.excel || '');
      if (pptFrameEl) pptFrameEl.src = normalizeEmbed(data.ppt || '');
      if (excelLinkInput) excelLinkInput.value = data.excel || '';
      if (pptLinkInput) pptLinkInput.value = data.ppt || '';
      renderHighlightList(resourcesListEl, data?.recommendedResources, resourcesEmptyEl);
      renderHighlightList(eventsListEl, data?.upcomingEvents, eventsEmptyEl);
      if (resourcesInputEl) {
        const list = Array.isArray(data?.recommendedResources) ? data.recommendedResources : [];
        resourcesInputEl.value = list.join('\n');
      }
      if (eventsInputEl) {
        const list = Array.isArray(data?.upcomingEvents) ? data.upcomingEvents : [];
        eventsInputEl.value = list.join('\n');
      }
    }).getEmbeds();
  }

  // Boot
  (function init(){
    syncAdminVisibility();
    updateCommunityAccess();
    loadEmbeds();
    refreshCommunityWall();
    const stored = getStoredSession();
    if (stored && stored.token) {
      currentSessionToken = stored.token;
    }
    const authSection = $('#authSection');
    if (authSection) authSection.classList.add('hidden');

    if (stored && stored.token) {
      google.script.run
        .withFailureHandler(() => {
          clearStoredSession();
          updateUI();
        })
        .withSuccessHandler(user => {
          if (user && user.id) {
            currentUser = user;
            persistSession(stored.token, user);
          } else {
            clearStoredSession();
          }
          updateUI();
        })
        .resumeSession(stored.token);
    } else {
      updateUI();
    }
  })();
</script>
</body>
</html>
